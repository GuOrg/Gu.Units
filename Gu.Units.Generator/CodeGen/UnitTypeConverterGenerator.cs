// ReSharper disable RedundantStringInterpolation
namespace Gu.Units.Generator.CodeGen
{
    using System.Text;

    public static class UnitTypeConverterGenerator
    {
        public static string Code(Unit unit)
        {
            return new StringBuilder()
                .AppendLine("#nullable enable")
                .AppendLine($"namespace Gu.Units")
                .AppendLine($"{{")
                .AppendLine($"    using System;")
                .AppendLine($"    using System.ComponentModel;")
                .AppendLine($"    using System.ComponentModel.Design.Serialization;")
                .AppendLine($"    using System.Globalization;")
                .AppendLine()
                .AppendLine($"    /// <summary>")
                .AppendLine($"    /// Provides a unified way of converting types of values to other types, as well as for accessing standard values and sub properties.")
                .AppendLine($"    /// </summary>")
                .AppendLine($"    /// <devdoc>")
                .AppendLine($"    /// <para>Provides a type converter to convert <see cref='Gu.Units.{unit.ClassName}'/>")
                .AppendLine($"    /// objects to and from various")
                .AppendLine($"    /// other representations.</para>")
                .AppendLine($"    /// </devdoc>")
                .AppendLine($"    public class {unit.ClassName}TypeConverter : TypeConverter")
                .AppendLine($"    {{")
                .AppendLine($"        /// <inheritdoc />")
                .AppendLine($"        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)")
                .AppendLine($"        {{")
                .AppendLine($"            if (sourceType == typeof(string))")
                .AppendLine($"            {{")
                .AppendLine($"                return true;")
                .AppendLine($"            }}")
                .AppendLine()
                .AppendLine($"            return base.CanConvertFrom(context, sourceType);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <inheritdoc />")
                .AppendLine($"        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)")
                .AppendLine($"        {{")
                .AppendLine($"            if (destinationType == typeof(InstanceDescriptor) || destinationType == typeof(string))")
                .AppendLine($"            {{")
                .AppendLine($"                return true;")
                .AppendLine($"            }}")
                .AppendLine()
                .AppendLine($"            return base.CanConvertTo(context, destinationType);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <inheritdoc />")
                .AppendLine($"        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)")
                .AppendLine($"        {{")
                .AppendLine($"            var text = value as string;")
                .AppendLine($"            if (text != null)")
                .AppendLine($"            {{")
                .AppendLine($"                {unit.ClassName} result;")
                .AppendLine($"                if ({unit.ClassName}.TryParse(text, out result))")
                .AppendLine($"                {{")
                .AppendLine($"                    return result;")
                .AppendLine($"                }}")
                .AppendLine()
                .AppendLine($"                var message = $\"Could not convert the string '{{text}}' to an instance of {unit.ClassName})\";")
                .AppendLine($"                throw new NotSupportedException(message);")
                .AppendLine($"            }}")
                .AppendLine()
                .AppendLine($"            return base.ConvertFrom(context, culture, value);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <inheritdoc />")
                .AppendLine($"        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)")
                .AppendLine($"        {{")
                .AppendLine($"            if (value is {unit.ClassName} && destinationType != null)")
                .AppendLine($"            {{")
                .AppendLine($"                var unit = ({unit.ClassName})value;")
                .AppendLine($"                if (destinationType == typeof(string))")
                .AppendLine($"                {{")
                .AppendLine($"                    return unit.ToString();")
                .AppendLine($"                }}")
                .AppendLine($"                else if (destinationType == typeof(InstanceDescriptor))")
                .AppendLine($"                {{")
                .AppendLine($"                    var parseMethod = typeof({unit.ClassName}).GetMethod(nameof({unit.ClassName}.Parse), new Type[] {{ typeof(string) }});")
                .AppendLine($"                    if (parseMethod != null)")
                .AppendLine($"                    {{")
                .AppendLine($"                        var args = new object[] {{ unit.Symbol }};")
                .AppendLine($"                        return new InstanceDescriptor(parseMethod, args);")
                .AppendLine($"                    }}")
                .AppendLine($"                }}")
                .AppendLine($"            }}")
                .AppendLine()
                .AppendLine($"            return base.ConvertTo(context, culture, value, destinationType);")
                .AppendLine($"        }}")
                .AppendLine($"    }}")
                .AppendLine($"}}")
                .ToString();
        }
    }
}