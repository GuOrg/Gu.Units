// ReSharper disable RedundantStringInterpolation
namespace Gu.Units.Generator.CodeGen
{
    using System.Collections.Generic;
    using System.Text;

    public static class QuantityGenerator
    {
        public static string Code(Quantity quantity)
        {
            return new StringBuilder()
                .AppendLine("#nullable enable")
                .AppendLine($"namespace Gu.Units")
                .AppendLine($"{{")
                .AppendLine($"    using System;")
                .AppendLine($"    using System.ComponentModel;")
                .AppendLine($"    using System.Globalization;")
                .AppendLine($"    using System.Xml;")
                .AppendLine($"    using System.Xml.Schema;")
                .AppendLine($"    using System.Xml.Serialization;")
                .AppendLine()
                .AppendLine($"    /// <summary>")
                .AppendLine($"    /// A type for the quantity <see cref=\"Gu.Units.{quantity.Name}\"/>.")
                .AppendLine($"    /// </summary>")
                .AppendLine($"    [TypeConverter(typeof({quantity.Name}TypeConverter))]")
                .AppendLine($"    [Serializable]")
                .AppendLine($"    public partial struct {quantity.Name} : IQuantity<{quantity.UnitName}>, IComparable<{quantity.Name}>, IEquatable<{quantity.Name}>, IXmlSerializable")
                .AppendLine($"    {{")
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Gets a value that is zero <see cref=\"Gu.Units.{quantity.UnitName}.{quantity.Unit.Name}\"/>")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        public static readonly {quantity.Name} Zero = default({quantity.Name});")
                .AppendLine()
                .AppendLine($"#pragma warning disable SA1307 // Accessible fields must begin with upper-case letter")
                .AppendLine($"#pragma warning disable SA1304 // Non-private readonly fields must begin with upper-case letter")
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// The quantity in <see cref=\"Gu.Units.{quantity.UnitName}.{quantity.Unit.Name}\"/>.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        internal readonly double {quantity.Unit.ParameterName};")
                .AppendLine($"#pragma warning restore SA1304 // Non-private readonly fields must begin with upper-case letter")
                .AppendLine($"#pragma warning restore SA1307 // Accessible fields must begin with upper-case letter")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Initializes a new instance of the <see cref=\"Gu.Units.{quantity.Name}\"/> struct.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"value\">The scalar value.</param>")
                .AppendLine($"        /// <param name=\"unit\"><see cref=\"Gu.Units.{quantity.UnitName}\"/>.</param>")
                .AppendLine($"        public {quantity.Name}(double value, {quantity.UnitName} unit)")
                .AppendLine($"        {{")
                .AppendLine($"            this.{quantity.Unit.ParameterName} = unit.{Names.ToSiUnit}(value);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        private {quantity.Name}(double {quantity.Unit.ParameterName})")
                .AppendLine($"        {{")
                .AppendLine($"            this.{quantity.Unit.ParameterName} = {quantity.Unit.ParameterName};")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Gets the quantity in <see cref=\"Gu.Units.{quantity.UnitName}.{quantity.Unit.Name}\"/>")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        public double {Names.SiValue} => this.{quantity.Unit.ParameterName};")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Gets the <see cref=\"Gu.Units.{quantity.UnitName}\"/> for the <see cref=\"SiValue\"/>")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        public {quantity.UnitName} SiUnit => {quantity.UnitName}.{quantity.Unit.Name};")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Gets the <see cref=\"Gu.Units.IUnit\"/> for the <see cref=\"SiValue\"/>")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        IUnit IQuantity.SiUnit => {quantity.UnitName}.{quantity.Unit.Name};")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Gets the quantity in {quantity.Unit.ParameterName}\".")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        public double {quantity.Unit.Name} => this.{quantity.Unit.ParameterName};")
                .AppendLine()
                .AllConversionsProperties(quantity)
                .OperatorOverloads(quantity)
                .Inverse(quantity)
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Divides <paramref name=\"left\"/> by <paramref name=\"right\"/>")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"left\">The left value</param>")
                .AppendLine($"        /// <param name=\"right\">The right value</param>")
                .AppendLine($"        /// <returns>The <see cref=\"double\"/> that is the result from the division.</returns>")
                .AppendLine($"        public static double operator /({quantity.Name} left, {quantity.Name} right)")
                .AppendLine($"        {{")
                .AppendLine($"            return left.{quantity.Unit.ParameterName} / right.{quantity.Unit.ParameterName};")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Indicates whether two <see cref=\"Gu.Units.{quantity.Name}\"/> instances are equal.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <returns>")
                .AppendLine($"        /// true if the quantities of <paramref name=\"left\"/> and <paramref name=\"right\"/> are equal; otherwise, false.")
                .AppendLine($"        /// </returns>")
                .AppendLine($"        /// <param name=\"left\">The left instance of <see cref=\"Gu.Units.{quantity.Name}\"/>.</param>")
                .AppendLine($"        /// <param name=\"right\">The right instance of <see cref=\"Gu.Units.{quantity.Name}\"/>.</param>")
                .AppendLine($"        public static bool operator ==({quantity.Name} left, {quantity.Name} right)")
                .AppendLine($"        {{")
                .AppendLine($"            return left.Equals(right);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Indicates whether two <see cref=\"Gu.Units.{quantity.Name}\"/> instances are not equal.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <returns>")
                .AppendLine($"        /// true if the quantities of <paramref name=\"left\"/> and <paramref name=\"right\"/> are not equal; otherwise, false.")
                .AppendLine($"        /// </returns>")
                .AppendLine($"        /// <param name=\"left\">The left instance of <see cref=\"Gu.Units.{quantity.Name}\"/>.</param>")
                .AppendLine($"        /// <param name=\"right\">The right instance of <see cref=\"Gu.Units.{quantity.Name}\"/>.</param>")
                .AppendLine($"        public static bool operator !=({quantity.Name} left, {quantity.Name} right)")
                .AppendLine($"        {{")
                .AppendLine($"            return !left.Equals(right);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Indicates whether a specified <see cref=\"Gu.Units.{quantity.Name}\"/> is less than another specified <see cref=\"Gu.Units.{quantity.Name}\"/>.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <returns>")
                .AppendLine($"        /// true if the quantity of <paramref name=\"left\"/> is less than the quantity of <paramref name=\"right\"/>; otherwise, false.")
                .AppendLine($"        /// </returns>")
                .AppendLine($"        /// <param name=\"left\">The left instance of <see cref=\"Gu.Units.{quantity.Name}\"/>.</param>")
                .AppendLine($"        /// <param name=\"right\">The right instance of <see cref=\"Gu.Units.{quantity.Name}\"/>.</param>")
                .AppendLine($"        public static bool operator <({quantity.Name} left, {quantity.Name} right)")
                .AppendLine($"        {{")
                .AppendLine($"            return left.{quantity.Unit.ParameterName} < right.{quantity.Unit.ParameterName};")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Indicates whether a specified <see cref=\"Gu.Units.{quantity.Name}\"/> is greater than another specified <see cref=\"Gu.Units.{quantity.Name}\"/>.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <returns>")
                .AppendLine($"        /// true if the quantity of <paramref name=\"left\"/> is greater than the quantity of <paramref name=\"right\"/>; otherwise, false.")
                .AppendLine($"        /// </returns>")
                .AppendLine($"        /// <param name=\"left\">The left instance of <see cref=\"Gu.Units.{quantity.Name}\"/>.</param>")
                .AppendLine($"        /// <param name=\"right\">The right instance of <see cref=\"Gu.Units.{quantity.Name}\"/>.</param>")
                .AppendLine($"        public static bool operator >({quantity.Name} left, {quantity.Name} right)")
                .AppendLine($"        {{")
                .AppendLine($"            return left.{quantity.Unit.ParameterName} > right.{quantity.Unit.ParameterName};")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Indicates whether a specified <see cref=\"Gu.Units.{quantity.Name}\"/> is less than or equal to another specified <see cref=\"Gu.Units.{quantity.Name}\"/>.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <returns>")
                .AppendLine($"        /// true if the quantity of <paramref name=\"left\"/> is less than or equal to the quantity of <paramref name=\"right\"/>; otherwise, false.")
                .AppendLine($"        /// </returns>")
                .AppendLine($"        /// <param name=\"left\">The left instance of <see cref=\"Gu.Units.{quantity.Name}\"/>.</param>")
                .AppendLine($"        /// <param name=\"right\">The right instance of <see cref=\"Gu.Units.{quantity.Name}\"/>.</param>")
                .AppendLine($"        public static bool operator <=({quantity.Name} left, {quantity.Name} right)")
                .AppendLine($"        {{")
                .AppendLine($"            return left.{quantity.Unit.ParameterName} <= right.{quantity.Unit.ParameterName};")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Indicates whether a specified <see cref=\"Gu.Units.{quantity.Name}\"/> is greater than or equal to another specified <see cref=\"Gu.Units.{quantity.Name}\"/>.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <returns>")
                .AppendLine($"        /// true if the quantity of <paramref name=\"left\"/> is greater than or equal to the quantity of <paramref name=\"right\"/>; otherwise, false.")
                .AppendLine($"        /// </returns>")
                .AppendLine($"        /// <param name=\"left\">The left instance of <see cref=\"Gu.Units.{quantity.Name}\"/>.</param>")
                .AppendLine($"        /// <param name=\"right\">The right instance of <see cref=\"Gu.Units.{quantity.Name}\"/>.</param>")
                .AppendLine($"        public static bool operator >=({quantity.Name} left, {quantity.Name} right)")
                .AppendLine($"        {{")
                .AppendLine($"            return left.{quantity.Unit.ParameterName} >= right.{quantity.Unit.ParameterName};")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Multiplies an instance of <see cref=\"Gu.Units.{quantity.Name}\"/> with <paramref name=\"left\"/> and returns the result.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"right\">The right instance of <see cref=\"Gu.Units.{quantity.Name}\"/></param>")
                .AppendLine($"        /// <param name=\"left\">The left instance of <seealso cref=\"double\"/></param>")
                .AppendLine($"        /// <returns>Multiplies <paramref name=\"left\"/> with <see cref=\"Gu.Units.{quantity.Name}\"/> and returns the result.</returns>")
                .AppendLine($"        public static {quantity.Name} operator *(double left, {quantity.Name} right)")
                .AppendLine($"        {{")
                .AppendLine($"            return new {quantity.Name}(left * right.{quantity.Unit.ParameterName});")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Multiplies an instance of <see cref=\"Gu.Units.{quantity.Name}\"/> with <paramref name=\"right\"/> and returns the result.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"left\">The left instance of <see cref=\"Gu.Units.{quantity.Name}\"/></param>")
                .AppendLine($"        /// <param name=\"right\">The right instance of <seealso cref=\"double\"/></param>")
                .AppendLine($"        /// <returns>Multiplies an <see cref=\"Gu.Units.{quantity.Name}\"/> with <paramref name=\"right\"/> and returns the result.</returns>")
                .AppendLine($"        public static {quantity.Name} operator *({quantity.Name} left, double right)")
                .AppendLine($"        {{")
                .AppendLine($"            return new {quantity.Name}(left.{quantity.Unit.ParameterName} * right);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Divides an instance of <see cref=\"Gu.Units.{quantity.Name}\"/> with <paramref name=\"right\"/> and returns the result.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"left\">The left instance of <see cref=\"Gu.Units.{quantity.Name}\"/></param>")
                .AppendLine($"        /// <param name=\"right\">The right instance of <seealso cref=\"double\"/></param>")
                .AppendLine($"        /// <returns>Divides an instance of <see cref=\"Gu.Units.{quantity.Name}\"/> by <paramref name=\"right\"/> and returns the result.</returns>")
                .AppendLine($"        public static {quantity.Name} operator /({quantity.Name} left, double right)")
                .AppendLine($"        {{")
                .AppendLine($"            return new {quantity.Name}(left.{quantity.Unit.ParameterName} / right);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Adds two specified <see cref=\"Gu.Units.{quantity.Name}\"/> instances.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <returns>")
                .AppendLine($"        /// An <see cref=\"Gu.Units.{quantity.Name}\"/> whose quantity is the sum of the quantities of <paramref name=\"left\"/> and <paramref name=\"right\"/>.")
                .AppendLine($"        /// </returns>")
                .AppendLine($"        /// <param name=\"left\">The left instance of <see cref=\"Gu.Units.{quantity.Name}\"/>.</param>")
                .AppendLine($"        /// <param name=\"right\">The right instance of <see cref=\"Gu.Units.{quantity.Name}\"/>.</param>")
                .AppendLine($"        public static {quantity.Name} operator +({quantity.Name} left, {quantity.Name} right)")
                .AppendLine($"        {{")
                .AppendLine($"            return new {quantity.Name}(left.{quantity.Unit.ParameterName} + right.{quantity.Unit.ParameterName});")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Subtracts an {quantity.Name} from another {quantity.Name} and returns the difference.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <returns>")
                .AppendLine($"        /// An <see cref=\"Gu.Units.{quantity.Name}\"/> that is the difference")
                .AppendLine($"        /// </returns>")
                .AppendLine($"        /// <param name=\"left\">The left instance of <see cref=\"Gu.Units.{quantity.Name}\"/> (the minuend).</param>")
                .AppendLine($"        /// <param name=\"right\">The right instance of <see cref=\"Gu.Units.{quantity.Name}\"/> (the subtrahend).</param>")
                .AppendLine($"        public static {quantity.Name} operator -({quantity.Name} left, {quantity.Name} right)")
                .AppendLine($"        {{")
                .AppendLine($"            return new {quantity.Name}(left.{quantity.Unit.ParameterName} - right.{quantity.Unit.ParameterName});")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Returns an <see cref=\"Gu.Units.{quantity.Name}\"/> whose quantity is the negated quantity of the specified instance.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <returns>")
                .AppendLine($"        /// An <see cref=\"Gu.Units.{quantity.Name}\"/> with the same numeric quantity as this instance, but the opposite sign.")
                .AppendLine($"        /// </returns>")
                .AppendLine($"        /// <param name=\"{quantity.ParameterName}\">An instance of <see cref=\"Gu.Units.{quantity.Name}\"/></param>")
                .AppendLine($"        public static {quantity.Name} operator -({quantity.Name} {quantity.ParameterName})")
                .AppendLine($"        {{")
                .AppendLine($"            return new {quantity.Name}(-1 * {quantity.ParameterName}.{quantity.Unit.ParameterName});")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Returns the specified instance of <see cref=\"Gu.Units.{quantity.Name}\"/>.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <returns>")
                .AppendLine($"        /// Returns <paramref name=\"{quantity.ParameterName}\"/>.")
                .AppendLine($"        /// </returns>")
                .AppendLine($"        /// <param name=\"{quantity.ParameterName}\">An instance of <see cref=\"Gu.Units.{quantity.Name}\"/></param>")
                .AppendLine($"        public static {quantity.Name} operator +({quantity.Name} {quantity.ParameterName})")
                .AppendLine($"        {{")
                .AppendLine($"            return {quantity.ParameterName};")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Creates an instance of <see cref=\"Gu.Units.{quantity.Name}\"/> from its string representation")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"text\">The string representation of the <see cref=\"Gu.Units.{quantity.Name}\"/></param>")
                .AppendLine($"        /// <returns>The <see cref=\"Gu.Units.{quantity.Name}\"/> parsed from <paramref name=\"text\"/></returns>")
                .AppendLine($"        public static {quantity.Name} Parse(string text)")
                .AppendLine($"        {{")
                .AppendLine($"            return QuantityParser.Parse<{quantity.UnitName}, {quantity.Name}>(text, From, NumberStyles.Float, CultureInfo.CurrentCulture);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Creates an instance of <see cref=\"Gu.Units.{quantity.Name}\"/> from its string representation")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"text\">The string representation of the <see cref=\"Gu.Units.{quantity.Name}\"/></param>")
                .AppendLine($"        /// <param name=\"provider\">Specifies the formatProvider to be used.</param>")
                .AppendLine($"        /// <returns>The <see cref=\"Gu.Units.{quantity.Name}\"/> parsed from <paramref name=\"text\"/></returns>")
                .AppendLine($"        public static {quantity.Name} Parse(string text, IFormatProvider provider)")
                .AppendLine($"        {{")
                .AppendLine($"            return QuantityParser.Parse<{quantity.UnitName}, {quantity.Name}>(text, From, NumberStyles.Float, provider);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Creates an instance of <see cref=\"Gu.Units.{quantity.Name}\"/> from its string representation")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"text\">The string representation of the <see cref=\"Gu.Units.{quantity.Name}\"/></param>")
                .AppendLine($"        /// <param name=\"styles\">Specifies the <see cref=\"NumberStyles\"/> to be used.</param>")
                .AppendLine($"        /// <returns>The <see cref=\"Gu.Units.{quantity.Name}\"/> parsed from <paramref name=\"text\"/></returns>")
                .AppendLine($"        public static {quantity.Name} Parse(string text, NumberStyles styles)")
                .AppendLine($"        {{")
                .AppendLine($"            return QuantityParser.Parse<{quantity.UnitName}, {quantity.Name}>(text, From, styles, CultureInfo.CurrentCulture);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Creates an instance of <see cref=\"Gu.Units.{quantity.Name}\"/> from its string representation")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"text\">The string representation of the <see cref=\"Gu.Units.{quantity.Name}\"/></param>")
                .AppendLine($"        /// <param name=\"styles\">Specifies the <see cref=\"NumberStyles\"/> to be used.</param>")
                .AppendLine($"        /// <param name=\"provider\">Specifies the formatProvider to be used.</param>")
                .AppendLine($"        /// <returns>The <see cref=\"Gu.Units.{quantity.Name}\"/> parsed from <paramref name=\"text\"/></returns>")
                .AppendLine($"        public static {quantity.Name} Parse(string text, NumberStyles styles, IFormatProvider provider)")
                .AppendLine($"        {{")
                .AppendLine($"            return QuantityParser.Parse<{quantity.UnitName}, {quantity.Name}>(text, From, styles, provider);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Creates an instance of <see cref=\"Gu.Units.{quantity.Name}\"/> from its string representation")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"text\">The string representation of the <see cref=\"Gu.Units.{quantity.Name}\"/></param>")
                .AppendLine($"        /// <param name=\"result\">The parsed <see cref=\"{quantity.Name}\"/></param>")
                .AppendLine($"        /// <returns>True if an instance of <see cref=\"{quantity.Name}\"/> could be parsed from <paramref name=\"text\"/></returns>")
                .AppendLine($"        public static bool TryParse(string text, out {quantity.Name} result)")
                .AppendLine($"        {{")
                .AppendLine($"            return QuantityParser.TryParse<{quantity.UnitName}, {quantity.Name}>(text, From, NumberStyles.Float, CultureInfo.CurrentCulture, out result);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Creates an instance of <see cref=\"Gu.Units.{quantity.Name}\"/> from its string representation")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"text\">The string representation of the <see cref=\"Gu.Units.{quantity.Name}\"/></param>")
                .AppendLine($"        /// <param name=\"provider\">Specifies the formatProvider to be used.</param>")
                .AppendLine($"        /// <param name=\"result\">The parsed <see cref=\"{quantity.Name}\"/></param>")
                .AppendLine($"        /// <returns>True if an instance of <see cref=\"{quantity.Name}\"/> could be parsed from <paramref name=\"text\"/></returns>")
                .AppendLine($"        public static bool TryParse(string text, IFormatProvider provider, out {quantity.Name} result)")
                .AppendLine($"        {{")
                .AppendLine($"            return QuantityParser.TryParse<{quantity.UnitName}, {quantity.Name}>(text, From, NumberStyles.Float, provider, out result);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Creates an instance of <see cref=\"Gu.Units.{quantity.Name}\"/> from its string representation")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"text\">The string representation of the <see cref=\"Gu.Units.{quantity.Name}\"/></param>")
                .AppendLine($"        /// <param name=\"styles\">Specifies the <see cref=\"NumberStyles\"/> to be used.</param>")
                .AppendLine($"        /// <param name=\"result\">The parsed <see cref=\"{quantity.Name}\"/></param>")
                .AppendLine($"        /// <returns>True if an instance of <see cref=\"{quantity.Name}\"/> could be parsed from <paramref name=\"text\"/></returns>")
                .AppendLine($"        public static bool TryParse(string text, NumberStyles styles, out {quantity.Name} result)")
                .AppendLine($"        {{")
                .AppendLine($"            return QuantityParser.TryParse<{quantity.UnitName}, {quantity.Name}>(text, From, styles, CultureInfo.CurrentCulture, out result);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Creates an instance of <see cref=\"Gu.Units.{quantity.Name}\"/> from its string representation")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"text\">The string representation of the <see cref=\"Gu.Units.{quantity.Name}\"/></param>")
                .AppendLine($"        /// <param name=\"styles\">Specifies the <see cref=\"NumberStyles\"/> to be used.</param>")
                .AppendLine($"        /// <param name=\"provider\">Specifies the formatProvider to be used.</param>")
                .AppendLine($"        /// <param name=\"result\">The parsed <see cref=\"{quantity.Name}\"/></param>")
                .AppendLine($"        /// <returns>True if an instance of <see cref=\"{quantity.Name}\"/> could be parsed from <paramref name=\"text\"/></returns>")
                .AppendLine($"        public static bool TryParse(string text, NumberStyles styles, IFormatProvider provider, out {quantity.Name} result)")
                .AppendLine($"        {{")
                .AppendLine($"            return QuantityParser.TryParse<{quantity.UnitName}, {quantity.Name}>(text, From, styles, provider, out result);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Reads an instance of <see cref=\"Gu.Units.{quantity.Name}\"/> from the <paramref name=\"reader\"/>")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"reader\">The xml reader positioned at the start of the unit value.</param>")
                .AppendLine($"        /// <returns>An instance of <see cref=\"Gu.Units.{quantity.Name}\"/></returns>")
                .AppendLine($"        public static {quantity.Name} ReadFrom(XmlReader reader)")
                .AppendLine($"        {{")
                .AppendLine($"            var v = default({quantity.Name});")
                .AppendLine($"            v.ReadXml(reader);")
                .AppendLine($"            return v;")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Creates a new instance of <see cref=\"Gu.Units.{quantity.Name}\"/>.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"value\">The scalar value.</param>")
                .AppendLine($"        /// <param name=\"unit\">The unit.</param>")
                .AppendLine($"        /// <returns>An instance of <see cref=\"Gu.Units.{quantity.Name}\"/></returns>")
                .AppendLine($"        public static {quantity.Name} From(double value, {quantity.UnitName} unit)")
                .AppendLine($"        {{")
                .AppendLine($"            return new {quantity.Name}(unit.{Names.ToSiUnit}(value));")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Creates a new instance of <see cref=\"Gu.Units.{quantity.Name}\"/>.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"{quantity.Unit.XDocParameterName}\">The value in <see cref=\"Gu.Units.{quantity.UnitName}.{quantity.Unit.Name}\"/></param>")
                .AppendLine($"        /// <returns>An instance of <see cref=\"Gu.Units.{quantity.Name}\"/></returns>")
                .AppendLine($"        public static {quantity.Name} From{quantity.Unit.Name}(double {quantity.Unit.ParameterName})")
                .AppendLine($"        {{")
                .AppendLine($"            return new {quantity.Name}({quantity.Unit.ParameterName});")
                .AppendLine($"        }}")
                .AppendLine()
                .AllConversionsMethods(quantity)
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Get the scalar value")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"unit\">The unit to get the value in.</param>")
                .AppendLine($"        /// <returns>The scalar value of this in the specified unit</returns>")
                .AppendLine($"        public double GetValue({quantity.UnitName} unit)")
                .AppendLine($"        {{")
                .AppendLine($"            return unit.FromSiUnit(this.{quantity.Unit.ParameterName});")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Returns a string with the <see cref=\"SiValue\"/> and <see cref=\"SiUnit\"/>")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <returns>The string representation of the <see cref=\"{quantity.Name}\"/></returns>")
                .AppendLine($"        public override string ToString()")
                .AppendLine($"        {{")
                .AppendLine($"            var quantityFormat = FormatCache<{quantity.UnitName}>.GetOrCreate(null, this.SiUnit);")
                .AppendLine($"            return this.ToString(quantityFormat, (IFormatProvider?)null);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Returns a string with the <see cref=\"SiValue\"/> and <see cref=\"SiUnit\"/>")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"provider\">Specifies the formatProvider to be used.</param>")
                .AppendLine($"        /// <returns>The string representation of the <see cref=\"{quantity.Name}\"/></returns>")
                .AppendLine($"        public string ToString(IFormatProvider provider)")
                .AppendLine($"        {{")
                .AppendLine($"            var quantityFormat = FormatCache<{quantity.UnitName}>.GetOrCreate(string.Empty, this.SiUnit);")
                .AppendLine($"            return this.ToString(quantityFormat, provider);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// If an invalid format is provided the string will look like: {{value: ??}} {{unit: ??}}")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"format\">Must be a composite format ex: \\\"F2 {quantity.Unit.Symbol}\\\"</param>")
                .AppendLine($"        /// <returns>The string representation of the <see cref=\"{quantity.Name}\"/></returns>")
                .AppendLine($"        public string ToString(string format)")
                .AppendLine($"        {{")
                .AppendLine($"            var quantityFormat = FormatCache<{quantity.UnitName}>.GetOrCreate(format);")
                .AppendLine($"            return this.ToString(quantityFormat, (IFormatProvider?)null);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// If an invalid format is provided the string will look like: {{value: ??}} {{unit: ??}}")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"format\">Must be a composite format ex: \\\"F2 {quantity.Unit.Symbol}\\\"</param>")
                .AppendLine($"        /// <param name=\"formatProvider\">Specifies the formatProvider to be used.</param>")
                .AppendLine($"        /// <returns>The string representation of the <see cref=\"{quantity.Name}\"/></returns>")
                .AppendLine($"        public string ToString(string? format, IFormatProvider? formatProvider)")
                .AppendLine($"        {{")
                .AppendLine($"            var quantityFormat = FormatCache<{quantity.UnitName}>.GetOrCreate(format);")
                .AppendLine($"            return this.ToString(quantityFormat, formatProvider);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        ///  If an invalid format is provided the string will look like: {{value: ??}} {{unit: ??}}")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"valueFormat\">For formatting the scalar, format stings valid for <see cref=\"double\"/> are valid")
                .AppendLine($"        ///  ex: F2</param>")
                .AppendLine($"        /// <param name=\"symbolFormat\">For formatting of the unit ex {quantity.Unit.Symbol}</param>")
                .AppendLine($"        /// <returns>The string representation of the <see cref=\"{quantity.Name}\"/></returns>")
                .AppendLine($"        public string ToString(string valueFormat, string symbolFormat)")
                .AppendLine($"        {{")
                .AppendLine($"            var quantityFormat = FormatCache<{quantity.UnitName}>.GetOrCreate(valueFormat, symbolFormat);")
                .AppendLine($"            return this.ToString(quantityFormat, (IFormatProvider?)null);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        ///  If an invalid format is provided the string will look like: {{value: ??}} {{unit: ??}}")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"valueFormat\">For formatting the scalar, format stings valid for <see cref=\"double\"/> are valid")
                .AppendLine($"        ///  ex: F2</param>")
                .AppendLine($"        /// <param name=\"symbolFormat\">For formatting the unit ex {quantity.Unit.Symbol}</param>")
                .AppendLine($"        /// <param name=\"formatProvider\">Specifies the <see cref=\"IFormatProvider\"/> to use when creating the string representation.</param>")
                .AppendLine($"        /// <returns>The string representation of the <see cref=\"{quantity.Name}\"/></returns>")
                .AppendLine($"        public string ToString(string valueFormat, string symbolFormat, IFormatProvider formatProvider)")
                .AppendLine($"        {{")
                .AppendLine($"            var quantityFormat = FormatCache<{quantity.UnitName}>.GetOrCreate(valueFormat, symbolFormat);")
                .AppendLine($"            return this.ToString(quantityFormat, formatProvider);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Converts the quantity value of this instance to its equivalent string representation.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"unit\">The unit to use in the conversion</param>")
                .AppendLine($"        /// <returns>The string representation of the value of this instance.</returns>")
                .AppendLine($"        public string ToString({quantity.UnitName} unit)")
                .AppendLine($"        {{")
                .AppendLine($"            var quantityFormat = FormatCache<{quantity.UnitName}>.GetOrCreate(null, unit);")
                .AppendLine($"            return this.ToString(quantityFormat, null);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Converts the quantity value of this instance to its equivalent string representation.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"unit\">The unit to use in the conversion</param>")
                .AppendLine($"        /// <param name=\"symbolFormat\">Specifies the symbol format to use when creating the string representation.</param>")
                .AppendLine($"        /// <returns>The string representation of the value of this instance.</returns>")
                .AppendLine($"        public string ToString({quantity.UnitName} unit, SymbolFormat symbolFormat)")
                .AppendLine($"        {{")
                .AppendLine($"            var quantityFormat = FormatCache<{quantity.UnitName}>.GetOrCreate(null, unit, symbolFormat);")
                .AppendLine($"            return this.ToString(quantityFormat, null);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Converts the quantity value of this instance to its equivalent string representation.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"unit\">The unit to use in the conversion</param>")
                .AppendLine($"        /// <param name=\"formatProvider\">Specifies the <see cref=\"IFormatProvider\"/> to use when creating the string representation.</param>")
                .AppendLine($"        /// <returns>The string representation of the value of this instance.</returns>")
                .AppendLine($"        public string ToString({quantity.UnitName} unit, IFormatProvider formatProvider)")
                .AppendLine($"        {{")
                .AppendLine($"            var quantityFormat = FormatCache<{quantity.UnitName}>.GetOrCreate(null, unit);")
                .AppendLine($"            return this.ToString(quantityFormat, formatProvider);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Converts the quantity value of this instance to its equivalent string representation.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"unit\">The unit to use in the conversion</param>")
                .AppendLine($"        /// <param name=\"symbolFormat\">Specifies the symbol format to use when creating the string representation.</param>")
                .AppendLine($"        /// <param name=\"formatProvider\">Specifies the <see cref=\"IFormatProvider\"/> to use when creating the string representation.</param>")
                .AppendLine($"        /// <returns>The string representation of the value of this instance.</returns>")
                .AppendLine($"        public string ToString({quantity.UnitName} unit, SymbolFormat symbolFormat, IFormatProvider formatProvider)")
                .AppendLine($"        {{")
                .AppendLine($"            var quantityFormat = FormatCache<{quantity.UnitName}>.GetOrCreate(null, unit, symbolFormat);")
                .AppendLine($"            return this.ToString(quantityFormat, formatProvider);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Converts the quantity value of this instance to its equivalent string representation.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"valueFormat\">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref=\"double\"/></param>")
                .AppendLine($"        /// <param name=\"unit\">The unit to use in the conversion</param>")
                .AppendLine($"        /// <returns>The string representation of the value of this instance.</returns>")
                .AppendLine($"        public string ToString(string valueFormat, {quantity.UnitName} unit)")
                .AppendLine($"        {{")
                .AppendLine($"            var quantityFormat = FormatCache<{quantity.UnitName}>.GetOrCreate(valueFormat, unit);")
                .AppendLine($"            return this.ToString(quantityFormat, null);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Converts the quantity value of this instance to its equivalent string representation.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"valueFormat\">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref=\"double\"/></param>")
                .AppendLine($"        /// <param name=\"unit\">The unit to use in the conversion</param>")
                .AppendLine($"        /// <param name=\"symbolFormat\">Specifies the symbol format to use when creating the string representation.</param>")
                .AppendLine($"        /// <returns>The string representation of the value of this instance.</returns>")
                .AppendLine($"        public string ToString(string valueFormat, {quantity.UnitName} unit, SymbolFormat symbolFormat)")
                .AppendLine($"        {{")
                .AppendLine($"            var quantityFormat = FormatCache<{quantity.UnitName}>.GetOrCreate(valueFormat, unit, symbolFormat);")
                .AppendLine($"            return this.ToString(quantityFormat, null);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Converts the quantity value of this instance to its equivalent string representation.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"valueFormat\">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref=\"double\"/></param>")
                .AppendLine($"        /// <param name=\"unit\">The unit to use in the conversion</param>")
                .AppendLine($"        /// <param name=\"formatProvider\">Specifies the <see cref=\"IFormatProvider\"/> to use when creating the string representation.</param>")
                .AppendLine($"        /// <returns>The string representation of the value of this instance.</returns>")
                .AppendLine($"        public string ToString(string valueFormat, {quantity.UnitName} unit, IFormatProvider formatProvider)")
                .AppendLine($"        {{")
                .AppendLine($"            var quantityFormat = FormatCache<{quantity.UnitName}>.GetOrCreate(valueFormat, unit);")
                .AppendLine($"            return this.ToString(quantityFormat, formatProvider);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Converts the quantity value of this instance to its equivalent string representation.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"valueFormat\">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref=\"double\"/></param>")
                .AppendLine($"        /// <param name=\"unit\">The unit to use in the conversion</param>")
                .AppendLine($"        /// <param name=\"symbolFormat\">Specifies the symbol format to use when creating the string representation.</param>")
                .AppendLine($"        /// <param name=\"formatProvider\">Specifies the <see cref=\"IFormatProvider\"/> to use when creating the string representation.</param>")
                .AppendLine($"        /// <returns>The string representation of the value of this instance.</returns>")
                .AppendLine($"        public string ToString(string valueFormat, {quantity.UnitName} unit, SymbolFormat symbolFormat, IFormatProvider formatProvider)")
                .AppendLine($"        {{")
                .AppendLine($"            var quantityFormat = FormatCache<{quantity.UnitName}>.GetOrCreate(valueFormat, unit, symbolFormat);")
                .AppendLine($"            return this.ToString(quantityFormat, formatProvider);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Compares this instance to a specified <see cref=\"Gu.Units.{quantity.Name}\"/> object and returns an integer that indicates whether this <paramref name=\"quantity\"/> is smaller than, equal to, or greater than the <see cref=\"Gu.Units.{quantity.Name}\"/> object.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <returns>")
                .AppendLine($"        /// A signed number indicating the relative quantities of this instance and <paramref name=\"quantity\"/>.")
                .AppendLine($"        /// Value")
                .AppendLine($"        /// Description")
                .AppendLine($"        /// A negative integer")
                .AppendLine($"        /// This instance is smaller than <paramref name=\"quantity\"/>.")
                .AppendLine($"        /// Zero")
                .AppendLine($"        /// This instance is equal to <paramref name=\"quantity\"/>.")
                .AppendLine($"        /// A positive integer")
                .AppendLine($"        /// This instance is larger than <paramref name=\"quantity\"/>.")
                .AppendLine($"        /// </returns>")
                .AppendLine($"        /// <param name=\"quantity\">An instance of <see cref=\"Gu.Units.{quantity.Name}\"/> object to compare to this instance.</param>")
                .AppendLine($"        public int CompareTo({quantity.Name} quantity)")
                .AppendLine($"        {{")
                .AppendLine($"            return this.{quantity.Unit.ParameterName}.CompareTo(quantity.{quantity.Unit.ParameterName});")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Returns a quantity indicating whether this instance is equal to a specified <see cref=\"Gu.Units.{quantity.Name}\"/> object.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <returns>")
                .AppendLine($"        /// true if <paramref name=\"other\"/> represents the same {quantity.Name} as this instance; otherwise, false.")
                .AppendLine($"        /// </returns>")
                .AppendLine($"        /// <param name=\"other\">An instance of <see cref=\"Gu.Units.{quantity.Name}\"/> object to compare with this instance.</param>")
                .AppendLine($"        public bool Equals({quantity.Name} other)")
                .AppendLine($"        {{")
                .AppendLine($"            return this.{quantity.Unit.ParameterName}.Equals(other.{quantity.Unit.ParameterName});")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Returns a quantity indicating whether this instance is equal to a specified <see cref=\"Gu.Units.{quantity.Name}\"/> object within the given tolerance.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <returns>")
                .AppendLine($"        /// true if <paramref name=\"other\"/> represents the same {quantity.Name} as this instance; otherwise, false.")
                .AppendLine($"        /// </returns>")
                .AppendLine($"        /// <param name=\"other\">An instance of <see cref=\"Gu.Units.{quantity.Name}\"/> object to compare with this instance.</param>")
                .AppendLine($"        /// <param name=\"tolerance\">The maximum difference for being considered equal. Must be greater than zero.</param>")
                .AppendLine($"        public bool Equals({quantity.Name} other, {quantity.Name} tolerance)")
                .AppendLine($"        {{")
                .AppendLine($"            Ensure.GreaterThan(tolerance.{quantity.Unit.ParameterName}, 0, nameof(tolerance));")
                .AppendLine($"            return Math.Abs(this.{quantity.Unit.ParameterName} - other.{quantity.Unit.ParameterName}) < tolerance.{quantity.Unit.ParameterName};")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Returns a quantity indicating whether this instance is equal to a specified <see cref=\"Gu.Units.{quantity.Name}\"/> object.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"obj\">An object to compare with this instance.</param>")
                .AppendLine($"        /// <returns>")
                .AppendLine($"        /// true if <paramref name=\"obj\"/> represents the same <see cref=\"Gu.Units.{quantity.Name}\"/> as this instance; otherwise, false.")
                .AppendLine($"        /// </returns>")
                .AppendLine($"        public override bool Equals(object? obj)")
                .AppendLine($"        {{")
                .AppendLine($"            return obj is {quantity.Name} other && this.Equals(other);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Returns the hash code for this instance.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <returns>A 32-bit signed integer hash code.</returns>")
                .AppendLine($"        public override int GetHashCode()")
                .AppendLine($"        {{")
                .AppendLine($"            return this.{quantity.Unit.ParameterName}.GetHashCode();")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// This method is reserved and should not be used. When implementing the IXmlSerializable interface,")
                .AppendLine($"        /// you should return null (Nothing in Visual Basic) from this method, and instead,")
                .AppendLine($"        /// if specifying a custom schema is required, apply the <see cref=\"System.Xml.Serialization.XmlSchemaProviderAttribute\"/> to the class.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <returns>")
                .AppendLine($"        /// An <see cref=\"System.Xml.Schema.XmlSchema\"/> that describes the XML representation of the object that is produced by the")
                .AppendLine($"        ///  <see cref=\"M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)\"/>")
                .AppendLine($"        /// method and consumed by the <see cref=\"M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)\"/> method.")
                .AppendLine($"        /// </returns>")
                .AppendLine($"        public XmlSchema? GetSchema() => null;")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Generates an object from its XML representation.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"reader\">The <see cref=\"System.Xml.XmlReader\"/> stream from which the object is deserialized. </param>")
                .AppendLine($"        public void ReadXml(XmlReader reader)")
                .AppendLine($"        {{")
                .AppendLine($"            // Hacking set readonly fields here, can't think of a cleaner workaround")
                .AppendLine($"            XmlExt.SetReadonlyField(ref this, \"{quantity.Unit.ParameterName}\", reader, \"Value\");")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Converts an object into its XML representation.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"writer\">The <see cref=\"System.Xml.XmlWriter\"/> stream to which the object is serialized. </param>")
                .AppendLine($"        public void WriteXml(XmlWriter writer)")
                .AppendLine($"        {{")
                .AppendLine($"            XmlExt.WriteAttribute(writer, \"Value\", this.{quantity.Unit.ParameterName});")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        internal string ToString(QuantityFormat<{quantity.UnitName}> format, IFormatProvider? formatProvider)")
                .AppendLine($"        {{")
                .AppendLine($"            using (var builder = StringBuilderPool.Borrow())")
                .AppendLine($"            {{")
                .AppendLine($"                builder.Append(this, format, formatProvider);")
                .AppendLine($"                return builder.ToString();")
                .AppendLine($"            }}")
                .AppendLine($"        }}")
                .AppendLine($"    }}")
                .AppendLine($"}}")
                .ToString();
        }

        private static StringBuilder AllConversionsProperties(this StringBuilder builder, Quantity quantity)
        {
            foreach (var conversion in quantity.Unit.AllConversions)
            {
                var fromSi = conversion.FromSi.Replace(quantity.Unit.ParameterName, "this." + quantity.Unit.ParameterName);
                builder
                    .AppendLine($"        /// <summary>")
                    .AppendLine($"        /// Gets the quantity in {conversion.Name}")
                    .AppendLine($"        /// </summary>")
                    .AppendLine($"        public double {conversion.Name} => {fromSi};")
                    .AppendLine();
            }

            return builder;
        }

        private static StringBuilder OperatorOverloads(this StringBuilder builder, Quantity quantity)
        {
            foreach (var op in quantity.OperatorOverloads)
            {
                builder
                    .AppendLine($"        /// <summary>")
                    .AppendLine($"        /// {(op.Operator == "*" ? "Multiplies" : "Divides")} <paramref name=\"left\"/> {(op.Operator == "*" ? "with" : "by")} <paramref name=\"right\"/>")
                    .AppendLine($"        /// </summary>")
                    .AppendLine($"        /// <param name=\"left\">The left value</param>")
                    .AppendLine($"        /// <param name=\"right\">The right value</param>")
                    .AppendLine($"        /// <returns>The <see cref=\"{op.Result.Name}\"/> that is the result from the {(op.Operator == "*" ? "multiplication" : "division")}.</returns>")
                    .AppendLine($"        public static {op.Result.Name} operator {op.Operator}({op.Left.Name} left, {op.Right.Name} right)")
                    .AppendLine($"        {{")
                    .AppendLine($"            return {op.Result.Name}.From{op.Result.Unit.Name}(left.{op.Left.Unit.ParameterName} {op.Operator} right.{op.Right.Unit.ParameterName});")
                    .AppendLine($"        }}")
                    .AppendLine();
            }

            return builder;
        }

        private static StringBuilder Inverse(this StringBuilder builder, Quantity quantity)
        {
            if (quantity.Inverse is { } inverse)
            {
                return builder
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Divides <paramref name=\"left\"/> by <paramref name=\"right\"/>")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"left\">The left value</param>")
                .AppendLine($"        /// <param name=\"right\">The right value</param>")
                .AppendLine($"        /// <returns>The {inverse.Inverted.Name} that is the result from the division.</returns>")
                .AppendLine($"        public static {inverse.Inverted.Name} operator /(double left, {quantity.Name} right)")
                .AppendLine($"        {{")
                .AppendLine($"            return {inverse.Inverted.Name}.From{inverse.Inverted.Unit.Name}(left / right.{quantity.Unit.ParameterName});")
                .AppendLine($"        }}")
                .AppendLine();
            }

            return builder;
        }

        private static StringBuilder AllConversionsMethods(this StringBuilder builder, Quantity quantity)
        {
            foreach (var conversion in quantity.Unit.AllConversions)
            {
                builder
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Creates a new instance of <see cref=\"Gu.Units.{quantity.Name}\"/>.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"{conversion.XDocParameterName}\">The value in {conversion.Symbol}.</param>")
                .AppendLine($"        /// <returns>An instance of <see cref=\"Gu.Units.{quantity.Name}\"/></returns>")
                .AppendLine($"        public static {quantity.Name} From{conversion.Name}(double {conversion.ParameterName})")
                .AppendLine($"        {{")
                .AppendLine($"            return new {quantity.Name}({conversion.ToSi});")
                .AppendLine($"        }}")
                .AppendLine();
            }

            return builder;
        }
    }
}
