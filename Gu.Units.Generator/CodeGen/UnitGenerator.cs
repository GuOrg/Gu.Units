// ReSharper disable RedundantStringInterpolation
namespace Gu.Units.Generator.CodeGen
{
    using System.Text;

    public static class UnitGenerator
    {
        public static string Code(Unit unit)
        {
            return new StringBuilder()
                .AppendLine($"namespace Gu.Units")
                .AppendLine($"{{")
                .AppendLine($"    using System;")
                .AppendLine($"    using System.ComponentModel;")
                .AppendLine()
                .AppendLine($"    /// <summary>")
                .AppendLine($"    /// A type for the unit <see cref=\"Gu.Units.{unit.QuantityName}\"/>.")
                .AppendLine($"    /// Contains logic for conversion and formatting.")
                .AppendLine($"    /// </summary>")
                .AppendLine($"    [Serializable]")
                .AppendLine($"    [TypeConverter(typeof({unit.ClassName}TypeConverter))]")
                .AppendLine($"    public struct {unit.ClassName} : IUnit, IUnit<{unit.QuantityName}>, IEquatable<{unit.ClassName}>")
                .AppendLine($"    {{")
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// The {unit.Name} unit")
                .AppendLine($"        /// Contains logic for conversion and formatting.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        public static readonly {unit.ClassName} {unit.Name} = new {unit.ClassName}({unit.ParameterName} => {unit.ParameterName}, {unit.ParameterName} => {unit.ParameterName}, \"{unit.Symbol}\");")
                .AppendLine()
                .AllConversions(unit)
                .AppendLine($"#pragma warning disable SA1307 // Accessible fields must begin with upper-case letter")
                .AppendLine($"#pragma warning disable SA1304 // Non-private readonly fields must begin with upper-case letter")
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Gets the symbol for the <see cref=\"Gu.Units.{unit.ClassName}\"/>.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        internal readonly string symbol;")
                .AppendLine($"#pragma warning restore SA1304 // Non-private readonly fields must begin with upper-case letter")
                .AppendLine($"#pragma warning restore SA1307 // Accessible fields must begin with upper-case letter")
                .AppendLine()
                .AppendLine($"        private readonly Func<double, double> to{unit.Name};")
                .AppendLine($"        private readonly Func<double, double> from{unit.Name};")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Initializes a new instance of the <see cref=\"{unit.ClassName}\"/> struct.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"to{unit.Name}\">The conversion to <see cref=\"{unit.Name}\"/></param>")
                .AppendLine($"        /// <param name=\"from{unit.Name}\">The conversion to <paramref name=\"symbol\"/></param>")
                .AppendLine($"        /// <param name=\"symbol\">The symbol for the <see cref=\"{unit.Name}\"/></param>")
                .AppendLine($"        public {unit.ClassName}(Func<double, double> to{unit.Name}, Func<double, double> from{unit.Name}, string symbol)")
                .AppendLine($"        {{")
                .AppendLine($"            this.to{unit.Name} = to{unit.Name};")
                .AppendLine($"            this.from{unit.Name} = from{unit.Name};")
                .AppendLine($"            this.symbol = symbol;")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Gets the symbol for the <see cref=\"Gu.Units.{unit.ClassName}\"/>.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        public string Symbol => this.symbol;")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Gets the default unit for <see cref=\"Gu.Units.{unit.ClassName}\"/>")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        public {unit.ClassName} SiUnit => {unit.Name};")
                .AppendLine()
                .AppendLine($"        /// <inheritdoc />")
                .AppendLine($"        IUnit IUnit.SiUnit => {unit.Name};")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Multiplies <paramref name=\"left\"/> with <paramref name=\"right\"/>")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"left\">The left value</param>")
                .AppendLine($"        /// <param name=\"right\">The right value</param>")
                .AppendLine($"        /// <returns>The <see cref=\"{unit.QuantityName}\"/> that is the result from the multiplication.</returns>")
                .AppendLine($"        public static {unit.QuantityName} operator *(double left, {unit.ClassName} right)")
                .AppendLine($"        {{")
                .AppendLine($"            return {unit.QuantityName}.From(left, right);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Indicates whether two <see cref=\"Gu.Units.{unit.ClassName}\"/> instances are equal.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <returns>")
                .AppendLine($"        /// true if the quantitys of <paramref name=\"left\"/> and <paramref name=\"right\"/> are equal; otherwise, false.")
                .AppendLine($"        /// </returns>")
                .AppendLine($"        /// <param name=\"left\">The left instance of <see cref=\"Gu.Units.{unit.ClassName}\"/>.</param>")
                .AppendLine($"        /// <param name=\"right\">The right instance of <see cref=\"Gu.Units.{unit.ClassName}\"/>.</param>")
                .AppendLine($"        public static bool operator ==({unit.ClassName} left, {unit.ClassName} right)")
                .AppendLine($"        {{")
                .AppendLine($"            return left.Equals(right);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Indicates whether two <see cref=\"Gu.Units.{unit.ClassName}\"/> instances are not equal.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <returns>")
                .AppendLine($"        /// true if the quantitys of <paramref name=\"left\"/> and <paramref name=\"right\"/> are not equal; otherwise, false.")
                .AppendLine($"        /// </returns>")
                .AppendLine($"        /// <param name=\"left\">The left instance of <see cref=\"Gu.Units.{unit.ClassName}\"/>.</param>")
                .AppendLine($"        /// <param name=\"right\">The right instance of <see cref=\"Gu.Units.{unit.ClassName}\"/>.</param>")
                .AppendLine($"        public static bool operator !=({unit.ClassName} left, {unit.ClassName} right)")
                .AppendLine($"        {{")
                .AppendLine($"            return !left.Equals(right);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Constructs a <see cref=\"{unit.ClassName}\"/> from a string.")
                .AppendLine($"        /// Leading and trailing whitespace characters are allowed.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"text\">The text representation of this unit.</param>")
                .AppendLine($"        /// <returns>An instance of <see cref=\"{unit.ClassName}\"/></returns>")
                .AppendLine($"        public static {unit.ClassName} Parse(string text)")
                .AppendLine($"        {{")
                .AppendLine($"            return UnitParser<{unit.ClassName}>.Parse(text);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Creates an instance of <see cref=\"Gu.Units.{unit.ClassName}\"/> from its string representation")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"text\">The string representation of the <see cref=\"Gu.Units.{unit.ClassName}\"/></param>")
                .AppendLine($"        /// <param name=\"result\">The parsed <see cref=\"{unit.ClassName}\"/></param>")
                .AppendLine($"        /// <returns>True if an instance of <see cref=\"{unit.ClassName}\"/> could be parsed from <paramref name=\"text\"/></returns>")
                .AppendLine($"        public static bool TryParse(string text, out {unit.ClassName} result)")
                .AppendLine($"        {{")
                .AppendLine($"            return UnitParser<{unit.ClassName}>.TryParse(text, out result);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Converts <paramref name=\"value\"/> to {unit.Name}.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"value\">The value in the unit of this instance.</param>")
                .AppendLine($"        /// <returns>The converted value</returns>")
                .AppendLine($"        public double {Gu.Units.Generator.Names.ToSiUnit}(double value)")
                .AppendLine($"        {{")
                .AppendLine($"            return this.to{unit.Name}(value);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Converts a value from {unit.ParameterName}.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"{unit.ParameterName}\">The value in {unit.Name}</param>")
                .AppendLine($"        /// <returns>The converted value</returns>")
                .AppendLine($"        public double {Gu.Units.Generator.Names.FromSiUnit}(double {unit.ParameterName})")
                .AppendLine($"        {{")
                .AppendLine($"            return this.from{unit.Name}({unit.ParameterName});")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Creates a quantity with this unit")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"value\">The scalar value\"</param>")
                .AppendLine($"        /// <returns>new {unit.QuantityName}(<paramref name=\"value\"/>, this)</returns>")
                .AppendLine($"        public {unit.QuantityName} CreateQuantity(double value)")
                .AppendLine($"        {{")
                .AppendLine($"            return new {unit.QuantityName}(value, this);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Gets the scalar value of <paramref name=\"quantity\"/> in {unit.Name}")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"quantity\">The quanity.</param>")
                .AppendLine($"        /// <returns>The SI-unit value.</returns>")
                .AppendLine($"        public double GetScalarValue({unit.QuantityName} quantity)")
                .AppendLine($"        {{")
                .AppendLine($"            return this.FromSiUnit(quantity.{unit.ParameterName});")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <inheritdoc />")
                .AppendLine($"        public override string ToString()")
                .AppendLine($"        {{")
                .AppendLine($"            return this.symbol;")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Converts the unit value of this instance to its equivalent string representation.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"format\">The format to use when convereting</param>")
                .AppendLine($"        /// <returns>The string representation of the value of this instance.</returns>")
                .AppendLine($"        public string ToString(string format)")
                .AppendLine($"        {{")
                .AppendLine($"            {unit.ClassName} unit;")
                .AppendLine($"            var paddedFormat = UnitFormatCache<{unit.ClassName}>.GetOrCreate(format, out unit);")
                .AppendLine($"            if (unit != this)")
                .AppendLine($"            {{")
                .AppendLine($"                return format;")
                .AppendLine($"            }}")
                .AppendLine()
                .AppendLine($"            using (var builder = StringBuilderPool.Borrow())")
                .AppendLine($"            {{")
                .AppendLine($"                builder.Append(paddedFormat.PrePadding);")
                .AppendLine($"                builder.Append(paddedFormat.Format);")
                .AppendLine($"                builder.Append(paddedFormat.PostPadding);")
                .AppendLine($"                return builder.ToString();")
                .AppendLine($"            }}")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Converts the unit value of this instance to its equivalent string representation.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"symbolFormat\">Specifies the symbol format to use when creating the string representation.</param>")
                .AppendLine($"        /// <returns>The string representation of the value of this instance.</returns>")
                .AppendLine($"        public string ToString(SymbolFormat symbolFormat)")
                .AppendLine($"        {{")
                .AppendLine($"            var paddedFormat = UnitFormatCache<{unit.ClassName}>.GetOrCreate(this, symbolFormat);")
                .AppendLine($"            using (var builder = StringBuilderPool.Borrow())")
                .AppendLine($"            {{")
                .AppendLine($"                builder.Append(paddedFormat.PrePadding);")
                .AppendLine($"                builder.Append(paddedFormat.Format);")
                .AppendLine($"                builder.Append(paddedFormat.PostPadding);")
                .AppendLine($"                return builder.ToString();")
                .AppendLine($"            }}")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// Returns a quantity indicating whether this instance is equal to a specified <see cref=\"Gu.Units.{unit.ClassName}\"/> object.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        /// <param name=\"other\">An instance of <see cref=\"Gu.Units.{unit.ClassName}\"/> object to compare with this instance.</param>")
                .AppendLine($"        /// <returns>")
                .AppendLine($"        /// true if <paramref name=\"other\"/> represents the same {unit.ClassName} as this instance; otherwise, false.")
                .AppendLine($"        /// </returns>")
                .AppendLine($"        public bool Equals({unit.ClassName} other)")
                .AppendLine($"        {{")
                .AppendLine($"            return this.symbol == other.symbol;")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <inheritdoc />")
                .AppendLine($"        public override bool Equals(object obj)")
                .AppendLine($"        {{")
                .AppendLine($"            if (ReferenceEquals(null, obj))")
                .AppendLine($"            {{")
                .AppendLine($"                return false;")
                .AppendLine($"            }}")
                .AppendLine()
                .AppendLine($"            return obj is {unit.ClassName} && this.Equals(({unit.ClassName})obj);")
                .AppendLine($"        }}")
                .AppendLine()
                .AppendLine($"        /// <inheritdoc />")
                .AppendLine($"        public override int GetHashCode()")
                .AppendLine($"        {{")
                .AppendLine($"            if (this.symbol == null)")
                .AppendLine($"            {{")
                .AppendLine($"                return 0; // Needed due to default ctor")
                .AppendLine($"            }}")
                .AppendLine()
                .AppendLine($"            return this.symbol.GetHashCode();")
                .AppendLine($"        }}")
                .AppendLine($"    }}")
                .AppendLine($"}}")
                .ToString();
        }

        private static StringBuilder AllConversions(this StringBuilder builder, Unit unit)
        {
            foreach (var conversion in unit.AllConversions)
            {
                builder
                .AppendLine($"        /// <summary>")
                .AppendLine($"        /// The {conversion.Name} unit")
                .AppendLine($"        /// Contains conversion logic to from and formatting.")
                .AppendLine($"        /// </summary>")
                .AppendLine($"        public static readonly {unit.ClassName} {conversion.Name} = new {unit.ClassName}({conversion.ParameterName} => {conversion.ToSi}, {unit.ParameterName} => {conversion.FromSi}, \"{conversion.Symbol}\");")
                .AppendLine();
            }

            return builder;
        }
    }
}
