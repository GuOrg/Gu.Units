#nullable enable
Gu.Units.Acceleration
Gu.Units.Acceleration.Acceleration() -> void
Gu.Units.Acceleration.Acceleration(double value, Gu.Units.AccelerationUnit unit) -> void
Gu.Units.Acceleration.CentimetresPerHourSquared.get -> double
Gu.Units.Acceleration.CentimetresPerSecondSquared.get -> double
Gu.Units.Acceleration.CompareTo(Gu.Units.Acceleration quantity) -> int
Gu.Units.Acceleration.Equals(Gu.Units.Acceleration other) -> bool
Gu.Units.Acceleration.Equals(Gu.Units.Acceleration other, Gu.Units.Acceleration tolerance) -> bool
Gu.Units.Acceleration.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Acceleration.GetValue(Gu.Units.AccelerationUnit unit) -> double
Gu.Units.Acceleration.MetresPerHourSquared.get -> double
Gu.Units.Acceleration.MetresPerMinuteSquared.get -> double
Gu.Units.Acceleration.MetresPerSecondSquared.get -> double
Gu.Units.Acceleration.MillimetresPerHourSquared.get -> double
Gu.Units.Acceleration.MillimetresPerMinuteSquared.get -> double
Gu.Units.Acceleration.MillimetresPerSecondSquared.get -> double
Gu.Units.Acceleration.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Acceleration.SiUnit.get -> Gu.Units.AccelerationUnit
Gu.Units.Acceleration.SiValue.get -> double
Gu.Units.Acceleration.ToString(Gu.Units.AccelerationUnit unit) -> string!
Gu.Units.Acceleration.ToString(Gu.Units.AccelerationUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Acceleration.ToString(Gu.Units.AccelerationUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Acceleration.ToString(Gu.Units.AccelerationUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Acceleration.ToString(string! format) -> string!
Gu.Units.Acceleration.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Acceleration.ToString(string! valueFormat, Gu.Units.AccelerationUnit unit) -> string!
Gu.Units.Acceleration.ToString(string! valueFormat, Gu.Units.AccelerationUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Acceleration.ToString(string! valueFormat, Gu.Units.AccelerationUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Acceleration.ToString(string! valueFormat, Gu.Units.AccelerationUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Acceleration.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Acceleration.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Acceleration.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Acceleration.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.AccelerationTypeConverter
Gu.Units.AccelerationTypeConverter.AccelerationTypeConverter() -> void
Gu.Units.AccelerationUnit
Gu.Units.AccelerationUnit.AccelerationUnit() -> void
Gu.Units.AccelerationUnit.AccelerationUnit(System.Func<double, double>! toMetresPerSecondSquared, System.Func<double, double>! fromMetresPerSecondSquared, string! symbol) -> void
Gu.Units.AccelerationUnit.CreateQuantity(double value) -> Gu.Units.Acceleration
Gu.Units.AccelerationUnit.Equals(Gu.Units.AccelerationUnit other) -> bool
Gu.Units.AccelerationUnit.FromSiUnit(double metresPerSecondSquared) -> double
Gu.Units.AccelerationUnit.GetScalarValue(Gu.Units.Acceleration quantity) -> double
Gu.Units.AccelerationUnit.SiUnit.get -> Gu.Units.AccelerationUnit
Gu.Units.AccelerationUnit.Symbol.get -> string!
Gu.Units.AccelerationUnit.ToSiUnit(double value) -> double
Gu.Units.AccelerationUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.AccelerationUnit.ToString(string! format) -> string!
Gu.Units.AccelerationUnitTypeConverter
Gu.Units.AccelerationUnitTypeConverter.AccelerationUnitTypeConverter() -> void
Gu.Units.AmountOfSubstance
Gu.Units.AmountOfSubstance.AmountOfSubstance() -> void
Gu.Units.AmountOfSubstance.AmountOfSubstance(double value, Gu.Units.AmountOfSubstanceUnit unit) -> void
Gu.Units.AmountOfSubstance.CompareTo(Gu.Units.AmountOfSubstance quantity) -> int
Gu.Units.AmountOfSubstance.Equals(Gu.Units.AmountOfSubstance other) -> bool
Gu.Units.AmountOfSubstance.Equals(Gu.Units.AmountOfSubstance other, Gu.Units.AmountOfSubstance tolerance) -> bool
Gu.Units.AmountOfSubstance.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.AmountOfSubstance.GetValue(Gu.Units.AmountOfSubstanceUnit unit) -> double
Gu.Units.AmountOfSubstance.Moles.get -> double
Gu.Units.AmountOfSubstance.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.AmountOfSubstance.SiUnit.get -> Gu.Units.AmountOfSubstanceUnit
Gu.Units.AmountOfSubstance.SiValue.get -> double
Gu.Units.AmountOfSubstance.ToString(Gu.Units.AmountOfSubstanceUnit unit) -> string!
Gu.Units.AmountOfSubstance.ToString(Gu.Units.AmountOfSubstanceUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.AmountOfSubstance.ToString(Gu.Units.AmountOfSubstanceUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AmountOfSubstance.ToString(Gu.Units.AmountOfSubstanceUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AmountOfSubstance.ToString(string! format) -> string!
Gu.Units.AmountOfSubstance.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.AmountOfSubstance.ToString(string! valueFormat, Gu.Units.AmountOfSubstanceUnit unit) -> string!
Gu.Units.AmountOfSubstance.ToString(string! valueFormat, Gu.Units.AmountOfSubstanceUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.AmountOfSubstance.ToString(string! valueFormat, Gu.Units.AmountOfSubstanceUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AmountOfSubstance.ToString(string! valueFormat, Gu.Units.AmountOfSubstanceUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AmountOfSubstance.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.AmountOfSubstance.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AmountOfSubstance.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.AmountOfSubstance.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.AmountOfSubstanceTypeConverter
Gu.Units.AmountOfSubstanceTypeConverter.AmountOfSubstanceTypeConverter() -> void
Gu.Units.AmountOfSubstanceUnit
Gu.Units.AmountOfSubstanceUnit.AmountOfSubstanceUnit() -> void
Gu.Units.AmountOfSubstanceUnit.AmountOfSubstanceUnit(System.Func<double, double>! toMoles, System.Func<double, double>! fromMoles, string! symbol) -> void
Gu.Units.AmountOfSubstanceUnit.CreateQuantity(double value) -> Gu.Units.AmountOfSubstance
Gu.Units.AmountOfSubstanceUnit.Equals(Gu.Units.AmountOfSubstanceUnit other) -> bool
Gu.Units.AmountOfSubstanceUnit.FromSiUnit(double moles) -> double
Gu.Units.AmountOfSubstanceUnit.GetScalarValue(Gu.Units.AmountOfSubstance quantity) -> double
Gu.Units.AmountOfSubstanceUnit.SiUnit.get -> Gu.Units.AmountOfSubstanceUnit
Gu.Units.AmountOfSubstanceUnit.Symbol.get -> string!
Gu.Units.AmountOfSubstanceUnit.ToSiUnit(double value) -> double
Gu.Units.AmountOfSubstanceUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.AmountOfSubstanceUnit.ToString(string! format) -> string!
Gu.Units.AmountOfSubstanceUnitTypeConverter
Gu.Units.AmountOfSubstanceUnitTypeConverter.AmountOfSubstanceUnitTypeConverter() -> void
Gu.Units.Angle
Gu.Units.Angle.Angle() -> void
Gu.Units.Angle.Angle(double value, Gu.Units.AngleUnit unit) -> void
Gu.Units.Angle.CompareTo(Gu.Units.Angle quantity) -> int
Gu.Units.Angle.Degrees.get -> double
Gu.Units.Angle.Equals(Gu.Units.Angle other) -> bool
Gu.Units.Angle.Equals(Gu.Units.Angle other, Gu.Units.Angle tolerance) -> bool
Gu.Units.Angle.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Angle.GetValue(Gu.Units.AngleUnit unit) -> double
Gu.Units.Angle.Radians.get -> double
Gu.Units.Angle.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Angle.SiUnit.get -> Gu.Units.AngleUnit
Gu.Units.Angle.SiValue.get -> double
Gu.Units.Angle.ToString(Gu.Units.AngleUnit unit) -> string!
Gu.Units.Angle.ToString(Gu.Units.AngleUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Angle.ToString(Gu.Units.AngleUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Angle.ToString(Gu.Units.AngleUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Angle.ToString(string! format) -> string!
Gu.Units.Angle.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Angle.ToString(string! valueFormat, Gu.Units.AngleUnit unit) -> string!
Gu.Units.Angle.ToString(string! valueFormat, Gu.Units.AngleUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Angle.ToString(string! valueFormat, Gu.Units.AngleUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Angle.ToString(string! valueFormat, Gu.Units.AngleUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Angle.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Angle.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Angle.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Angle.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.AnglePerUnitless
Gu.Units.AnglePerUnitless.AnglePerUnitless() -> void
Gu.Units.AnglePerUnitless.AnglePerUnitless(double value, Gu.Units.AnglePerUnitlessUnit unit) -> void
Gu.Units.AnglePerUnitless.CompareTo(Gu.Units.AnglePerUnitless quantity) -> int
Gu.Units.AnglePerUnitless.DegreesPerPercent.get -> double
Gu.Units.AnglePerUnitless.Equals(Gu.Units.AnglePerUnitless other) -> bool
Gu.Units.AnglePerUnitless.Equals(Gu.Units.AnglePerUnitless other, Gu.Units.AnglePerUnitless tolerance) -> bool
Gu.Units.AnglePerUnitless.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.AnglePerUnitless.GetValue(Gu.Units.AnglePerUnitlessUnit unit) -> double
Gu.Units.AnglePerUnitless.RadiansPerPercent.get -> double
Gu.Units.AnglePerUnitless.RadiansPerUnitless.get -> double
Gu.Units.AnglePerUnitless.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.AnglePerUnitless.SiUnit.get -> Gu.Units.AnglePerUnitlessUnit
Gu.Units.AnglePerUnitless.SiValue.get -> double
Gu.Units.AnglePerUnitless.ToString(Gu.Units.AnglePerUnitlessUnit unit) -> string!
Gu.Units.AnglePerUnitless.ToString(Gu.Units.AnglePerUnitlessUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.AnglePerUnitless.ToString(Gu.Units.AnglePerUnitlessUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AnglePerUnitless.ToString(Gu.Units.AnglePerUnitlessUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AnglePerUnitless.ToString(string! format) -> string!
Gu.Units.AnglePerUnitless.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.AnglePerUnitless.ToString(string! valueFormat, Gu.Units.AnglePerUnitlessUnit unit) -> string!
Gu.Units.AnglePerUnitless.ToString(string! valueFormat, Gu.Units.AnglePerUnitlessUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.AnglePerUnitless.ToString(string! valueFormat, Gu.Units.AnglePerUnitlessUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AnglePerUnitless.ToString(string! valueFormat, Gu.Units.AnglePerUnitlessUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AnglePerUnitless.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.AnglePerUnitless.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AnglePerUnitless.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.AnglePerUnitless.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.AnglePerUnitlessTypeConverter
Gu.Units.AnglePerUnitlessTypeConverter.AnglePerUnitlessTypeConverter() -> void
Gu.Units.AnglePerUnitlessUnit
Gu.Units.AnglePerUnitlessUnit.AnglePerUnitlessUnit() -> void
Gu.Units.AnglePerUnitlessUnit.AnglePerUnitlessUnit(System.Func<double, double>! toRadiansPerUnitless, System.Func<double, double>! fromRadiansPerUnitless, string! symbol) -> void
Gu.Units.AnglePerUnitlessUnit.CreateQuantity(double value) -> Gu.Units.AnglePerUnitless
Gu.Units.AnglePerUnitlessUnit.Equals(Gu.Units.AnglePerUnitlessUnit other) -> bool
Gu.Units.AnglePerUnitlessUnit.FromSiUnit(double radiansPerUnitless) -> double
Gu.Units.AnglePerUnitlessUnit.GetScalarValue(Gu.Units.AnglePerUnitless quantity) -> double
Gu.Units.AnglePerUnitlessUnit.SiUnit.get -> Gu.Units.AnglePerUnitlessUnit
Gu.Units.AnglePerUnitlessUnit.Symbol.get -> string!
Gu.Units.AnglePerUnitlessUnit.ToSiUnit(double value) -> double
Gu.Units.AnglePerUnitlessUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.AnglePerUnitlessUnit.ToString(string! format) -> string!
Gu.Units.AnglePerUnitlessUnitTypeConverter
Gu.Units.AnglePerUnitlessUnitTypeConverter.AnglePerUnitlessUnitTypeConverter() -> void
Gu.Units.AngleTypeConverter
Gu.Units.AngleTypeConverter.AngleTypeConverter() -> void
Gu.Units.AngleUnit
Gu.Units.AngleUnit.AngleUnit() -> void
Gu.Units.AngleUnit.AngleUnit(System.Func<double, double>! toRadians, System.Func<double, double>! fromRadians, string! symbol) -> void
Gu.Units.AngleUnit.CreateQuantity(double value) -> Gu.Units.Angle
Gu.Units.AngleUnit.Equals(Gu.Units.AngleUnit other) -> bool
Gu.Units.AngleUnit.FromSiUnit(double radians) -> double
Gu.Units.AngleUnit.GetScalarValue(Gu.Units.Angle quantity) -> double
Gu.Units.AngleUnit.SiUnit.get -> Gu.Units.AngleUnit
Gu.Units.AngleUnit.Symbol.get -> string!
Gu.Units.AngleUnit.ToSiUnit(double value) -> double
Gu.Units.AngleUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.AngleUnit.ToString(string! format) -> string!
Gu.Units.AngleUnitTypeConverter
Gu.Units.AngleUnitTypeConverter.AngleUnitTypeConverter() -> void
Gu.Units.AngularAcceleration
Gu.Units.AngularAcceleration.AngularAcceleration() -> void
Gu.Units.AngularAcceleration.AngularAcceleration(double value, Gu.Units.AngularAccelerationUnit unit) -> void
Gu.Units.AngularAcceleration.CompareTo(Gu.Units.AngularAcceleration quantity) -> int
Gu.Units.AngularAcceleration.DegreesPerHourSquared.get -> double
Gu.Units.AngularAcceleration.DegreesPerMinuteSquared.get -> double
Gu.Units.AngularAcceleration.DegreesPerSecondSquared.get -> double
Gu.Units.AngularAcceleration.Equals(Gu.Units.AngularAcceleration other) -> bool
Gu.Units.AngularAcceleration.Equals(Gu.Units.AngularAcceleration other, Gu.Units.AngularAcceleration tolerance) -> bool
Gu.Units.AngularAcceleration.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.AngularAcceleration.GetValue(Gu.Units.AngularAccelerationUnit unit) -> double
Gu.Units.AngularAcceleration.RadiansPerHourSquared.get -> double
Gu.Units.AngularAcceleration.RadiansPerMinuteSquared.get -> double
Gu.Units.AngularAcceleration.RadiansPerSecondSquared.get -> double
Gu.Units.AngularAcceleration.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.AngularAcceleration.SiUnit.get -> Gu.Units.AngularAccelerationUnit
Gu.Units.AngularAcceleration.SiValue.get -> double
Gu.Units.AngularAcceleration.ToString(Gu.Units.AngularAccelerationUnit unit) -> string!
Gu.Units.AngularAcceleration.ToString(Gu.Units.AngularAccelerationUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.AngularAcceleration.ToString(Gu.Units.AngularAccelerationUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AngularAcceleration.ToString(Gu.Units.AngularAccelerationUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AngularAcceleration.ToString(string! format) -> string!
Gu.Units.AngularAcceleration.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.AngularAcceleration.ToString(string! valueFormat, Gu.Units.AngularAccelerationUnit unit) -> string!
Gu.Units.AngularAcceleration.ToString(string! valueFormat, Gu.Units.AngularAccelerationUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.AngularAcceleration.ToString(string! valueFormat, Gu.Units.AngularAccelerationUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AngularAcceleration.ToString(string! valueFormat, Gu.Units.AngularAccelerationUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AngularAcceleration.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.AngularAcceleration.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AngularAcceleration.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.AngularAcceleration.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.AngularAccelerationTypeConverter
Gu.Units.AngularAccelerationTypeConverter.AngularAccelerationTypeConverter() -> void
Gu.Units.AngularAccelerationUnit
Gu.Units.AngularAccelerationUnit.AngularAccelerationUnit() -> void
Gu.Units.AngularAccelerationUnit.AngularAccelerationUnit(System.Func<double, double>! toRadiansPerSecondSquared, System.Func<double, double>! fromRadiansPerSecondSquared, string! symbol) -> void
Gu.Units.AngularAccelerationUnit.CreateQuantity(double value) -> Gu.Units.AngularAcceleration
Gu.Units.AngularAccelerationUnit.Equals(Gu.Units.AngularAccelerationUnit other) -> bool
Gu.Units.AngularAccelerationUnit.FromSiUnit(double radiansPerSecondSquared) -> double
Gu.Units.AngularAccelerationUnit.GetScalarValue(Gu.Units.AngularAcceleration quantity) -> double
Gu.Units.AngularAccelerationUnit.SiUnit.get -> Gu.Units.AngularAccelerationUnit
Gu.Units.AngularAccelerationUnit.Symbol.get -> string!
Gu.Units.AngularAccelerationUnit.ToSiUnit(double value) -> double
Gu.Units.AngularAccelerationUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.AngularAccelerationUnit.ToString(string! format) -> string!
Gu.Units.AngularAccelerationUnitTypeConverter
Gu.Units.AngularAccelerationUnitTypeConverter.AngularAccelerationUnitTypeConverter() -> void
Gu.Units.AngularJerk
Gu.Units.AngularJerk.AngularJerk() -> void
Gu.Units.AngularJerk.AngularJerk(double value, Gu.Units.AngularJerkUnit unit) -> void
Gu.Units.AngularJerk.CompareTo(Gu.Units.AngularJerk quantity) -> int
Gu.Units.AngularJerk.DegreesPerHourCubed.get -> double
Gu.Units.AngularJerk.DegreesPerMinuteCubed.get -> double
Gu.Units.AngularJerk.DegreesPerSecondCubed.get -> double
Gu.Units.AngularJerk.Equals(Gu.Units.AngularJerk other) -> bool
Gu.Units.AngularJerk.Equals(Gu.Units.AngularJerk other, Gu.Units.AngularJerk tolerance) -> bool
Gu.Units.AngularJerk.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.AngularJerk.GetValue(Gu.Units.AngularJerkUnit unit) -> double
Gu.Units.AngularJerk.RadiansPerHourCubed.get -> double
Gu.Units.AngularJerk.RadiansPerMinuteCubed.get -> double
Gu.Units.AngularJerk.RadiansPerSecondCubed.get -> double
Gu.Units.AngularJerk.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.AngularJerk.SiUnit.get -> Gu.Units.AngularJerkUnit
Gu.Units.AngularJerk.SiValue.get -> double
Gu.Units.AngularJerk.ToString(Gu.Units.AngularJerkUnit unit) -> string!
Gu.Units.AngularJerk.ToString(Gu.Units.AngularJerkUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.AngularJerk.ToString(Gu.Units.AngularJerkUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AngularJerk.ToString(Gu.Units.AngularJerkUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AngularJerk.ToString(string! format) -> string!
Gu.Units.AngularJerk.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.AngularJerk.ToString(string! valueFormat, Gu.Units.AngularJerkUnit unit) -> string!
Gu.Units.AngularJerk.ToString(string! valueFormat, Gu.Units.AngularJerkUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.AngularJerk.ToString(string! valueFormat, Gu.Units.AngularJerkUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AngularJerk.ToString(string! valueFormat, Gu.Units.AngularJerkUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AngularJerk.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.AngularJerk.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AngularJerk.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.AngularJerk.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.AngularJerkTypeConverter
Gu.Units.AngularJerkTypeConverter.AngularJerkTypeConverter() -> void
Gu.Units.AngularJerkUnit
Gu.Units.AngularJerkUnit.AngularJerkUnit() -> void
Gu.Units.AngularJerkUnit.AngularJerkUnit(System.Func<double, double>! toRadiansPerSecondCubed, System.Func<double, double>! fromRadiansPerSecondCubed, string! symbol) -> void
Gu.Units.AngularJerkUnit.CreateQuantity(double value) -> Gu.Units.AngularJerk
Gu.Units.AngularJerkUnit.Equals(Gu.Units.AngularJerkUnit other) -> bool
Gu.Units.AngularJerkUnit.FromSiUnit(double radiansPerSecondCubed) -> double
Gu.Units.AngularJerkUnit.GetScalarValue(Gu.Units.AngularJerk quantity) -> double
Gu.Units.AngularJerkUnit.SiUnit.get -> Gu.Units.AngularJerkUnit
Gu.Units.AngularJerkUnit.Symbol.get -> string!
Gu.Units.AngularJerkUnit.ToSiUnit(double value) -> double
Gu.Units.AngularJerkUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.AngularJerkUnit.ToString(string! format) -> string!
Gu.Units.AngularJerkUnitTypeConverter
Gu.Units.AngularJerkUnitTypeConverter.AngularJerkUnitTypeConverter() -> void
Gu.Units.AngularSpeed
Gu.Units.AngularSpeed.AngularSpeed() -> void
Gu.Units.AngularSpeed.AngularSpeed(double value, Gu.Units.AngularSpeedUnit unit) -> void
Gu.Units.AngularSpeed.CompareTo(Gu.Units.AngularSpeed quantity) -> int
Gu.Units.AngularSpeed.DegreesPerHour.get -> double
Gu.Units.AngularSpeed.DegreesPerMinute.get -> double
Gu.Units.AngularSpeed.DegreesPerSecond.get -> double
Gu.Units.AngularSpeed.Equals(Gu.Units.AngularSpeed other) -> bool
Gu.Units.AngularSpeed.Equals(Gu.Units.AngularSpeed other, Gu.Units.AngularSpeed tolerance) -> bool
Gu.Units.AngularSpeed.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.AngularSpeed.GetValue(Gu.Units.AngularSpeedUnit unit) -> double
Gu.Units.AngularSpeed.RadiansPerHour.get -> double
Gu.Units.AngularSpeed.RadiansPerMinute.get -> double
Gu.Units.AngularSpeed.RadiansPerSecond.get -> double
Gu.Units.AngularSpeed.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.AngularSpeed.RevolutionsPerMinute.get -> double
Gu.Units.AngularSpeed.SiUnit.get -> Gu.Units.AngularSpeedUnit
Gu.Units.AngularSpeed.SiValue.get -> double
Gu.Units.AngularSpeed.ToString(Gu.Units.AngularSpeedUnit unit) -> string!
Gu.Units.AngularSpeed.ToString(Gu.Units.AngularSpeedUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.AngularSpeed.ToString(Gu.Units.AngularSpeedUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AngularSpeed.ToString(Gu.Units.AngularSpeedUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AngularSpeed.ToString(string! format) -> string!
Gu.Units.AngularSpeed.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.AngularSpeed.ToString(string! valueFormat, Gu.Units.AngularSpeedUnit unit) -> string!
Gu.Units.AngularSpeed.ToString(string! valueFormat, Gu.Units.AngularSpeedUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.AngularSpeed.ToString(string! valueFormat, Gu.Units.AngularSpeedUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AngularSpeed.ToString(string! valueFormat, Gu.Units.AngularSpeedUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AngularSpeed.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.AngularSpeed.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AngularSpeed.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.AngularSpeed.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.AngularSpeedTypeConverter
Gu.Units.AngularSpeedTypeConverter.AngularSpeedTypeConverter() -> void
Gu.Units.AngularSpeedUnit
Gu.Units.AngularSpeedUnit.AngularSpeedUnit() -> void
Gu.Units.AngularSpeedUnit.AngularSpeedUnit(System.Func<double, double>! toRadiansPerSecond, System.Func<double, double>! fromRadiansPerSecond, string! symbol) -> void
Gu.Units.AngularSpeedUnit.CreateQuantity(double value) -> Gu.Units.AngularSpeed
Gu.Units.AngularSpeedUnit.Equals(Gu.Units.AngularSpeedUnit other) -> bool
Gu.Units.AngularSpeedUnit.FromSiUnit(double radiansPerSecond) -> double
Gu.Units.AngularSpeedUnit.GetScalarValue(Gu.Units.AngularSpeed quantity) -> double
Gu.Units.AngularSpeedUnit.SiUnit.get -> Gu.Units.AngularSpeedUnit
Gu.Units.AngularSpeedUnit.Symbol.get -> string!
Gu.Units.AngularSpeedUnit.ToSiUnit(double value) -> double
Gu.Units.AngularSpeedUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.AngularSpeedUnit.ToString(string! format) -> string!
Gu.Units.AngularSpeedUnitTypeConverter
Gu.Units.AngularSpeedUnitTypeConverter.AngularSpeedUnitTypeConverter() -> void
Gu.Units.Area
Gu.Units.Area.Area() -> void
Gu.Units.Area.Area(double value, Gu.Units.AreaUnit unit) -> void
Gu.Units.Area.CompareTo(Gu.Units.Area quantity) -> int
Gu.Units.Area.Equals(Gu.Units.Area other) -> bool
Gu.Units.Area.Equals(Gu.Units.Area other, Gu.Units.Area tolerance) -> bool
Gu.Units.Area.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Area.GetValue(Gu.Units.AreaUnit unit) -> double
Gu.Units.Area.Hectares.get -> double
Gu.Units.Area.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Area.SiUnit.get -> Gu.Units.AreaUnit
Gu.Units.Area.SiValue.get -> double
Gu.Units.Area.SquareCentimetres.get -> double
Gu.Units.Area.SquareDecimetres.get -> double
Gu.Units.Area.SquareFeet.get -> double
Gu.Units.Area.SquareInches.get -> double
Gu.Units.Area.SquareKilometres.get -> double
Gu.Units.Area.SquareMetres.get -> double
Gu.Units.Area.SquareMile.get -> double
Gu.Units.Area.SquareMillimetres.get -> double
Gu.Units.Area.SquareYards.get -> double
Gu.Units.Area.ToString(Gu.Units.AreaUnit unit) -> string!
Gu.Units.Area.ToString(Gu.Units.AreaUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Area.ToString(Gu.Units.AreaUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Area.ToString(Gu.Units.AreaUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Area.ToString(string! format) -> string!
Gu.Units.Area.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Area.ToString(string! valueFormat, Gu.Units.AreaUnit unit) -> string!
Gu.Units.Area.ToString(string! valueFormat, Gu.Units.AreaUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Area.ToString(string! valueFormat, Gu.Units.AreaUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Area.ToString(string! valueFormat, Gu.Units.AreaUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Area.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Area.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Area.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Area.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.AreaDensity
Gu.Units.AreaDensity.AreaDensity() -> void
Gu.Units.AreaDensity.AreaDensity(double value, Gu.Units.AreaDensityUnit unit) -> void
Gu.Units.AreaDensity.CompareTo(Gu.Units.AreaDensity quantity) -> int
Gu.Units.AreaDensity.Equals(Gu.Units.AreaDensity other) -> bool
Gu.Units.AreaDensity.Equals(Gu.Units.AreaDensity other, Gu.Units.AreaDensity tolerance) -> bool
Gu.Units.AreaDensity.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.AreaDensity.GetValue(Gu.Units.AreaDensityUnit unit) -> double
Gu.Units.AreaDensity.KilogramsPerSquareMetre.get -> double
Gu.Units.AreaDensity.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.AreaDensity.SiUnit.get -> Gu.Units.AreaDensityUnit
Gu.Units.AreaDensity.SiValue.get -> double
Gu.Units.AreaDensity.ToString(Gu.Units.AreaDensityUnit unit) -> string!
Gu.Units.AreaDensity.ToString(Gu.Units.AreaDensityUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.AreaDensity.ToString(Gu.Units.AreaDensityUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AreaDensity.ToString(Gu.Units.AreaDensityUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AreaDensity.ToString(string! format) -> string!
Gu.Units.AreaDensity.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.AreaDensity.ToString(string! valueFormat, Gu.Units.AreaDensityUnit unit) -> string!
Gu.Units.AreaDensity.ToString(string! valueFormat, Gu.Units.AreaDensityUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.AreaDensity.ToString(string! valueFormat, Gu.Units.AreaDensityUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AreaDensity.ToString(string! valueFormat, Gu.Units.AreaDensityUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AreaDensity.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.AreaDensity.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.AreaDensity.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.AreaDensity.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.AreaDensityTypeConverter
Gu.Units.AreaDensityTypeConverter.AreaDensityTypeConverter() -> void
Gu.Units.AreaDensityUnit
Gu.Units.AreaDensityUnit.AreaDensityUnit() -> void
Gu.Units.AreaDensityUnit.AreaDensityUnit(System.Func<double, double>! toKilogramsPerSquareMetre, System.Func<double, double>! fromKilogramsPerSquareMetre, string! symbol) -> void
Gu.Units.AreaDensityUnit.CreateQuantity(double value) -> Gu.Units.AreaDensity
Gu.Units.AreaDensityUnit.Equals(Gu.Units.AreaDensityUnit other) -> bool
Gu.Units.AreaDensityUnit.FromSiUnit(double kilogramsPerSquareMetre) -> double
Gu.Units.AreaDensityUnit.GetScalarValue(Gu.Units.AreaDensity quantity) -> double
Gu.Units.AreaDensityUnit.SiUnit.get -> Gu.Units.AreaDensityUnit
Gu.Units.AreaDensityUnit.Symbol.get -> string!
Gu.Units.AreaDensityUnit.ToSiUnit(double value) -> double
Gu.Units.AreaDensityUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.AreaDensityUnit.ToString(string! format) -> string!
Gu.Units.AreaDensityUnitTypeConverter
Gu.Units.AreaDensityUnitTypeConverter.AreaDensityUnitTypeConverter() -> void
Gu.Units.AreaTypeConverter
Gu.Units.AreaTypeConverter.AreaTypeConverter() -> void
Gu.Units.AreaUnit
Gu.Units.AreaUnit.AreaUnit() -> void
Gu.Units.AreaUnit.AreaUnit(System.Func<double, double>! toSquareMetres, System.Func<double, double>! fromSquareMetres, string! symbol) -> void
Gu.Units.AreaUnit.CreateQuantity(double value) -> Gu.Units.Area
Gu.Units.AreaUnit.Equals(Gu.Units.AreaUnit other) -> bool
Gu.Units.AreaUnit.FromSiUnit(double squareMetres) -> double
Gu.Units.AreaUnit.GetScalarValue(Gu.Units.Area quantity) -> double
Gu.Units.AreaUnit.SiUnit.get -> Gu.Units.AreaUnit
Gu.Units.AreaUnit.Symbol.get -> string!
Gu.Units.AreaUnit.ToSiUnit(double value) -> double
Gu.Units.AreaUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.AreaUnit.ToString(string! format) -> string!
Gu.Units.AreaUnitTypeConverter
Gu.Units.AreaUnitTypeConverter.AreaUnitTypeConverter() -> void
Gu.Units.Capacitance
Gu.Units.Capacitance.Capacitance() -> void
Gu.Units.Capacitance.Capacitance(double value, Gu.Units.CapacitanceUnit unit) -> void
Gu.Units.Capacitance.CompareTo(Gu.Units.Capacitance quantity) -> int
Gu.Units.Capacitance.Equals(Gu.Units.Capacitance other) -> bool
Gu.Units.Capacitance.Equals(Gu.Units.Capacitance other, Gu.Units.Capacitance tolerance) -> bool
Gu.Units.Capacitance.Farads.get -> double
Gu.Units.Capacitance.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Capacitance.GetValue(Gu.Units.CapacitanceUnit unit) -> double
Gu.Units.Capacitance.Gigafarads.get -> double
Gu.Units.Capacitance.Kilofarads.get -> double
Gu.Units.Capacitance.Megafarads.get -> double
Gu.Units.Capacitance.Microfarads.get -> double
Gu.Units.Capacitance.Millifarads.get -> double
Gu.Units.Capacitance.Nanofarads.get -> double
Gu.Units.Capacitance.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Capacitance.SiUnit.get -> Gu.Units.CapacitanceUnit
Gu.Units.Capacitance.SiValue.get -> double
Gu.Units.Capacitance.ToString(Gu.Units.CapacitanceUnit unit) -> string!
Gu.Units.Capacitance.ToString(Gu.Units.CapacitanceUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Capacitance.ToString(Gu.Units.CapacitanceUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Capacitance.ToString(Gu.Units.CapacitanceUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Capacitance.ToString(string! format) -> string!
Gu.Units.Capacitance.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Capacitance.ToString(string! valueFormat, Gu.Units.CapacitanceUnit unit) -> string!
Gu.Units.Capacitance.ToString(string! valueFormat, Gu.Units.CapacitanceUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Capacitance.ToString(string! valueFormat, Gu.Units.CapacitanceUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Capacitance.ToString(string! valueFormat, Gu.Units.CapacitanceUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Capacitance.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Capacitance.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Capacitance.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Capacitance.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.CapacitanceTypeConverter
Gu.Units.CapacitanceTypeConverter.CapacitanceTypeConverter() -> void
Gu.Units.CapacitanceUnit
Gu.Units.CapacitanceUnit.CapacitanceUnit() -> void
Gu.Units.CapacitanceUnit.CapacitanceUnit(System.Func<double, double>! toFarads, System.Func<double, double>! fromFarads, string! symbol) -> void
Gu.Units.CapacitanceUnit.CreateQuantity(double value) -> Gu.Units.Capacitance
Gu.Units.CapacitanceUnit.Equals(Gu.Units.CapacitanceUnit other) -> bool
Gu.Units.CapacitanceUnit.FromSiUnit(double farads) -> double
Gu.Units.CapacitanceUnit.GetScalarValue(Gu.Units.Capacitance quantity) -> double
Gu.Units.CapacitanceUnit.SiUnit.get -> Gu.Units.CapacitanceUnit
Gu.Units.CapacitanceUnit.Symbol.get -> string!
Gu.Units.CapacitanceUnit.ToSiUnit(double value) -> double
Gu.Units.CapacitanceUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.CapacitanceUnit.ToString(string! format) -> string!
Gu.Units.CapacitanceUnitTypeConverter
Gu.Units.CapacitanceUnitTypeConverter.CapacitanceUnitTypeConverter() -> void
Gu.Units.CatalyticActivity
Gu.Units.CatalyticActivity.CatalyticActivity() -> void
Gu.Units.CatalyticActivity.CatalyticActivity(double value, Gu.Units.CatalyticActivityUnit unit) -> void
Gu.Units.CatalyticActivity.CompareTo(Gu.Units.CatalyticActivity quantity) -> int
Gu.Units.CatalyticActivity.Equals(Gu.Units.CatalyticActivity other) -> bool
Gu.Units.CatalyticActivity.Equals(Gu.Units.CatalyticActivity other, Gu.Units.CatalyticActivity tolerance) -> bool
Gu.Units.CatalyticActivity.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.CatalyticActivity.GetValue(Gu.Units.CatalyticActivityUnit unit) -> double
Gu.Units.CatalyticActivity.Katals.get -> double
Gu.Units.CatalyticActivity.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.CatalyticActivity.SiUnit.get -> Gu.Units.CatalyticActivityUnit
Gu.Units.CatalyticActivity.SiValue.get -> double
Gu.Units.CatalyticActivity.ToString(Gu.Units.CatalyticActivityUnit unit) -> string!
Gu.Units.CatalyticActivity.ToString(Gu.Units.CatalyticActivityUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.CatalyticActivity.ToString(Gu.Units.CatalyticActivityUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.CatalyticActivity.ToString(Gu.Units.CatalyticActivityUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.CatalyticActivity.ToString(string! format) -> string!
Gu.Units.CatalyticActivity.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.CatalyticActivity.ToString(string! valueFormat, Gu.Units.CatalyticActivityUnit unit) -> string!
Gu.Units.CatalyticActivity.ToString(string! valueFormat, Gu.Units.CatalyticActivityUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.CatalyticActivity.ToString(string! valueFormat, Gu.Units.CatalyticActivityUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.CatalyticActivity.ToString(string! valueFormat, Gu.Units.CatalyticActivityUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.CatalyticActivity.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.CatalyticActivity.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.CatalyticActivity.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.CatalyticActivity.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.CatalyticActivityTypeConverter
Gu.Units.CatalyticActivityTypeConverter.CatalyticActivityTypeConverter() -> void
Gu.Units.CatalyticActivityUnit
Gu.Units.CatalyticActivityUnit.CatalyticActivityUnit() -> void
Gu.Units.CatalyticActivityUnit.CatalyticActivityUnit(System.Func<double, double>! toKatals, System.Func<double, double>! fromKatals, string! symbol) -> void
Gu.Units.CatalyticActivityUnit.CreateQuantity(double value) -> Gu.Units.CatalyticActivity
Gu.Units.CatalyticActivityUnit.Equals(Gu.Units.CatalyticActivityUnit other) -> bool
Gu.Units.CatalyticActivityUnit.FromSiUnit(double katals) -> double
Gu.Units.CatalyticActivityUnit.GetScalarValue(Gu.Units.CatalyticActivity quantity) -> double
Gu.Units.CatalyticActivityUnit.SiUnit.get -> Gu.Units.CatalyticActivityUnit
Gu.Units.CatalyticActivityUnit.Symbol.get -> string!
Gu.Units.CatalyticActivityUnit.ToSiUnit(double value) -> double
Gu.Units.CatalyticActivityUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.CatalyticActivityUnit.ToString(string! format) -> string!
Gu.Units.CatalyticActivityUnitTypeConverter
Gu.Units.CatalyticActivityUnitTypeConverter.CatalyticActivityUnitTypeConverter() -> void
Gu.Units.Conductivity
Gu.Units.Conductivity.CompareTo(Gu.Units.Conductivity quantity) -> int
Gu.Units.Conductivity.Conductivity() -> void
Gu.Units.Conductivity.Conductivity(double value, Gu.Units.ConductivityUnit unit) -> void
Gu.Units.Conductivity.Equals(Gu.Units.Conductivity other) -> bool
Gu.Units.Conductivity.Equals(Gu.Units.Conductivity other, Gu.Units.Conductivity tolerance) -> bool
Gu.Units.Conductivity.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Conductivity.GetValue(Gu.Units.ConductivityUnit unit) -> double
Gu.Units.Conductivity.MicrosiemensPerCentimetre.get -> double
Gu.Units.Conductivity.MicrosiemensPerMetre.get -> double
Gu.Units.Conductivity.MicrosiemensPerMillimetre.get -> double
Gu.Units.Conductivity.MillisiemensPerCentimetre.get -> double
Gu.Units.Conductivity.MillisiemensPerMetre.get -> double
Gu.Units.Conductivity.MillisiemensPerMillimetre.get -> double
Gu.Units.Conductivity.NanosiemensPerCentimetre.get -> double
Gu.Units.Conductivity.NanosiemensPerMetre.get -> double
Gu.Units.Conductivity.NanosiemensPerMicrometre.get -> double
Gu.Units.Conductivity.NanosiemensPerMillimetre.get -> double
Gu.Units.Conductivity.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Conductivity.SiemensPerCentimetre.get -> double
Gu.Units.Conductivity.SiemensPerMetre.get -> double
Gu.Units.Conductivity.SiemensPerMillimetre.get -> double
Gu.Units.Conductivity.SiUnit.get -> Gu.Units.ConductivityUnit
Gu.Units.Conductivity.SiValue.get -> double
Gu.Units.Conductivity.ToString(Gu.Units.ConductivityUnit unit) -> string!
Gu.Units.Conductivity.ToString(Gu.Units.ConductivityUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Conductivity.ToString(Gu.Units.ConductivityUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Conductivity.ToString(Gu.Units.ConductivityUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Conductivity.ToString(string! format) -> string!
Gu.Units.Conductivity.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Conductivity.ToString(string! valueFormat, Gu.Units.ConductivityUnit unit) -> string!
Gu.Units.Conductivity.ToString(string! valueFormat, Gu.Units.ConductivityUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Conductivity.ToString(string! valueFormat, Gu.Units.ConductivityUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Conductivity.ToString(string! valueFormat, Gu.Units.ConductivityUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Conductivity.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Conductivity.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Conductivity.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Conductivity.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.ConductivityTypeConverter
Gu.Units.ConductivityTypeConverter.ConductivityTypeConverter() -> void
Gu.Units.ConductivityUnit
Gu.Units.ConductivityUnit.ConductivityUnit() -> void
Gu.Units.ConductivityUnit.ConductivityUnit(System.Func<double, double>! toSiemensPerMetre, System.Func<double, double>! fromSiemensPerMetre, string! symbol) -> void
Gu.Units.ConductivityUnit.CreateQuantity(double value) -> Gu.Units.Conductivity
Gu.Units.ConductivityUnit.Equals(Gu.Units.ConductivityUnit other) -> bool
Gu.Units.ConductivityUnit.FromSiUnit(double siemensPerMetre) -> double
Gu.Units.ConductivityUnit.GetScalarValue(Gu.Units.Conductivity quantity) -> double
Gu.Units.ConductivityUnit.SiUnit.get -> Gu.Units.ConductivityUnit
Gu.Units.ConductivityUnit.Symbol.get -> string!
Gu.Units.ConductivityUnit.ToSiUnit(double value) -> double
Gu.Units.ConductivityUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.ConductivityUnit.ToString(string! format) -> string!
Gu.Units.ConductivityUnitTypeConverter
Gu.Units.ConductivityUnitTypeConverter.ConductivityUnitTypeConverter() -> void
Gu.Units.Current
Gu.Units.Current.Amperes.get -> double
Gu.Units.Current.CompareTo(Gu.Units.Current quantity) -> int
Gu.Units.Current.Current() -> void
Gu.Units.Current.Current(double value, Gu.Units.CurrentUnit unit) -> void
Gu.Units.Current.Equals(Gu.Units.Current other) -> bool
Gu.Units.Current.Equals(Gu.Units.Current other, Gu.Units.Current tolerance) -> bool
Gu.Units.Current.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Current.GetValue(Gu.Units.CurrentUnit unit) -> double
Gu.Units.Current.Gigaamperes.get -> double
Gu.Units.Current.Kiloamperes.get -> double
Gu.Units.Current.Megaamperes.get -> double
Gu.Units.Current.Microamperes.get -> double
Gu.Units.Current.Milliamperes.get -> double
Gu.Units.Current.Nanoamperes.get -> double
Gu.Units.Current.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Current.SiUnit.get -> Gu.Units.CurrentUnit
Gu.Units.Current.SiValue.get -> double
Gu.Units.Current.ToString(Gu.Units.CurrentUnit unit) -> string!
Gu.Units.Current.ToString(Gu.Units.CurrentUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Current.ToString(Gu.Units.CurrentUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Current.ToString(Gu.Units.CurrentUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Current.ToString(string! format) -> string!
Gu.Units.Current.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Current.ToString(string! valueFormat, Gu.Units.CurrentUnit unit) -> string!
Gu.Units.Current.ToString(string! valueFormat, Gu.Units.CurrentUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Current.ToString(string! valueFormat, Gu.Units.CurrentUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Current.ToString(string! valueFormat, Gu.Units.CurrentUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Current.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Current.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Current.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Current.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.CurrentTypeConverter
Gu.Units.CurrentTypeConverter.CurrentTypeConverter() -> void
Gu.Units.CurrentUnit
Gu.Units.CurrentUnit.CreateQuantity(double value) -> Gu.Units.Current
Gu.Units.CurrentUnit.CurrentUnit() -> void
Gu.Units.CurrentUnit.CurrentUnit(System.Func<double, double>! toAmperes, System.Func<double, double>! fromAmperes, string! symbol) -> void
Gu.Units.CurrentUnit.Equals(Gu.Units.CurrentUnit other) -> bool
Gu.Units.CurrentUnit.FromSiUnit(double amperes) -> double
Gu.Units.CurrentUnit.GetScalarValue(Gu.Units.Current quantity) -> double
Gu.Units.CurrentUnit.SiUnit.get -> Gu.Units.CurrentUnit
Gu.Units.CurrentUnit.Symbol.get -> string!
Gu.Units.CurrentUnit.ToSiUnit(double value) -> double
Gu.Units.CurrentUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.CurrentUnit.ToString(string! format) -> string!
Gu.Units.CurrentUnitTypeConverter
Gu.Units.CurrentUnitTypeConverter.CurrentUnitTypeConverter() -> void
Gu.Units.Data
Gu.Units.Data.Bits.get -> double
Gu.Units.Data.Byte.get -> double
Gu.Units.Data.CompareTo(Gu.Units.Data quantity) -> int
Gu.Units.Data.Data() -> void
Gu.Units.Data.Data(double value, Gu.Units.DataUnit unit) -> void
Gu.Units.Data.Equals(Gu.Units.Data other) -> bool
Gu.Units.Data.Equals(Gu.Units.Data other, Gu.Units.Data tolerance) -> bool
Gu.Units.Data.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Data.GetValue(Gu.Units.DataUnit unit) -> double
Gu.Units.Data.Gigabits.get -> double
Gu.Units.Data.Gigabyte.get -> double
Gu.Units.Data.Kilobits.get -> double
Gu.Units.Data.Kilobyte.get -> double
Gu.Units.Data.Megabits.get -> double
Gu.Units.Data.Megabyte.get -> double
Gu.Units.Data.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Data.SiUnit.get -> Gu.Units.DataUnit
Gu.Units.Data.SiValue.get -> double
Gu.Units.Data.Terabyte.get -> double
Gu.Units.Data.ToString(Gu.Units.DataUnit unit) -> string!
Gu.Units.Data.ToString(Gu.Units.DataUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Data.ToString(Gu.Units.DataUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Data.ToString(Gu.Units.DataUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Data.ToString(string! format) -> string!
Gu.Units.Data.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Data.ToString(string! valueFormat, Gu.Units.DataUnit unit) -> string!
Gu.Units.Data.ToString(string! valueFormat, Gu.Units.DataUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Data.ToString(string! valueFormat, Gu.Units.DataUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Data.ToString(string! valueFormat, Gu.Units.DataUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Data.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Data.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Data.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Data.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.DataTypeConverter
Gu.Units.DataTypeConverter.DataTypeConverter() -> void
Gu.Units.DataUnit
Gu.Units.DataUnit.CreateQuantity(double value) -> Gu.Units.Data
Gu.Units.DataUnit.DataUnit() -> void
Gu.Units.DataUnit.DataUnit(System.Func<double, double>! toBits, System.Func<double, double>! fromBits, string! symbol) -> void
Gu.Units.DataUnit.Equals(Gu.Units.DataUnit other) -> bool
Gu.Units.DataUnit.FromSiUnit(double bits) -> double
Gu.Units.DataUnit.GetScalarValue(Gu.Units.Data quantity) -> double
Gu.Units.DataUnit.SiUnit.get -> Gu.Units.DataUnit
Gu.Units.DataUnit.Symbol.get -> string!
Gu.Units.DataUnit.ToSiUnit(double value) -> double
Gu.Units.DataUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.DataUnit.ToString(string! format) -> string!
Gu.Units.DataUnitTypeConverter
Gu.Units.DataUnitTypeConverter.DataUnitTypeConverter() -> void
Gu.Units.Density
Gu.Units.Density.CompareTo(Gu.Units.Density quantity) -> int
Gu.Units.Density.Density() -> void
Gu.Units.Density.Density(double value, Gu.Units.DensityUnit unit) -> void
Gu.Units.Density.Equals(Gu.Units.Density other) -> bool
Gu.Units.Density.Equals(Gu.Units.Density other, Gu.Units.Density tolerance) -> bool
Gu.Units.Density.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Density.GetValue(Gu.Units.DensityUnit unit) -> double
Gu.Units.Density.GramsPerCubicCentimetre.get -> double
Gu.Units.Density.GramsPerCubicMetre.get -> double
Gu.Units.Density.GramsPerCubicMillimetre.get -> double
Gu.Units.Density.KilogramsPerCubicMetre.get -> double
Gu.Units.Density.MilligramsPerCubicMetre.get -> double
Gu.Units.Density.MilligramsPerCubicMillimetre.get -> double
Gu.Units.Density.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Density.SiUnit.get -> Gu.Units.DensityUnit
Gu.Units.Density.SiValue.get -> double
Gu.Units.Density.ToString(Gu.Units.DensityUnit unit) -> string!
Gu.Units.Density.ToString(Gu.Units.DensityUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Density.ToString(Gu.Units.DensityUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Density.ToString(Gu.Units.DensityUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Density.ToString(string! format) -> string!
Gu.Units.Density.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Density.ToString(string! valueFormat, Gu.Units.DensityUnit unit) -> string!
Gu.Units.Density.ToString(string! valueFormat, Gu.Units.DensityUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Density.ToString(string! valueFormat, Gu.Units.DensityUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Density.ToString(string! valueFormat, Gu.Units.DensityUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Density.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Density.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Density.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Density.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.DensityTypeConverter
Gu.Units.DensityTypeConverter.DensityTypeConverter() -> void
Gu.Units.DensityUnit
Gu.Units.DensityUnit.CreateQuantity(double value) -> Gu.Units.Density
Gu.Units.DensityUnit.DensityUnit() -> void
Gu.Units.DensityUnit.DensityUnit(System.Func<double, double>! toKilogramsPerCubicMetre, System.Func<double, double>! fromKilogramsPerCubicMetre, string! symbol) -> void
Gu.Units.DensityUnit.Equals(Gu.Units.DensityUnit other) -> bool
Gu.Units.DensityUnit.FromSiUnit(double kilogramsPerCubicMetre) -> double
Gu.Units.DensityUnit.GetScalarValue(Gu.Units.Density quantity) -> double
Gu.Units.DensityUnit.SiUnit.get -> Gu.Units.DensityUnit
Gu.Units.DensityUnit.Symbol.get -> string!
Gu.Units.DensityUnit.ToSiUnit(double value) -> double
Gu.Units.DensityUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.DensityUnit.ToString(string! format) -> string!
Gu.Units.DensityUnitTypeConverter
Gu.Units.DensityUnitTypeConverter.DensityUnitTypeConverter() -> void
Gu.Units.ElectricalConductance
Gu.Units.ElectricalConductance.CompareTo(Gu.Units.ElectricalConductance quantity) -> int
Gu.Units.ElectricalConductance.ElectricalConductance() -> void
Gu.Units.ElectricalConductance.ElectricalConductance(double value, Gu.Units.ElectricalConductanceUnit unit) -> void
Gu.Units.ElectricalConductance.Equals(Gu.Units.ElectricalConductance other) -> bool
Gu.Units.ElectricalConductance.Equals(Gu.Units.ElectricalConductance other, Gu.Units.ElectricalConductance tolerance) -> bool
Gu.Units.ElectricalConductance.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.ElectricalConductance.GetValue(Gu.Units.ElectricalConductanceUnit unit) -> double
Gu.Units.ElectricalConductance.Microsiemens.get -> double
Gu.Units.ElectricalConductance.Millisiemens.get -> double
Gu.Units.ElectricalConductance.Nanosiemens.get -> double
Gu.Units.ElectricalConductance.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.ElectricalConductance.Siemens.get -> double
Gu.Units.ElectricalConductance.SiUnit.get -> Gu.Units.ElectricalConductanceUnit
Gu.Units.ElectricalConductance.SiValue.get -> double
Gu.Units.ElectricalConductance.ToString(Gu.Units.ElectricalConductanceUnit unit) -> string!
Gu.Units.ElectricalConductance.ToString(Gu.Units.ElectricalConductanceUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.ElectricalConductance.ToString(Gu.Units.ElectricalConductanceUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.ElectricalConductance.ToString(Gu.Units.ElectricalConductanceUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.ElectricalConductance.ToString(string! format) -> string!
Gu.Units.ElectricalConductance.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.ElectricalConductance.ToString(string! valueFormat, Gu.Units.ElectricalConductanceUnit unit) -> string!
Gu.Units.ElectricalConductance.ToString(string! valueFormat, Gu.Units.ElectricalConductanceUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.ElectricalConductance.ToString(string! valueFormat, Gu.Units.ElectricalConductanceUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.ElectricalConductance.ToString(string! valueFormat, Gu.Units.ElectricalConductanceUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.ElectricalConductance.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.ElectricalConductance.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.ElectricalConductance.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.ElectricalConductance.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.ElectricalConductanceTypeConverter
Gu.Units.ElectricalConductanceTypeConverter.ElectricalConductanceTypeConverter() -> void
Gu.Units.ElectricalConductanceUnit
Gu.Units.ElectricalConductanceUnit.CreateQuantity(double value) -> Gu.Units.ElectricalConductance
Gu.Units.ElectricalConductanceUnit.ElectricalConductanceUnit() -> void
Gu.Units.ElectricalConductanceUnit.ElectricalConductanceUnit(System.Func<double, double>! toSiemens, System.Func<double, double>! fromSiemens, string! symbol) -> void
Gu.Units.ElectricalConductanceUnit.Equals(Gu.Units.ElectricalConductanceUnit other) -> bool
Gu.Units.ElectricalConductanceUnit.FromSiUnit(double siemens) -> double
Gu.Units.ElectricalConductanceUnit.GetScalarValue(Gu.Units.ElectricalConductance quantity) -> double
Gu.Units.ElectricalConductanceUnit.SiUnit.get -> Gu.Units.ElectricalConductanceUnit
Gu.Units.ElectricalConductanceUnit.Symbol.get -> string!
Gu.Units.ElectricalConductanceUnit.ToSiUnit(double value) -> double
Gu.Units.ElectricalConductanceUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.ElectricalConductanceUnit.ToString(string! format) -> string!
Gu.Units.ElectricalConductanceUnitTypeConverter
Gu.Units.ElectricalConductanceUnitTypeConverter.ElectricalConductanceUnitTypeConverter() -> void
Gu.Units.ElectricCharge
Gu.Units.ElectricCharge.CompareTo(Gu.Units.ElectricCharge quantity) -> int
Gu.Units.ElectricCharge.Coulombs.get -> double
Gu.Units.ElectricCharge.ElectricCharge() -> void
Gu.Units.ElectricCharge.ElectricCharge(double value, Gu.Units.ElectricChargeUnit unit) -> void
Gu.Units.ElectricCharge.Equals(Gu.Units.ElectricCharge other) -> bool
Gu.Units.ElectricCharge.Equals(Gu.Units.ElectricCharge other, Gu.Units.ElectricCharge tolerance) -> bool
Gu.Units.ElectricCharge.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.ElectricCharge.GetValue(Gu.Units.ElectricChargeUnit unit) -> double
Gu.Units.ElectricCharge.Gigacoulombs.get -> double
Gu.Units.ElectricCharge.Kilocoulombs.get -> double
Gu.Units.ElectricCharge.Megacoulombs.get -> double
Gu.Units.ElectricCharge.Microcoulombs.get -> double
Gu.Units.ElectricCharge.Millicoulombs.get -> double
Gu.Units.ElectricCharge.Nanocoulombs.get -> double
Gu.Units.ElectricCharge.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.ElectricCharge.SiUnit.get -> Gu.Units.ElectricChargeUnit
Gu.Units.ElectricCharge.SiValue.get -> double
Gu.Units.ElectricCharge.ToString(Gu.Units.ElectricChargeUnit unit) -> string!
Gu.Units.ElectricCharge.ToString(Gu.Units.ElectricChargeUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.ElectricCharge.ToString(Gu.Units.ElectricChargeUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.ElectricCharge.ToString(Gu.Units.ElectricChargeUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.ElectricCharge.ToString(string! format) -> string!
Gu.Units.ElectricCharge.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.ElectricCharge.ToString(string! valueFormat, Gu.Units.ElectricChargeUnit unit) -> string!
Gu.Units.ElectricCharge.ToString(string! valueFormat, Gu.Units.ElectricChargeUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.ElectricCharge.ToString(string! valueFormat, Gu.Units.ElectricChargeUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.ElectricCharge.ToString(string! valueFormat, Gu.Units.ElectricChargeUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.ElectricCharge.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.ElectricCharge.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.ElectricCharge.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.ElectricCharge.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.ElectricChargeTypeConverter
Gu.Units.ElectricChargeTypeConverter.ElectricChargeTypeConverter() -> void
Gu.Units.ElectricChargeUnit
Gu.Units.ElectricChargeUnit.CreateQuantity(double value) -> Gu.Units.ElectricCharge
Gu.Units.ElectricChargeUnit.ElectricChargeUnit() -> void
Gu.Units.ElectricChargeUnit.ElectricChargeUnit(System.Func<double, double>! toCoulombs, System.Func<double, double>! fromCoulombs, string! symbol) -> void
Gu.Units.ElectricChargeUnit.Equals(Gu.Units.ElectricChargeUnit other) -> bool
Gu.Units.ElectricChargeUnit.FromSiUnit(double coulombs) -> double
Gu.Units.ElectricChargeUnit.GetScalarValue(Gu.Units.ElectricCharge quantity) -> double
Gu.Units.ElectricChargeUnit.SiUnit.get -> Gu.Units.ElectricChargeUnit
Gu.Units.ElectricChargeUnit.Symbol.get -> string!
Gu.Units.ElectricChargeUnit.ToSiUnit(double value) -> double
Gu.Units.ElectricChargeUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.ElectricChargeUnit.ToString(string! format) -> string!
Gu.Units.ElectricChargeUnitTypeConverter
Gu.Units.ElectricChargeUnitTypeConverter.ElectricChargeUnitTypeConverter() -> void
Gu.Units.Energy
Gu.Units.Energy.CompareTo(Gu.Units.Energy quantity) -> int
Gu.Units.Energy.Energy() -> void
Gu.Units.Energy.Energy(double value, Gu.Units.EnergyUnit unit) -> void
Gu.Units.Energy.Equals(Gu.Units.Energy other) -> bool
Gu.Units.Energy.Equals(Gu.Units.Energy other, Gu.Units.Energy tolerance) -> bool
Gu.Units.Energy.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Energy.GetValue(Gu.Units.EnergyUnit unit) -> double
Gu.Units.Energy.Gigajoules.get -> double
Gu.Units.Energy.Joules.get -> double
Gu.Units.Energy.Kilojoules.get -> double
Gu.Units.Energy.KilowattHours.get -> double
Gu.Units.Energy.Megajoules.get -> double
Gu.Units.Energy.Microjoules.get -> double
Gu.Units.Energy.Millijoules.get -> double
Gu.Units.Energy.Nanojoules.get -> double
Gu.Units.Energy.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Energy.SiUnit.get -> Gu.Units.EnergyUnit
Gu.Units.Energy.SiValue.get -> double
Gu.Units.Energy.ToString(Gu.Units.EnergyUnit unit) -> string!
Gu.Units.Energy.ToString(Gu.Units.EnergyUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Energy.ToString(Gu.Units.EnergyUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Energy.ToString(Gu.Units.EnergyUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Energy.ToString(string! format) -> string!
Gu.Units.Energy.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Energy.ToString(string! valueFormat, Gu.Units.EnergyUnit unit) -> string!
Gu.Units.Energy.ToString(string! valueFormat, Gu.Units.EnergyUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Energy.ToString(string! valueFormat, Gu.Units.EnergyUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Energy.ToString(string! valueFormat, Gu.Units.EnergyUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Energy.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Energy.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Energy.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Energy.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.EnergyTypeConverter
Gu.Units.EnergyTypeConverter.EnergyTypeConverter() -> void
Gu.Units.EnergyUnit
Gu.Units.EnergyUnit.CreateQuantity(double value) -> Gu.Units.Energy
Gu.Units.EnergyUnit.EnergyUnit() -> void
Gu.Units.EnergyUnit.EnergyUnit(System.Func<double, double>! toJoules, System.Func<double, double>! fromJoules, string! symbol) -> void
Gu.Units.EnergyUnit.Equals(Gu.Units.EnergyUnit other) -> bool
Gu.Units.EnergyUnit.FromSiUnit(double joules) -> double
Gu.Units.EnergyUnit.GetScalarValue(Gu.Units.Energy quantity) -> double
Gu.Units.EnergyUnit.SiUnit.get -> Gu.Units.EnergyUnit
Gu.Units.EnergyUnit.Symbol.get -> string!
Gu.Units.EnergyUnit.ToSiUnit(double value) -> double
Gu.Units.EnergyUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.EnergyUnit.ToString(string! format) -> string!
Gu.Units.EnergyUnitTypeConverter
Gu.Units.EnergyUnitTypeConverter.EnergyUnitTypeConverter() -> void
Gu.Units.EnumerableUnits
Gu.Units.Flexibility
Gu.Units.Flexibility.CompareTo(Gu.Units.Flexibility quantity) -> int
Gu.Units.Flexibility.Equals(Gu.Units.Flexibility other) -> bool
Gu.Units.Flexibility.Equals(Gu.Units.Flexibility other, Gu.Units.Flexibility tolerance) -> bool
Gu.Units.Flexibility.Flexibility() -> void
Gu.Units.Flexibility.Flexibility(double value, Gu.Units.FlexibilityUnit unit) -> void
Gu.Units.Flexibility.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Flexibility.GetValue(Gu.Units.FlexibilityUnit unit) -> double
Gu.Units.Flexibility.MetresPerNewton.get -> double
Gu.Units.Flexibility.MicrometresPerKilonewton.get -> double
Gu.Units.Flexibility.MillimetresPerKilonewton.get -> double
Gu.Units.Flexibility.MillimetresPerNewton.get -> double
Gu.Units.Flexibility.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Flexibility.SiUnit.get -> Gu.Units.FlexibilityUnit
Gu.Units.Flexibility.SiValue.get -> double
Gu.Units.Flexibility.ToString(Gu.Units.FlexibilityUnit unit) -> string!
Gu.Units.Flexibility.ToString(Gu.Units.FlexibilityUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Flexibility.ToString(Gu.Units.FlexibilityUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Flexibility.ToString(Gu.Units.FlexibilityUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Flexibility.ToString(string! format) -> string!
Gu.Units.Flexibility.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Flexibility.ToString(string! valueFormat, Gu.Units.FlexibilityUnit unit) -> string!
Gu.Units.Flexibility.ToString(string! valueFormat, Gu.Units.FlexibilityUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Flexibility.ToString(string! valueFormat, Gu.Units.FlexibilityUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Flexibility.ToString(string! valueFormat, Gu.Units.FlexibilityUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Flexibility.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Flexibility.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Flexibility.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Flexibility.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.FlexibilityTypeConverter
Gu.Units.FlexibilityTypeConverter.FlexibilityTypeConverter() -> void
Gu.Units.FlexibilityUnit
Gu.Units.FlexibilityUnit.CreateQuantity(double value) -> Gu.Units.Flexibility
Gu.Units.FlexibilityUnit.Equals(Gu.Units.FlexibilityUnit other) -> bool
Gu.Units.FlexibilityUnit.FlexibilityUnit() -> void
Gu.Units.FlexibilityUnit.FlexibilityUnit(System.Func<double, double>! toMetresPerNewton, System.Func<double, double>! fromMetresPerNewton, string! symbol) -> void
Gu.Units.FlexibilityUnit.FromSiUnit(double metresPerNewton) -> double
Gu.Units.FlexibilityUnit.GetScalarValue(Gu.Units.Flexibility quantity) -> double
Gu.Units.FlexibilityUnit.SiUnit.get -> Gu.Units.FlexibilityUnit
Gu.Units.FlexibilityUnit.Symbol.get -> string!
Gu.Units.FlexibilityUnit.ToSiUnit(double value) -> double
Gu.Units.FlexibilityUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.FlexibilityUnit.ToString(string! format) -> string!
Gu.Units.FlexibilityUnitTypeConverter
Gu.Units.FlexibilityUnitTypeConverter.FlexibilityUnitTypeConverter() -> void
Gu.Units.Force
Gu.Units.Force.CompareTo(Gu.Units.Force quantity) -> int
Gu.Units.Force.Equals(Gu.Units.Force other) -> bool
Gu.Units.Force.Equals(Gu.Units.Force other, Gu.Units.Force tolerance) -> bool
Gu.Units.Force.Force() -> void
Gu.Units.Force.Force(double value, Gu.Units.ForceUnit unit) -> void
Gu.Units.Force.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Force.GetValue(Gu.Units.ForceUnit unit) -> double
Gu.Units.Force.Giganewtons.get -> double
Gu.Units.Force.Kilonewtons.get -> double
Gu.Units.Force.Meganewtons.get -> double
Gu.Units.Force.Micronewtons.get -> double
Gu.Units.Force.Millinewtons.get -> double
Gu.Units.Force.Nanonewtons.get -> double
Gu.Units.Force.Newtons.get -> double
Gu.Units.Force.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Force.SiUnit.get -> Gu.Units.ForceUnit
Gu.Units.Force.SiValue.get -> double
Gu.Units.Force.ToString(Gu.Units.ForceUnit unit) -> string!
Gu.Units.Force.ToString(Gu.Units.ForceUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Force.ToString(Gu.Units.ForceUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Force.ToString(Gu.Units.ForceUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Force.ToString(string! format) -> string!
Gu.Units.Force.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Force.ToString(string! valueFormat, Gu.Units.ForceUnit unit) -> string!
Gu.Units.Force.ToString(string! valueFormat, Gu.Units.ForceUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Force.ToString(string! valueFormat, Gu.Units.ForceUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Force.ToString(string! valueFormat, Gu.Units.ForceUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Force.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Force.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Force.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Force.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.ForcePerUnitless
Gu.Units.ForcePerUnitless.CompareTo(Gu.Units.ForcePerUnitless quantity) -> int
Gu.Units.ForcePerUnitless.Equals(Gu.Units.ForcePerUnitless other) -> bool
Gu.Units.ForcePerUnitless.Equals(Gu.Units.ForcePerUnitless other, Gu.Units.ForcePerUnitless tolerance) -> bool
Gu.Units.ForcePerUnitless.ForcePerUnitless() -> void
Gu.Units.ForcePerUnitless.ForcePerUnitless(double value, Gu.Units.ForcePerUnitlessUnit unit) -> void
Gu.Units.ForcePerUnitless.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.ForcePerUnitless.GetValue(Gu.Units.ForcePerUnitlessUnit unit) -> double
Gu.Units.ForcePerUnitless.GiganewtonsPerPercent.get -> double
Gu.Units.ForcePerUnitless.KilonewtonsPerPercent.get -> double
Gu.Units.ForcePerUnitless.MeganewtonsPerPercent.get -> double
Gu.Units.ForcePerUnitless.NewtonsPerPercent.get -> double
Gu.Units.ForcePerUnitless.NewtonsPerUnitless.get -> double
Gu.Units.ForcePerUnitless.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.ForcePerUnitless.SiUnit.get -> Gu.Units.ForcePerUnitlessUnit
Gu.Units.ForcePerUnitless.SiValue.get -> double
Gu.Units.ForcePerUnitless.ToString(Gu.Units.ForcePerUnitlessUnit unit) -> string!
Gu.Units.ForcePerUnitless.ToString(Gu.Units.ForcePerUnitlessUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.ForcePerUnitless.ToString(Gu.Units.ForcePerUnitlessUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.ForcePerUnitless.ToString(Gu.Units.ForcePerUnitlessUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.ForcePerUnitless.ToString(string! format) -> string!
Gu.Units.ForcePerUnitless.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.ForcePerUnitless.ToString(string! valueFormat, Gu.Units.ForcePerUnitlessUnit unit) -> string!
Gu.Units.ForcePerUnitless.ToString(string! valueFormat, Gu.Units.ForcePerUnitlessUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.ForcePerUnitless.ToString(string! valueFormat, Gu.Units.ForcePerUnitlessUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.ForcePerUnitless.ToString(string! valueFormat, Gu.Units.ForcePerUnitlessUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.ForcePerUnitless.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.ForcePerUnitless.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.ForcePerUnitless.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.ForcePerUnitless.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.ForcePerUnitlessTypeConverter
Gu.Units.ForcePerUnitlessTypeConverter.ForcePerUnitlessTypeConverter() -> void
Gu.Units.ForcePerUnitlessUnit
Gu.Units.ForcePerUnitlessUnit.CreateQuantity(double value) -> Gu.Units.ForcePerUnitless
Gu.Units.ForcePerUnitlessUnit.Equals(Gu.Units.ForcePerUnitlessUnit other) -> bool
Gu.Units.ForcePerUnitlessUnit.ForcePerUnitlessUnit() -> void
Gu.Units.ForcePerUnitlessUnit.ForcePerUnitlessUnit(System.Func<double, double>! toNewtonsPerUnitless, System.Func<double, double>! fromNewtonsPerUnitless, string! symbol) -> void
Gu.Units.ForcePerUnitlessUnit.FromSiUnit(double newtonsPerUnitless) -> double
Gu.Units.ForcePerUnitlessUnit.GetScalarValue(Gu.Units.ForcePerUnitless quantity) -> double
Gu.Units.ForcePerUnitlessUnit.SiUnit.get -> Gu.Units.ForcePerUnitlessUnit
Gu.Units.ForcePerUnitlessUnit.Symbol.get -> string!
Gu.Units.ForcePerUnitlessUnit.ToSiUnit(double value) -> double
Gu.Units.ForcePerUnitlessUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.ForcePerUnitlessUnit.ToString(string! format) -> string!
Gu.Units.ForcePerUnitlessUnitTypeConverter
Gu.Units.ForcePerUnitlessUnitTypeConverter.ForcePerUnitlessUnitTypeConverter() -> void
Gu.Units.ForceTypeConverter
Gu.Units.ForceTypeConverter.ForceTypeConverter() -> void
Gu.Units.ForceUnit
Gu.Units.ForceUnit.CreateQuantity(double value) -> Gu.Units.Force
Gu.Units.ForceUnit.Equals(Gu.Units.ForceUnit other) -> bool
Gu.Units.ForceUnit.ForceUnit() -> void
Gu.Units.ForceUnit.ForceUnit(System.Func<double, double>! toNewtons, System.Func<double, double>! fromNewtons, string! symbol) -> void
Gu.Units.ForceUnit.FromSiUnit(double newtons) -> double
Gu.Units.ForceUnit.GetScalarValue(Gu.Units.Force quantity) -> double
Gu.Units.ForceUnit.SiUnit.get -> Gu.Units.ForceUnit
Gu.Units.ForceUnit.Symbol.get -> string!
Gu.Units.ForceUnit.ToSiUnit(double value) -> double
Gu.Units.ForceUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.ForceUnit.ToString(string! format) -> string!
Gu.Units.ForceUnitTypeConverter
Gu.Units.ForceUnitTypeConverter.ForceUnitTypeConverter() -> void
Gu.Units.Frequency
Gu.Units.Frequency.CompareTo(Gu.Units.Frequency quantity) -> int
Gu.Units.Frequency.Equals(Gu.Units.Frequency other) -> bool
Gu.Units.Frequency.Equals(Gu.Units.Frequency other, Gu.Units.Frequency tolerance) -> bool
Gu.Units.Frequency.Frequency() -> void
Gu.Units.Frequency.Frequency(double value, Gu.Units.FrequencyUnit unit) -> void
Gu.Units.Frequency.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Frequency.GetValue(Gu.Units.FrequencyUnit unit) -> double
Gu.Units.Frequency.Gigahertz.get -> double
Gu.Units.Frequency.Hertz.get -> double
Gu.Units.Frequency.Kilohertz.get -> double
Gu.Units.Frequency.Megahertz.get -> double
Gu.Units.Frequency.Millihertz.get -> double
Gu.Units.Frequency.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Frequency.SiUnit.get -> Gu.Units.FrequencyUnit
Gu.Units.Frequency.SiValue.get -> double
Gu.Units.Frequency.ToString(Gu.Units.FrequencyUnit unit) -> string!
Gu.Units.Frequency.ToString(Gu.Units.FrequencyUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Frequency.ToString(Gu.Units.FrequencyUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Frequency.ToString(Gu.Units.FrequencyUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Frequency.ToString(string! format) -> string!
Gu.Units.Frequency.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Frequency.ToString(string! valueFormat, Gu.Units.FrequencyUnit unit) -> string!
Gu.Units.Frequency.ToString(string! valueFormat, Gu.Units.FrequencyUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Frequency.ToString(string! valueFormat, Gu.Units.FrequencyUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Frequency.ToString(string! valueFormat, Gu.Units.FrequencyUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Frequency.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Frequency.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Frequency.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Frequency.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.FrequencyTypeConverter
Gu.Units.FrequencyTypeConverter.FrequencyTypeConverter() -> void
Gu.Units.FrequencyUnit
Gu.Units.FrequencyUnit.CreateQuantity(double value) -> Gu.Units.Frequency
Gu.Units.FrequencyUnit.Equals(Gu.Units.FrequencyUnit other) -> bool
Gu.Units.FrequencyUnit.FrequencyUnit() -> void
Gu.Units.FrequencyUnit.FrequencyUnit(System.Func<double, double>! toHertz, System.Func<double, double>! fromHertz, string! symbol) -> void
Gu.Units.FrequencyUnit.FromSiUnit(double hertz) -> double
Gu.Units.FrequencyUnit.GetScalarValue(Gu.Units.Frequency quantity) -> double
Gu.Units.FrequencyUnit.SiUnit.get -> Gu.Units.FrequencyUnit
Gu.Units.FrequencyUnit.Symbol.get -> string!
Gu.Units.FrequencyUnit.ToSiUnit(double value) -> double
Gu.Units.FrequencyUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.FrequencyUnit.ToString(string! format) -> string!
Gu.Units.FrequencyUnitTypeConverter
Gu.Units.FrequencyUnitTypeConverter.FrequencyUnitTypeConverter() -> void
Gu.Units.Illuminance
Gu.Units.Illuminance.CompareTo(Gu.Units.Illuminance quantity) -> int
Gu.Units.Illuminance.Equals(Gu.Units.Illuminance other) -> bool
Gu.Units.Illuminance.Equals(Gu.Units.Illuminance other, Gu.Units.Illuminance tolerance) -> bool
Gu.Units.Illuminance.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Illuminance.GetValue(Gu.Units.IlluminanceUnit unit) -> double
Gu.Units.Illuminance.Illuminance() -> void
Gu.Units.Illuminance.Illuminance(double value, Gu.Units.IlluminanceUnit unit) -> void
Gu.Units.Illuminance.Lux.get -> double
Gu.Units.Illuminance.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Illuminance.SiUnit.get -> Gu.Units.IlluminanceUnit
Gu.Units.Illuminance.SiValue.get -> double
Gu.Units.Illuminance.ToString(Gu.Units.IlluminanceUnit unit) -> string!
Gu.Units.Illuminance.ToString(Gu.Units.IlluminanceUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Illuminance.ToString(Gu.Units.IlluminanceUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Illuminance.ToString(Gu.Units.IlluminanceUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Illuminance.ToString(string! format) -> string!
Gu.Units.Illuminance.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Illuminance.ToString(string! valueFormat, Gu.Units.IlluminanceUnit unit) -> string!
Gu.Units.Illuminance.ToString(string! valueFormat, Gu.Units.IlluminanceUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Illuminance.ToString(string! valueFormat, Gu.Units.IlluminanceUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Illuminance.ToString(string! valueFormat, Gu.Units.IlluminanceUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Illuminance.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Illuminance.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Illuminance.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Illuminance.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.IlluminanceTypeConverter
Gu.Units.IlluminanceTypeConverter.IlluminanceTypeConverter() -> void
Gu.Units.IlluminanceUnit
Gu.Units.IlluminanceUnit.CreateQuantity(double value) -> Gu.Units.Illuminance
Gu.Units.IlluminanceUnit.Equals(Gu.Units.IlluminanceUnit other) -> bool
Gu.Units.IlluminanceUnit.FromSiUnit(double lux) -> double
Gu.Units.IlluminanceUnit.GetScalarValue(Gu.Units.Illuminance quantity) -> double
Gu.Units.IlluminanceUnit.IlluminanceUnit() -> void
Gu.Units.IlluminanceUnit.IlluminanceUnit(System.Func<double, double>! toLux, System.Func<double, double>! fromLux, string! symbol) -> void
Gu.Units.IlluminanceUnit.SiUnit.get -> Gu.Units.IlluminanceUnit
Gu.Units.IlluminanceUnit.Symbol.get -> string!
Gu.Units.IlluminanceUnit.ToSiUnit(double value) -> double
Gu.Units.IlluminanceUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.IlluminanceUnit.ToString(string! format) -> string!
Gu.Units.IlluminanceUnitTypeConverter
Gu.Units.IlluminanceUnitTypeConverter.IlluminanceUnitTypeConverter() -> void
Gu.Units.Inductance
Gu.Units.Inductance.CompareTo(Gu.Units.Inductance quantity) -> int
Gu.Units.Inductance.Equals(Gu.Units.Inductance other) -> bool
Gu.Units.Inductance.Equals(Gu.Units.Inductance other, Gu.Units.Inductance tolerance) -> bool
Gu.Units.Inductance.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Inductance.GetValue(Gu.Units.InductanceUnit unit) -> double
Gu.Units.Inductance.Gigahenrys.get -> double
Gu.Units.Inductance.Henrys.get -> double
Gu.Units.Inductance.Inductance() -> void
Gu.Units.Inductance.Inductance(double value, Gu.Units.InductanceUnit unit) -> void
Gu.Units.Inductance.Kilohenrys.get -> double
Gu.Units.Inductance.Megahenrys.get -> double
Gu.Units.Inductance.Microhenrys.get -> double
Gu.Units.Inductance.Millihenrys.get -> double
Gu.Units.Inductance.Nanohenrys.get -> double
Gu.Units.Inductance.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Inductance.SiUnit.get -> Gu.Units.InductanceUnit
Gu.Units.Inductance.SiValue.get -> double
Gu.Units.Inductance.ToString(Gu.Units.InductanceUnit unit) -> string!
Gu.Units.Inductance.ToString(Gu.Units.InductanceUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Inductance.ToString(Gu.Units.InductanceUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Inductance.ToString(Gu.Units.InductanceUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Inductance.ToString(string! format) -> string!
Gu.Units.Inductance.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Inductance.ToString(string! valueFormat, Gu.Units.InductanceUnit unit) -> string!
Gu.Units.Inductance.ToString(string! valueFormat, Gu.Units.InductanceUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Inductance.ToString(string! valueFormat, Gu.Units.InductanceUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Inductance.ToString(string! valueFormat, Gu.Units.InductanceUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Inductance.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Inductance.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Inductance.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Inductance.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.InductanceTypeConverter
Gu.Units.InductanceTypeConverter.InductanceTypeConverter() -> void
Gu.Units.InductanceUnit
Gu.Units.InductanceUnit.CreateQuantity(double value) -> Gu.Units.Inductance
Gu.Units.InductanceUnit.Equals(Gu.Units.InductanceUnit other) -> bool
Gu.Units.InductanceUnit.FromSiUnit(double henrys) -> double
Gu.Units.InductanceUnit.GetScalarValue(Gu.Units.Inductance quantity) -> double
Gu.Units.InductanceUnit.InductanceUnit() -> void
Gu.Units.InductanceUnit.InductanceUnit(System.Func<double, double>! toHenrys, System.Func<double, double>! fromHenrys, string! symbol) -> void
Gu.Units.InductanceUnit.SiUnit.get -> Gu.Units.InductanceUnit
Gu.Units.InductanceUnit.Symbol.get -> string!
Gu.Units.InductanceUnit.ToSiUnit(double value) -> double
Gu.Units.InductanceUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.InductanceUnit.ToString(string! format) -> string!
Gu.Units.InductanceUnitTypeConverter
Gu.Units.InductanceUnitTypeConverter.InductanceUnitTypeConverter() -> void
Gu.Units.IQuantity
Gu.Units.IQuantity.SiUnit.get -> Gu.Units.IUnit!
Gu.Units.IQuantity.SiValue.get -> double
Gu.Units.IQuantity.ToString(string! format) -> string!
Gu.Units.IQuantity.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.IQuantity.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.IQuantity.ToString(System.IFormatProvider! formatProvider) -> string!
Gu.Units.IQuantity<TUnit>
Gu.Units.IQuantity<TUnit>.GetValue(TUnit unit) -> double
Gu.Units.IQuantity<TUnit>.ToString(string! valueFormat, TUnit unit) -> string!
Gu.Units.IQuantity<TUnit>.ToString(string! valueFormat, TUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.IQuantity<TUnit>.ToString(string! valueFormat, TUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.IQuantity<TUnit>.ToString(string! valueFormat, TUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.IQuantity<TUnit>.ToString(TUnit unit) -> string!
Gu.Units.IQuantity<TUnit>.ToString(TUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.IQuantity<TUnit>.ToString(TUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.IQuantity<TUnit>.ToString(TUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.IUnit
Gu.Units.IUnit.FromSiUnit(double value) -> double
Gu.Units.IUnit.SiUnit.get -> Gu.Units.IUnit!
Gu.Units.IUnit.Symbol.get -> string!
Gu.Units.IUnit.ToSiUnit(double value) -> double
Gu.Units.IUnit.ToString(Gu.Units.SymbolFormat format) -> string!
Gu.Units.IUnit<TQuantity>
Gu.Units.IUnit<TQuantity>.CreateQuantity(double value) -> TQuantity
Gu.Units.IUnit<TQuantity>.GetScalarValue(TQuantity quantity) -> double
Gu.Units.Jerk
Gu.Units.Jerk.CentimetresPerHourCubed.get -> double
Gu.Units.Jerk.CentimetresPerMinuteCubed.get -> double
Gu.Units.Jerk.CentimetresPerSecondCubed.get -> double
Gu.Units.Jerk.CompareTo(Gu.Units.Jerk quantity) -> int
Gu.Units.Jerk.Equals(Gu.Units.Jerk other) -> bool
Gu.Units.Jerk.Equals(Gu.Units.Jerk other, Gu.Units.Jerk tolerance) -> bool
Gu.Units.Jerk.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Jerk.GetValue(Gu.Units.JerkUnit unit) -> double
Gu.Units.Jerk.Jerk() -> void
Gu.Units.Jerk.Jerk(double value, Gu.Units.JerkUnit unit) -> void
Gu.Units.Jerk.MetresPerHourCubed.get -> double
Gu.Units.Jerk.MetresPerMinuteCubed.get -> double
Gu.Units.Jerk.MetresPerSecondCubed.get -> double
Gu.Units.Jerk.MillimetresPerHourCubed.get -> double
Gu.Units.Jerk.MillimetresPerMinuteCubed.get -> double
Gu.Units.Jerk.MillimetresPerSecondCubed.get -> double
Gu.Units.Jerk.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Jerk.SiUnit.get -> Gu.Units.JerkUnit
Gu.Units.Jerk.SiValue.get -> double
Gu.Units.Jerk.ToString(Gu.Units.JerkUnit unit) -> string!
Gu.Units.Jerk.ToString(Gu.Units.JerkUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Jerk.ToString(Gu.Units.JerkUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Jerk.ToString(Gu.Units.JerkUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Jerk.ToString(string! format) -> string!
Gu.Units.Jerk.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Jerk.ToString(string! valueFormat, Gu.Units.JerkUnit unit) -> string!
Gu.Units.Jerk.ToString(string! valueFormat, Gu.Units.JerkUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Jerk.ToString(string! valueFormat, Gu.Units.JerkUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Jerk.ToString(string! valueFormat, Gu.Units.JerkUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Jerk.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Jerk.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Jerk.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Jerk.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.JerkTypeConverter
Gu.Units.JerkTypeConverter.JerkTypeConverter() -> void
Gu.Units.JerkUnit
Gu.Units.JerkUnit.CreateQuantity(double value) -> Gu.Units.Jerk
Gu.Units.JerkUnit.Equals(Gu.Units.JerkUnit other) -> bool
Gu.Units.JerkUnit.FromSiUnit(double metresPerSecondCubed) -> double
Gu.Units.JerkUnit.GetScalarValue(Gu.Units.Jerk quantity) -> double
Gu.Units.JerkUnit.JerkUnit() -> void
Gu.Units.JerkUnit.JerkUnit(System.Func<double, double>! toMetresPerSecondCubed, System.Func<double, double>! fromMetresPerSecondCubed, string! symbol) -> void
Gu.Units.JerkUnit.SiUnit.get -> Gu.Units.JerkUnit
Gu.Units.JerkUnit.Symbol.get -> string!
Gu.Units.JerkUnit.ToSiUnit(double value) -> double
Gu.Units.JerkUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.JerkUnit.ToString(string! format) -> string!
Gu.Units.JerkUnitTypeConverter
Gu.Units.JerkUnitTypeConverter.JerkUnitTypeConverter() -> void
Gu.Units.KinematicViscosity
Gu.Units.KinematicViscosity.CompareTo(Gu.Units.KinematicViscosity quantity) -> int
Gu.Units.KinematicViscosity.Equals(Gu.Units.KinematicViscosity other) -> bool
Gu.Units.KinematicViscosity.Equals(Gu.Units.KinematicViscosity other, Gu.Units.KinematicViscosity tolerance) -> bool
Gu.Units.KinematicViscosity.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.KinematicViscosity.GetValue(Gu.Units.KinematicViscosityUnit unit) -> double
Gu.Units.KinematicViscosity.KinematicViscosity() -> void
Gu.Units.KinematicViscosity.KinematicViscosity(double value, Gu.Units.KinematicViscosityUnit unit) -> void
Gu.Units.KinematicViscosity.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.KinematicViscosity.SiUnit.get -> Gu.Units.KinematicViscosityUnit
Gu.Units.KinematicViscosity.SiValue.get -> double
Gu.Units.KinematicViscosity.SquareMetresPerSecond.get -> double
Gu.Units.KinematicViscosity.ToString(Gu.Units.KinematicViscosityUnit unit) -> string!
Gu.Units.KinematicViscosity.ToString(Gu.Units.KinematicViscosityUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.KinematicViscosity.ToString(Gu.Units.KinematicViscosityUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.KinematicViscosity.ToString(Gu.Units.KinematicViscosityUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.KinematicViscosity.ToString(string! format) -> string!
Gu.Units.KinematicViscosity.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.KinematicViscosity.ToString(string! valueFormat, Gu.Units.KinematicViscosityUnit unit) -> string!
Gu.Units.KinematicViscosity.ToString(string! valueFormat, Gu.Units.KinematicViscosityUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.KinematicViscosity.ToString(string! valueFormat, Gu.Units.KinematicViscosityUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.KinematicViscosity.ToString(string! valueFormat, Gu.Units.KinematicViscosityUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.KinematicViscosity.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.KinematicViscosity.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.KinematicViscosity.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.KinematicViscosity.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.KinematicViscosityTypeConverter
Gu.Units.KinematicViscosityTypeConverter.KinematicViscosityTypeConverter() -> void
Gu.Units.KinematicViscosityUnit
Gu.Units.KinematicViscosityUnit.CreateQuantity(double value) -> Gu.Units.KinematicViscosity
Gu.Units.KinematicViscosityUnit.Equals(Gu.Units.KinematicViscosityUnit other) -> bool
Gu.Units.KinematicViscosityUnit.FromSiUnit(double squareMetresPerSecond) -> double
Gu.Units.KinematicViscosityUnit.GetScalarValue(Gu.Units.KinematicViscosity quantity) -> double
Gu.Units.KinematicViscosityUnit.KinematicViscosityUnit() -> void
Gu.Units.KinematicViscosityUnit.KinematicViscosityUnit(System.Func<double, double>! toSquareMetresPerSecond, System.Func<double, double>! fromSquareMetresPerSecond, string! symbol) -> void
Gu.Units.KinematicViscosityUnit.SiUnit.get -> Gu.Units.KinematicViscosityUnit
Gu.Units.KinematicViscosityUnit.Symbol.get -> string!
Gu.Units.KinematicViscosityUnit.ToSiUnit(double value) -> double
Gu.Units.KinematicViscosityUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.KinematicViscosityUnit.ToString(string! format) -> string!
Gu.Units.KinematicViscosityUnitTypeConverter
Gu.Units.KinematicViscosityUnitTypeConverter.KinematicViscosityUnitTypeConverter() -> void
Gu.Units.Length
Gu.Units.Length.Centimetres.get -> double
Gu.Units.Length.CompareTo(Gu.Units.Length quantity) -> int
Gu.Units.Length.Decimetres.get -> double
Gu.Units.Length.Equals(Gu.Units.Length other) -> bool
Gu.Units.Length.Equals(Gu.Units.Length other, Gu.Units.Length tolerance) -> bool
Gu.Units.Length.Feet.get -> double
Gu.Units.Length.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Length.GetValue(Gu.Units.LengthUnit unit) -> double
Gu.Units.Length.Inches.get -> double
Gu.Units.Length.Kilometres.get -> double
Gu.Units.Length.Length() -> void
Gu.Units.Length.Length(double value, Gu.Units.LengthUnit unit) -> void
Gu.Units.Length.Metres.get -> double
Gu.Units.Length.Micrometres.get -> double
Gu.Units.Length.Miles.get -> double
Gu.Units.Length.Millimetres.get -> double
Gu.Units.Length.Nanometres.get -> double
Gu.Units.Length.NauticalMiles.get -> double
Gu.Units.Length.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Length.SiUnit.get -> Gu.Units.LengthUnit
Gu.Units.Length.SiValue.get -> double
Gu.Units.Length.ToString(Gu.Units.LengthUnit unit) -> string!
Gu.Units.Length.ToString(Gu.Units.LengthUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Length.ToString(Gu.Units.LengthUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Length.ToString(Gu.Units.LengthUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Length.ToString(string! format) -> string!
Gu.Units.Length.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Length.ToString(string! valueFormat, Gu.Units.LengthUnit unit) -> string!
Gu.Units.Length.ToString(string! valueFormat, Gu.Units.LengthUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Length.ToString(string! valueFormat, Gu.Units.LengthUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Length.ToString(string! valueFormat, Gu.Units.LengthUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Length.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Length.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Length.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Length.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.Length.Yards.get -> double
Gu.Units.LengthPerUnitless
Gu.Units.LengthPerUnitless.CompareTo(Gu.Units.LengthPerUnitless quantity) -> int
Gu.Units.LengthPerUnitless.Equals(Gu.Units.LengthPerUnitless other) -> bool
Gu.Units.LengthPerUnitless.Equals(Gu.Units.LengthPerUnitless other, Gu.Units.LengthPerUnitless tolerance) -> bool
Gu.Units.LengthPerUnitless.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.LengthPerUnitless.GetValue(Gu.Units.LengthPerUnitlessUnit unit) -> double
Gu.Units.LengthPerUnitless.LengthPerUnitless() -> void
Gu.Units.LengthPerUnitless.LengthPerUnitless(double value, Gu.Units.LengthPerUnitlessUnit unit) -> void
Gu.Units.LengthPerUnitless.MetresPerPercent.get -> double
Gu.Units.LengthPerUnitless.MetresPerUnitless.get -> double
Gu.Units.LengthPerUnitless.MicrometresPerPercent.get -> double
Gu.Units.LengthPerUnitless.MillimetresPerPercent.get -> double
Gu.Units.LengthPerUnitless.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.LengthPerUnitless.SiUnit.get -> Gu.Units.LengthPerUnitlessUnit
Gu.Units.LengthPerUnitless.SiValue.get -> double
Gu.Units.LengthPerUnitless.ToString(Gu.Units.LengthPerUnitlessUnit unit) -> string!
Gu.Units.LengthPerUnitless.ToString(Gu.Units.LengthPerUnitlessUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.LengthPerUnitless.ToString(Gu.Units.LengthPerUnitlessUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.LengthPerUnitless.ToString(Gu.Units.LengthPerUnitlessUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.LengthPerUnitless.ToString(string! format) -> string!
Gu.Units.LengthPerUnitless.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.LengthPerUnitless.ToString(string! valueFormat, Gu.Units.LengthPerUnitlessUnit unit) -> string!
Gu.Units.LengthPerUnitless.ToString(string! valueFormat, Gu.Units.LengthPerUnitlessUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.LengthPerUnitless.ToString(string! valueFormat, Gu.Units.LengthPerUnitlessUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.LengthPerUnitless.ToString(string! valueFormat, Gu.Units.LengthPerUnitlessUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.LengthPerUnitless.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.LengthPerUnitless.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.LengthPerUnitless.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.LengthPerUnitless.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.LengthPerUnitlessTypeConverter
Gu.Units.LengthPerUnitlessTypeConverter.LengthPerUnitlessTypeConverter() -> void
Gu.Units.LengthPerUnitlessUnit
Gu.Units.LengthPerUnitlessUnit.CreateQuantity(double value) -> Gu.Units.LengthPerUnitless
Gu.Units.LengthPerUnitlessUnit.Equals(Gu.Units.LengthPerUnitlessUnit other) -> bool
Gu.Units.LengthPerUnitlessUnit.FromSiUnit(double metresPerUnitless) -> double
Gu.Units.LengthPerUnitlessUnit.GetScalarValue(Gu.Units.LengthPerUnitless quantity) -> double
Gu.Units.LengthPerUnitlessUnit.LengthPerUnitlessUnit() -> void
Gu.Units.LengthPerUnitlessUnit.LengthPerUnitlessUnit(System.Func<double, double>! toMetresPerUnitless, System.Func<double, double>! fromMetresPerUnitless, string! symbol) -> void
Gu.Units.LengthPerUnitlessUnit.SiUnit.get -> Gu.Units.LengthPerUnitlessUnit
Gu.Units.LengthPerUnitlessUnit.Symbol.get -> string!
Gu.Units.LengthPerUnitlessUnit.ToSiUnit(double value) -> double
Gu.Units.LengthPerUnitlessUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.LengthPerUnitlessUnit.ToString(string! format) -> string!
Gu.Units.LengthPerUnitlessUnitTypeConverter
Gu.Units.LengthPerUnitlessUnitTypeConverter.LengthPerUnitlessUnitTypeConverter() -> void
Gu.Units.LengthTypeConverter
Gu.Units.LengthTypeConverter.LengthTypeConverter() -> void
Gu.Units.LengthUnit
Gu.Units.LengthUnit.CreateQuantity(double value) -> Gu.Units.Length
Gu.Units.LengthUnit.Equals(Gu.Units.LengthUnit other) -> bool
Gu.Units.LengthUnit.FromSiUnit(double metres) -> double
Gu.Units.LengthUnit.GetScalarValue(Gu.Units.Length quantity) -> double
Gu.Units.LengthUnit.LengthUnit() -> void
Gu.Units.LengthUnit.LengthUnit(System.Func<double, double>! toMetres, System.Func<double, double>! fromMetres, string! symbol) -> void
Gu.Units.LengthUnit.SiUnit.get -> Gu.Units.LengthUnit
Gu.Units.LengthUnit.Symbol.get -> string!
Gu.Units.LengthUnit.ToSiUnit(double value) -> double
Gu.Units.LengthUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.LengthUnit.ToString(string! format) -> string!
Gu.Units.LengthUnitTypeConverter
Gu.Units.LengthUnitTypeConverter.LengthUnitTypeConverter() -> void
Gu.Units.LuminousFlux
Gu.Units.LuminousFlux.CompareTo(Gu.Units.LuminousFlux quantity) -> int
Gu.Units.LuminousFlux.Equals(Gu.Units.LuminousFlux other) -> bool
Gu.Units.LuminousFlux.Equals(Gu.Units.LuminousFlux other, Gu.Units.LuminousFlux tolerance) -> bool
Gu.Units.LuminousFlux.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.LuminousFlux.GetValue(Gu.Units.LuminousFluxUnit unit) -> double
Gu.Units.LuminousFlux.Lumens.get -> double
Gu.Units.LuminousFlux.LuminousFlux() -> void
Gu.Units.LuminousFlux.LuminousFlux(double value, Gu.Units.LuminousFluxUnit unit) -> void
Gu.Units.LuminousFlux.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.LuminousFlux.SiUnit.get -> Gu.Units.LuminousFluxUnit
Gu.Units.LuminousFlux.SiValue.get -> double
Gu.Units.LuminousFlux.ToString(Gu.Units.LuminousFluxUnit unit) -> string!
Gu.Units.LuminousFlux.ToString(Gu.Units.LuminousFluxUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.LuminousFlux.ToString(Gu.Units.LuminousFluxUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.LuminousFlux.ToString(Gu.Units.LuminousFluxUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.LuminousFlux.ToString(string! format) -> string!
Gu.Units.LuminousFlux.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.LuminousFlux.ToString(string! valueFormat, Gu.Units.LuminousFluxUnit unit) -> string!
Gu.Units.LuminousFlux.ToString(string! valueFormat, Gu.Units.LuminousFluxUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.LuminousFlux.ToString(string! valueFormat, Gu.Units.LuminousFluxUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.LuminousFlux.ToString(string! valueFormat, Gu.Units.LuminousFluxUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.LuminousFlux.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.LuminousFlux.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.LuminousFlux.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.LuminousFlux.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.LuminousFluxTypeConverter
Gu.Units.LuminousFluxTypeConverter.LuminousFluxTypeConverter() -> void
Gu.Units.LuminousFluxUnit
Gu.Units.LuminousFluxUnit.CreateQuantity(double value) -> Gu.Units.LuminousFlux
Gu.Units.LuminousFluxUnit.Equals(Gu.Units.LuminousFluxUnit other) -> bool
Gu.Units.LuminousFluxUnit.FromSiUnit(double lumens) -> double
Gu.Units.LuminousFluxUnit.GetScalarValue(Gu.Units.LuminousFlux quantity) -> double
Gu.Units.LuminousFluxUnit.LuminousFluxUnit() -> void
Gu.Units.LuminousFluxUnit.LuminousFluxUnit(System.Func<double, double>! toLumens, System.Func<double, double>! fromLumens, string! symbol) -> void
Gu.Units.LuminousFluxUnit.SiUnit.get -> Gu.Units.LuminousFluxUnit
Gu.Units.LuminousFluxUnit.Symbol.get -> string!
Gu.Units.LuminousFluxUnit.ToSiUnit(double value) -> double
Gu.Units.LuminousFluxUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.LuminousFluxUnit.ToString(string! format) -> string!
Gu.Units.LuminousFluxUnitTypeConverter
Gu.Units.LuminousFluxUnitTypeConverter.LuminousFluxUnitTypeConverter() -> void
Gu.Units.LuminousIntensity
Gu.Units.LuminousIntensity.Candelas.get -> double
Gu.Units.LuminousIntensity.CompareTo(Gu.Units.LuminousIntensity quantity) -> int
Gu.Units.LuminousIntensity.Equals(Gu.Units.LuminousIntensity other) -> bool
Gu.Units.LuminousIntensity.Equals(Gu.Units.LuminousIntensity other, Gu.Units.LuminousIntensity tolerance) -> bool
Gu.Units.LuminousIntensity.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.LuminousIntensity.GetValue(Gu.Units.LuminousIntensityUnit unit) -> double
Gu.Units.LuminousIntensity.LuminousIntensity() -> void
Gu.Units.LuminousIntensity.LuminousIntensity(double value, Gu.Units.LuminousIntensityUnit unit) -> void
Gu.Units.LuminousIntensity.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.LuminousIntensity.SiUnit.get -> Gu.Units.LuminousIntensityUnit
Gu.Units.LuminousIntensity.SiValue.get -> double
Gu.Units.LuminousIntensity.ToString(Gu.Units.LuminousIntensityUnit unit) -> string!
Gu.Units.LuminousIntensity.ToString(Gu.Units.LuminousIntensityUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.LuminousIntensity.ToString(Gu.Units.LuminousIntensityUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.LuminousIntensity.ToString(Gu.Units.LuminousIntensityUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.LuminousIntensity.ToString(string! format) -> string!
Gu.Units.LuminousIntensity.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.LuminousIntensity.ToString(string! valueFormat, Gu.Units.LuminousIntensityUnit unit) -> string!
Gu.Units.LuminousIntensity.ToString(string! valueFormat, Gu.Units.LuminousIntensityUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.LuminousIntensity.ToString(string! valueFormat, Gu.Units.LuminousIntensityUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.LuminousIntensity.ToString(string! valueFormat, Gu.Units.LuminousIntensityUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.LuminousIntensity.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.LuminousIntensity.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.LuminousIntensity.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.LuminousIntensity.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.LuminousIntensityTypeConverter
Gu.Units.LuminousIntensityTypeConverter.LuminousIntensityTypeConverter() -> void
Gu.Units.LuminousIntensityUnit
Gu.Units.LuminousIntensityUnit.CreateQuantity(double value) -> Gu.Units.LuminousIntensity
Gu.Units.LuminousIntensityUnit.Equals(Gu.Units.LuminousIntensityUnit other) -> bool
Gu.Units.LuminousIntensityUnit.FromSiUnit(double candelas) -> double
Gu.Units.LuminousIntensityUnit.GetScalarValue(Gu.Units.LuminousIntensity quantity) -> double
Gu.Units.LuminousIntensityUnit.LuminousIntensityUnit() -> void
Gu.Units.LuminousIntensityUnit.LuminousIntensityUnit(System.Func<double, double>! toCandelas, System.Func<double, double>! fromCandelas, string! symbol) -> void
Gu.Units.LuminousIntensityUnit.SiUnit.get -> Gu.Units.LuminousIntensityUnit
Gu.Units.LuminousIntensityUnit.Symbol.get -> string!
Gu.Units.LuminousIntensityUnit.ToSiUnit(double value) -> double
Gu.Units.LuminousIntensityUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.LuminousIntensityUnit.ToString(string! format) -> string!
Gu.Units.LuminousIntensityUnitTypeConverter
Gu.Units.LuminousIntensityUnitTypeConverter.LuminousIntensityUnitTypeConverter() -> void
Gu.Units.MagneticFieldStrength
Gu.Units.MagneticFieldStrength.CompareTo(Gu.Units.MagneticFieldStrength quantity) -> int
Gu.Units.MagneticFieldStrength.Equals(Gu.Units.MagneticFieldStrength other) -> bool
Gu.Units.MagneticFieldStrength.Equals(Gu.Units.MagneticFieldStrength other, Gu.Units.MagneticFieldStrength tolerance) -> bool
Gu.Units.MagneticFieldStrength.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.MagneticFieldStrength.GetValue(Gu.Units.MagneticFieldStrengthUnit unit) -> double
Gu.Units.MagneticFieldStrength.MagneticFieldStrength() -> void
Gu.Units.MagneticFieldStrength.MagneticFieldStrength(double value, Gu.Units.MagneticFieldStrengthUnit unit) -> void
Gu.Units.MagneticFieldStrength.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.MagneticFieldStrength.SiUnit.get -> Gu.Units.MagneticFieldStrengthUnit
Gu.Units.MagneticFieldStrength.SiValue.get -> double
Gu.Units.MagneticFieldStrength.Teslas.get -> double
Gu.Units.MagneticFieldStrength.ToString(Gu.Units.MagneticFieldStrengthUnit unit) -> string!
Gu.Units.MagneticFieldStrength.ToString(Gu.Units.MagneticFieldStrengthUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.MagneticFieldStrength.ToString(Gu.Units.MagneticFieldStrengthUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MagneticFieldStrength.ToString(Gu.Units.MagneticFieldStrengthUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MagneticFieldStrength.ToString(string! format) -> string!
Gu.Units.MagneticFieldStrength.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.MagneticFieldStrength.ToString(string! valueFormat, Gu.Units.MagneticFieldStrengthUnit unit) -> string!
Gu.Units.MagneticFieldStrength.ToString(string! valueFormat, Gu.Units.MagneticFieldStrengthUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.MagneticFieldStrength.ToString(string! valueFormat, Gu.Units.MagneticFieldStrengthUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MagneticFieldStrength.ToString(string! valueFormat, Gu.Units.MagneticFieldStrengthUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MagneticFieldStrength.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.MagneticFieldStrength.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MagneticFieldStrength.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.MagneticFieldStrength.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.MagneticFieldStrengthTypeConverter
Gu.Units.MagneticFieldStrengthTypeConverter.MagneticFieldStrengthTypeConverter() -> void
Gu.Units.MagneticFieldStrengthUnit
Gu.Units.MagneticFieldStrengthUnit.CreateQuantity(double value) -> Gu.Units.MagneticFieldStrength
Gu.Units.MagneticFieldStrengthUnit.Equals(Gu.Units.MagneticFieldStrengthUnit other) -> bool
Gu.Units.MagneticFieldStrengthUnit.FromSiUnit(double teslas) -> double
Gu.Units.MagneticFieldStrengthUnit.GetScalarValue(Gu.Units.MagneticFieldStrength quantity) -> double
Gu.Units.MagneticFieldStrengthUnit.MagneticFieldStrengthUnit() -> void
Gu.Units.MagneticFieldStrengthUnit.MagneticFieldStrengthUnit(System.Func<double, double>! toTeslas, System.Func<double, double>! fromTeslas, string! symbol) -> void
Gu.Units.MagneticFieldStrengthUnit.SiUnit.get -> Gu.Units.MagneticFieldStrengthUnit
Gu.Units.MagneticFieldStrengthUnit.Symbol.get -> string!
Gu.Units.MagneticFieldStrengthUnit.ToSiUnit(double value) -> double
Gu.Units.MagneticFieldStrengthUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.MagneticFieldStrengthUnit.ToString(string! format) -> string!
Gu.Units.MagneticFieldStrengthUnitTypeConverter
Gu.Units.MagneticFieldStrengthUnitTypeConverter.MagneticFieldStrengthUnitTypeConverter() -> void
Gu.Units.MagneticFlux
Gu.Units.MagneticFlux.CompareTo(Gu.Units.MagneticFlux quantity) -> int
Gu.Units.MagneticFlux.Equals(Gu.Units.MagneticFlux other) -> bool
Gu.Units.MagneticFlux.Equals(Gu.Units.MagneticFlux other, Gu.Units.MagneticFlux tolerance) -> bool
Gu.Units.MagneticFlux.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.MagneticFlux.GetValue(Gu.Units.MagneticFluxUnit unit) -> double
Gu.Units.MagneticFlux.MagneticFlux() -> void
Gu.Units.MagneticFlux.MagneticFlux(double value, Gu.Units.MagneticFluxUnit unit) -> void
Gu.Units.MagneticFlux.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.MagneticFlux.SiUnit.get -> Gu.Units.MagneticFluxUnit
Gu.Units.MagneticFlux.SiValue.get -> double
Gu.Units.MagneticFlux.ToString(Gu.Units.MagneticFluxUnit unit) -> string!
Gu.Units.MagneticFlux.ToString(Gu.Units.MagneticFluxUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.MagneticFlux.ToString(Gu.Units.MagneticFluxUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MagneticFlux.ToString(Gu.Units.MagneticFluxUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MagneticFlux.ToString(string! format) -> string!
Gu.Units.MagneticFlux.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.MagneticFlux.ToString(string! valueFormat, Gu.Units.MagneticFluxUnit unit) -> string!
Gu.Units.MagneticFlux.ToString(string! valueFormat, Gu.Units.MagneticFluxUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.MagneticFlux.ToString(string! valueFormat, Gu.Units.MagneticFluxUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MagneticFlux.ToString(string! valueFormat, Gu.Units.MagneticFluxUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MagneticFlux.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.MagneticFlux.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MagneticFlux.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.MagneticFlux.Webers.get -> double
Gu.Units.MagneticFlux.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.MagneticFluxTypeConverter
Gu.Units.MagneticFluxTypeConverter.MagneticFluxTypeConverter() -> void
Gu.Units.MagneticFluxUnit
Gu.Units.MagneticFluxUnit.CreateQuantity(double value) -> Gu.Units.MagneticFlux
Gu.Units.MagneticFluxUnit.Equals(Gu.Units.MagneticFluxUnit other) -> bool
Gu.Units.MagneticFluxUnit.FromSiUnit(double webers) -> double
Gu.Units.MagneticFluxUnit.GetScalarValue(Gu.Units.MagneticFlux quantity) -> double
Gu.Units.MagneticFluxUnit.MagneticFluxUnit() -> void
Gu.Units.MagneticFluxUnit.MagneticFluxUnit(System.Func<double, double>! toWebers, System.Func<double, double>! fromWebers, string! symbol) -> void
Gu.Units.MagneticFluxUnit.SiUnit.get -> Gu.Units.MagneticFluxUnit
Gu.Units.MagneticFluxUnit.Symbol.get -> string!
Gu.Units.MagneticFluxUnit.ToSiUnit(double value) -> double
Gu.Units.MagneticFluxUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.MagneticFluxUnit.ToString(string! format) -> string!
Gu.Units.MagneticFluxUnitTypeConverter
Gu.Units.MagneticFluxUnitTypeConverter.MagneticFluxUnitTypeConverter() -> void
Gu.Units.Mass
Gu.Units.Mass.AvoirdupoisOunces.get -> double
Gu.Units.Mass.AvoirdupoisPounds.get -> double
Gu.Units.Mass.CompareTo(Gu.Units.Mass quantity) -> int
Gu.Units.Mass.Equals(Gu.Units.Mass other) -> bool
Gu.Units.Mass.Equals(Gu.Units.Mass other, Gu.Units.Mass tolerance) -> bool
Gu.Units.Mass.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Mass.GetValue(Gu.Units.MassUnit unit) -> double
Gu.Units.Mass.Grams.get -> double
Gu.Units.Mass.Kilograms.get -> double
Gu.Units.Mass.Mass() -> void
Gu.Units.Mass.Mass(double value, Gu.Units.MassUnit unit) -> void
Gu.Units.Mass.Micrograms.get -> double
Gu.Units.Mass.Milligrams.get -> double
Gu.Units.Mass.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Mass.SiUnit.get -> Gu.Units.MassUnit
Gu.Units.Mass.SiValue.get -> double
Gu.Units.Mass.ToString(Gu.Units.MassUnit unit) -> string!
Gu.Units.Mass.ToString(Gu.Units.MassUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Mass.ToString(Gu.Units.MassUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Mass.ToString(Gu.Units.MassUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Mass.ToString(string! format) -> string!
Gu.Units.Mass.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Mass.ToString(string! valueFormat, Gu.Units.MassUnit unit) -> string!
Gu.Units.Mass.ToString(string! valueFormat, Gu.Units.MassUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Mass.ToString(string! valueFormat, Gu.Units.MassUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Mass.ToString(string! valueFormat, Gu.Units.MassUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Mass.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Mass.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Mass.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Mass.TroyGrains.get -> double
Gu.Units.Mass.TroyOunces.get -> double
Gu.Units.Mass.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.MassFlow
Gu.Units.MassFlow.CompareTo(Gu.Units.MassFlow quantity) -> int
Gu.Units.MassFlow.Equals(Gu.Units.MassFlow other) -> bool
Gu.Units.MassFlow.Equals(Gu.Units.MassFlow other, Gu.Units.MassFlow tolerance) -> bool
Gu.Units.MassFlow.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.MassFlow.GetValue(Gu.Units.MassFlowUnit unit) -> double
Gu.Units.MassFlow.KilogramsPerSecond.get -> double
Gu.Units.MassFlow.MassFlow() -> void
Gu.Units.MassFlow.MassFlow(double value, Gu.Units.MassFlowUnit unit) -> void
Gu.Units.MassFlow.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.MassFlow.SiUnit.get -> Gu.Units.MassFlowUnit
Gu.Units.MassFlow.SiValue.get -> double
Gu.Units.MassFlow.ToString(Gu.Units.MassFlowUnit unit) -> string!
Gu.Units.MassFlow.ToString(Gu.Units.MassFlowUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.MassFlow.ToString(Gu.Units.MassFlowUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MassFlow.ToString(Gu.Units.MassFlowUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MassFlow.ToString(string! format) -> string!
Gu.Units.MassFlow.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.MassFlow.ToString(string! valueFormat, Gu.Units.MassFlowUnit unit) -> string!
Gu.Units.MassFlow.ToString(string! valueFormat, Gu.Units.MassFlowUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.MassFlow.ToString(string! valueFormat, Gu.Units.MassFlowUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MassFlow.ToString(string! valueFormat, Gu.Units.MassFlowUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MassFlow.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.MassFlow.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MassFlow.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.MassFlow.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.MassFlowTypeConverter
Gu.Units.MassFlowTypeConverter.MassFlowTypeConverter() -> void
Gu.Units.MassFlowUnit
Gu.Units.MassFlowUnit.CreateQuantity(double value) -> Gu.Units.MassFlow
Gu.Units.MassFlowUnit.Equals(Gu.Units.MassFlowUnit other) -> bool
Gu.Units.MassFlowUnit.FromSiUnit(double kilogramsPerSecond) -> double
Gu.Units.MassFlowUnit.GetScalarValue(Gu.Units.MassFlow quantity) -> double
Gu.Units.MassFlowUnit.MassFlowUnit() -> void
Gu.Units.MassFlowUnit.MassFlowUnit(System.Func<double, double>! toKilogramsPerSecond, System.Func<double, double>! fromKilogramsPerSecond, string! symbol) -> void
Gu.Units.MassFlowUnit.SiUnit.get -> Gu.Units.MassFlowUnit
Gu.Units.MassFlowUnit.Symbol.get -> string!
Gu.Units.MassFlowUnit.ToSiUnit(double value) -> double
Gu.Units.MassFlowUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.MassFlowUnit.ToString(string! format) -> string!
Gu.Units.MassFlowUnitTypeConverter
Gu.Units.MassFlowUnitTypeConverter.MassFlowUnitTypeConverter() -> void
Gu.Units.MassTypeConverter
Gu.Units.MassTypeConverter.MassTypeConverter() -> void
Gu.Units.MassUnit
Gu.Units.MassUnit.CreateQuantity(double value) -> Gu.Units.Mass
Gu.Units.MassUnit.Equals(Gu.Units.MassUnit other) -> bool
Gu.Units.MassUnit.FromSiUnit(double kilograms) -> double
Gu.Units.MassUnit.GetScalarValue(Gu.Units.Mass quantity) -> double
Gu.Units.MassUnit.MassUnit() -> void
Gu.Units.MassUnit.MassUnit(System.Func<double, double>! toKilograms, System.Func<double, double>! fromKilograms, string! symbol) -> void
Gu.Units.MassUnit.SiUnit.get -> Gu.Units.MassUnit
Gu.Units.MassUnit.Symbol.get -> string!
Gu.Units.MassUnit.ToSiUnit(double value) -> double
Gu.Units.MassUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.MassUnit.ToString(string! format) -> string!
Gu.Units.MassUnitTypeConverter
Gu.Units.MassUnitTypeConverter.MassUnitTypeConverter() -> void
Gu.Units.MolarHeatCapacity
Gu.Units.MolarHeatCapacity.CompareTo(Gu.Units.MolarHeatCapacity quantity) -> int
Gu.Units.MolarHeatCapacity.Equals(Gu.Units.MolarHeatCapacity other) -> bool
Gu.Units.MolarHeatCapacity.Equals(Gu.Units.MolarHeatCapacity other, Gu.Units.MolarHeatCapacity tolerance) -> bool
Gu.Units.MolarHeatCapacity.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.MolarHeatCapacity.GetValue(Gu.Units.MolarHeatCapacityUnit unit) -> double
Gu.Units.MolarHeatCapacity.JoulesPerKelvinMole.get -> double
Gu.Units.MolarHeatCapacity.MolarHeatCapacity() -> void
Gu.Units.MolarHeatCapacity.MolarHeatCapacity(double value, Gu.Units.MolarHeatCapacityUnit unit) -> void
Gu.Units.MolarHeatCapacity.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.MolarHeatCapacity.SiUnit.get -> Gu.Units.MolarHeatCapacityUnit
Gu.Units.MolarHeatCapacity.SiValue.get -> double
Gu.Units.MolarHeatCapacity.ToString(Gu.Units.MolarHeatCapacityUnit unit) -> string!
Gu.Units.MolarHeatCapacity.ToString(Gu.Units.MolarHeatCapacityUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.MolarHeatCapacity.ToString(Gu.Units.MolarHeatCapacityUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MolarHeatCapacity.ToString(Gu.Units.MolarHeatCapacityUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MolarHeatCapacity.ToString(string! format) -> string!
Gu.Units.MolarHeatCapacity.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.MolarHeatCapacity.ToString(string! valueFormat, Gu.Units.MolarHeatCapacityUnit unit) -> string!
Gu.Units.MolarHeatCapacity.ToString(string! valueFormat, Gu.Units.MolarHeatCapacityUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.MolarHeatCapacity.ToString(string! valueFormat, Gu.Units.MolarHeatCapacityUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MolarHeatCapacity.ToString(string! valueFormat, Gu.Units.MolarHeatCapacityUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MolarHeatCapacity.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.MolarHeatCapacity.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MolarHeatCapacity.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.MolarHeatCapacity.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.MolarHeatCapacityTypeConverter
Gu.Units.MolarHeatCapacityTypeConverter.MolarHeatCapacityTypeConverter() -> void
Gu.Units.MolarHeatCapacityUnit
Gu.Units.MolarHeatCapacityUnit.CreateQuantity(double value) -> Gu.Units.MolarHeatCapacity
Gu.Units.MolarHeatCapacityUnit.Equals(Gu.Units.MolarHeatCapacityUnit other) -> bool
Gu.Units.MolarHeatCapacityUnit.FromSiUnit(double joulesPerKelvinMole) -> double
Gu.Units.MolarHeatCapacityUnit.GetScalarValue(Gu.Units.MolarHeatCapacity quantity) -> double
Gu.Units.MolarHeatCapacityUnit.MolarHeatCapacityUnit() -> void
Gu.Units.MolarHeatCapacityUnit.MolarHeatCapacityUnit(System.Func<double, double>! toJoulesPerKelvinMole, System.Func<double, double>! fromJoulesPerKelvinMole, string! symbol) -> void
Gu.Units.MolarHeatCapacityUnit.SiUnit.get -> Gu.Units.MolarHeatCapacityUnit
Gu.Units.MolarHeatCapacityUnit.Symbol.get -> string!
Gu.Units.MolarHeatCapacityUnit.ToSiUnit(double value) -> double
Gu.Units.MolarHeatCapacityUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.MolarHeatCapacityUnit.ToString(string! format) -> string!
Gu.Units.MolarHeatCapacityUnitTypeConverter
Gu.Units.MolarHeatCapacityUnitTypeConverter.MolarHeatCapacityUnitTypeConverter() -> void
Gu.Units.MolarMass
Gu.Units.MolarMass.CompareTo(Gu.Units.MolarMass quantity) -> int
Gu.Units.MolarMass.Equals(Gu.Units.MolarMass other) -> bool
Gu.Units.MolarMass.Equals(Gu.Units.MolarMass other, Gu.Units.MolarMass tolerance) -> bool
Gu.Units.MolarMass.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.MolarMass.GetValue(Gu.Units.MolarMassUnit unit) -> double
Gu.Units.MolarMass.GramsPerMole.get -> double
Gu.Units.MolarMass.KilogramsPerMole.get -> double
Gu.Units.MolarMass.MolarMass() -> void
Gu.Units.MolarMass.MolarMass(double value, Gu.Units.MolarMassUnit unit) -> void
Gu.Units.MolarMass.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.MolarMass.SiUnit.get -> Gu.Units.MolarMassUnit
Gu.Units.MolarMass.SiValue.get -> double
Gu.Units.MolarMass.ToString(Gu.Units.MolarMassUnit unit) -> string!
Gu.Units.MolarMass.ToString(Gu.Units.MolarMassUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.MolarMass.ToString(Gu.Units.MolarMassUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MolarMass.ToString(Gu.Units.MolarMassUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MolarMass.ToString(string! format) -> string!
Gu.Units.MolarMass.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.MolarMass.ToString(string! valueFormat, Gu.Units.MolarMassUnit unit) -> string!
Gu.Units.MolarMass.ToString(string! valueFormat, Gu.Units.MolarMassUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.MolarMass.ToString(string! valueFormat, Gu.Units.MolarMassUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MolarMass.ToString(string! valueFormat, Gu.Units.MolarMassUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MolarMass.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.MolarMass.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.MolarMass.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.MolarMass.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.MolarMassTypeConverter
Gu.Units.MolarMassTypeConverter.MolarMassTypeConverter() -> void
Gu.Units.MolarMassUnit
Gu.Units.MolarMassUnit.CreateQuantity(double value) -> Gu.Units.MolarMass
Gu.Units.MolarMassUnit.Equals(Gu.Units.MolarMassUnit other) -> bool
Gu.Units.MolarMassUnit.FromSiUnit(double kilogramsPerMole) -> double
Gu.Units.MolarMassUnit.GetScalarValue(Gu.Units.MolarMass quantity) -> double
Gu.Units.MolarMassUnit.MolarMassUnit() -> void
Gu.Units.MolarMassUnit.MolarMassUnit(System.Func<double, double>! toKilogramsPerMole, System.Func<double, double>! fromKilogramsPerMole, string! symbol) -> void
Gu.Units.MolarMassUnit.SiUnit.get -> Gu.Units.MolarMassUnit
Gu.Units.MolarMassUnit.Symbol.get -> string!
Gu.Units.MolarMassUnit.ToSiUnit(double value) -> double
Gu.Units.MolarMassUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.MolarMassUnit.ToString(string! format) -> string!
Gu.Units.MolarMassUnitTypeConverter
Gu.Units.MolarMassUnitTypeConverter.MolarMassUnitTypeConverter() -> void
Gu.Units.Momentum
Gu.Units.Momentum.CompareTo(Gu.Units.Momentum quantity) -> int
Gu.Units.Momentum.Equals(Gu.Units.Momentum other) -> bool
Gu.Units.Momentum.Equals(Gu.Units.Momentum other, Gu.Units.Momentum tolerance) -> bool
Gu.Units.Momentum.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Momentum.GetValue(Gu.Units.MomentumUnit unit) -> double
Gu.Units.Momentum.Momentum() -> void
Gu.Units.Momentum.Momentum(double value, Gu.Units.MomentumUnit unit) -> void
Gu.Units.Momentum.NewtonSecond.get -> double
Gu.Units.Momentum.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Momentum.SiUnit.get -> Gu.Units.MomentumUnit
Gu.Units.Momentum.SiValue.get -> double
Gu.Units.Momentum.ToString(Gu.Units.MomentumUnit unit) -> string!
Gu.Units.Momentum.ToString(Gu.Units.MomentumUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Momentum.ToString(Gu.Units.MomentumUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Momentum.ToString(Gu.Units.MomentumUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Momentum.ToString(string! format) -> string!
Gu.Units.Momentum.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Momentum.ToString(string! valueFormat, Gu.Units.MomentumUnit unit) -> string!
Gu.Units.Momentum.ToString(string! valueFormat, Gu.Units.MomentumUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Momentum.ToString(string! valueFormat, Gu.Units.MomentumUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Momentum.ToString(string! valueFormat, Gu.Units.MomentumUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Momentum.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Momentum.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Momentum.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Momentum.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.MomentumTypeConverter
Gu.Units.MomentumTypeConverter.MomentumTypeConverter() -> void
Gu.Units.MomentumUnit
Gu.Units.MomentumUnit.CreateQuantity(double value) -> Gu.Units.Momentum
Gu.Units.MomentumUnit.Equals(Gu.Units.MomentumUnit other) -> bool
Gu.Units.MomentumUnit.FromSiUnit(double newtonSecond) -> double
Gu.Units.MomentumUnit.GetScalarValue(Gu.Units.Momentum quantity) -> double
Gu.Units.MomentumUnit.MomentumUnit() -> void
Gu.Units.MomentumUnit.MomentumUnit(System.Func<double, double>! toNewtonSecond, System.Func<double, double>! fromNewtonSecond, string! symbol) -> void
Gu.Units.MomentumUnit.SiUnit.get -> Gu.Units.MomentumUnit
Gu.Units.MomentumUnit.Symbol.get -> string!
Gu.Units.MomentumUnit.ToSiUnit(double value) -> double
Gu.Units.MomentumUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.MomentumUnit.ToString(string! format) -> string!
Gu.Units.MomentumUnitTypeConverter
Gu.Units.MomentumUnitTypeConverter.MomentumUnitTypeConverter() -> void
Gu.Units.Power
Gu.Units.Power.CompareTo(Gu.Units.Power quantity) -> int
Gu.Units.Power.Equals(Gu.Units.Power other) -> bool
Gu.Units.Power.Equals(Gu.Units.Power other, Gu.Units.Power tolerance) -> bool
Gu.Units.Power.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Power.GetValue(Gu.Units.PowerUnit unit) -> double
Gu.Units.Power.Gigawatts.get -> double
Gu.Units.Power.Kilowatts.get -> double
Gu.Units.Power.Megawatts.get -> double
Gu.Units.Power.Microwatts.get -> double
Gu.Units.Power.Milliwatts.get -> double
Gu.Units.Power.Nanowatts.get -> double
Gu.Units.Power.Power() -> void
Gu.Units.Power.Power(double value, Gu.Units.PowerUnit unit) -> void
Gu.Units.Power.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Power.SiUnit.get -> Gu.Units.PowerUnit
Gu.Units.Power.SiValue.get -> double
Gu.Units.Power.ToString(Gu.Units.PowerUnit unit) -> string!
Gu.Units.Power.ToString(Gu.Units.PowerUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Power.ToString(Gu.Units.PowerUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Power.ToString(Gu.Units.PowerUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Power.ToString(string! format) -> string!
Gu.Units.Power.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Power.ToString(string! valueFormat, Gu.Units.PowerUnit unit) -> string!
Gu.Units.Power.ToString(string! valueFormat, Gu.Units.PowerUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Power.ToString(string! valueFormat, Gu.Units.PowerUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Power.ToString(string! valueFormat, Gu.Units.PowerUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Power.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Power.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Power.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Power.Watts.get -> double
Gu.Units.Power.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.PowerTypeConverter
Gu.Units.PowerTypeConverter.PowerTypeConverter() -> void
Gu.Units.PowerUnit
Gu.Units.PowerUnit.CreateQuantity(double value) -> Gu.Units.Power
Gu.Units.PowerUnit.Equals(Gu.Units.PowerUnit other) -> bool
Gu.Units.PowerUnit.FromSiUnit(double watts) -> double
Gu.Units.PowerUnit.GetScalarValue(Gu.Units.Power quantity) -> double
Gu.Units.PowerUnit.PowerUnit() -> void
Gu.Units.PowerUnit.PowerUnit(System.Func<double, double>! toWatts, System.Func<double, double>! fromWatts, string! symbol) -> void
Gu.Units.PowerUnit.SiUnit.get -> Gu.Units.PowerUnit
Gu.Units.PowerUnit.Symbol.get -> string!
Gu.Units.PowerUnit.ToSiUnit(double value) -> double
Gu.Units.PowerUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.PowerUnit.ToString(string! format) -> string!
Gu.Units.PowerUnitTypeConverter
Gu.Units.PowerUnitTypeConverter.PowerUnitTypeConverter() -> void
Gu.Units.Pressure
Gu.Units.Pressure.Bars.get -> double
Gu.Units.Pressure.CompareTo(Gu.Units.Pressure quantity) -> int
Gu.Units.Pressure.Equals(Gu.Units.Pressure other) -> bool
Gu.Units.Pressure.Equals(Gu.Units.Pressure other, Gu.Units.Pressure tolerance) -> bool
Gu.Units.Pressure.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Pressure.GetValue(Gu.Units.PressureUnit unit) -> double
Gu.Units.Pressure.Gigapascals.get -> double
Gu.Units.Pressure.KilonewtonsPerSquareMillimetre.get -> double
Gu.Units.Pressure.Kilopascals.get -> double
Gu.Units.Pressure.Megapascals.get -> double
Gu.Units.Pressure.Micropascals.get -> double
Gu.Units.Pressure.Millibars.get -> double
Gu.Units.Pressure.Millipascals.get -> double
Gu.Units.Pressure.Nanopascals.get -> double
Gu.Units.Pressure.NewtonsPerSquareMetre.get -> double
Gu.Units.Pressure.NewtonsPerSquareMillimetre.get -> double
Gu.Units.Pressure.Pascals.get -> double
Gu.Units.Pressure.Pressure() -> void
Gu.Units.Pressure.Pressure(double value, Gu.Units.PressureUnit unit) -> void
Gu.Units.Pressure.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Pressure.SiUnit.get -> Gu.Units.PressureUnit
Gu.Units.Pressure.SiValue.get -> double
Gu.Units.Pressure.ToString(Gu.Units.PressureUnit unit) -> string!
Gu.Units.Pressure.ToString(Gu.Units.PressureUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Pressure.ToString(Gu.Units.PressureUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Pressure.ToString(Gu.Units.PressureUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Pressure.ToString(string! format) -> string!
Gu.Units.Pressure.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Pressure.ToString(string! valueFormat, Gu.Units.PressureUnit unit) -> string!
Gu.Units.Pressure.ToString(string! valueFormat, Gu.Units.PressureUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Pressure.ToString(string! valueFormat, Gu.Units.PressureUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Pressure.ToString(string! valueFormat, Gu.Units.PressureUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Pressure.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Pressure.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Pressure.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Pressure.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.PressureTypeConverter
Gu.Units.PressureTypeConverter.PressureTypeConverter() -> void
Gu.Units.PressureUnit
Gu.Units.PressureUnit.CreateQuantity(double value) -> Gu.Units.Pressure
Gu.Units.PressureUnit.Equals(Gu.Units.PressureUnit other) -> bool
Gu.Units.PressureUnit.FromSiUnit(double pascals) -> double
Gu.Units.PressureUnit.GetScalarValue(Gu.Units.Pressure quantity) -> double
Gu.Units.PressureUnit.PressureUnit() -> void
Gu.Units.PressureUnit.PressureUnit(System.Func<double, double>! toPascals, System.Func<double, double>! fromPascals, string! symbol) -> void
Gu.Units.PressureUnit.SiUnit.get -> Gu.Units.PressureUnit
Gu.Units.PressureUnit.Symbol.get -> string!
Gu.Units.PressureUnit.ToSiUnit(double value) -> double
Gu.Units.PressureUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.PressureUnit.ToString(string! format) -> string!
Gu.Units.PressureUnitTypeConverter
Gu.Units.PressureUnitTypeConverter.PressureUnitTypeConverter() -> void
Gu.Units.Resistance
Gu.Units.Resistance.CompareTo(Gu.Units.Resistance quantity) -> int
Gu.Units.Resistance.Equals(Gu.Units.Resistance other) -> bool
Gu.Units.Resistance.Equals(Gu.Units.Resistance other, Gu.Units.Resistance tolerance) -> bool
Gu.Units.Resistance.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Resistance.GetValue(Gu.Units.ResistanceUnit unit) -> double
Gu.Units.Resistance.Kiloohms.get -> double
Gu.Units.Resistance.Megaohms.get -> double
Gu.Units.Resistance.Microohms.get -> double
Gu.Units.Resistance.Milliohms.get -> double
Gu.Units.Resistance.Ohms.get -> double
Gu.Units.Resistance.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Resistance.Resistance() -> void
Gu.Units.Resistance.Resistance(double value, Gu.Units.ResistanceUnit unit) -> void
Gu.Units.Resistance.SiUnit.get -> Gu.Units.ResistanceUnit
Gu.Units.Resistance.SiValue.get -> double
Gu.Units.Resistance.ToString(Gu.Units.ResistanceUnit unit) -> string!
Gu.Units.Resistance.ToString(Gu.Units.ResistanceUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Resistance.ToString(Gu.Units.ResistanceUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Resistance.ToString(Gu.Units.ResistanceUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Resistance.ToString(string! format) -> string!
Gu.Units.Resistance.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Resistance.ToString(string! valueFormat, Gu.Units.ResistanceUnit unit) -> string!
Gu.Units.Resistance.ToString(string! valueFormat, Gu.Units.ResistanceUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Resistance.ToString(string! valueFormat, Gu.Units.ResistanceUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Resistance.ToString(string! valueFormat, Gu.Units.ResistanceUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Resistance.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Resistance.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Resistance.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Resistance.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.ResistanceTypeConverter
Gu.Units.ResistanceTypeConverter.ResistanceTypeConverter() -> void
Gu.Units.ResistanceUnit
Gu.Units.ResistanceUnit.CreateQuantity(double value) -> Gu.Units.Resistance
Gu.Units.ResistanceUnit.Equals(Gu.Units.ResistanceUnit other) -> bool
Gu.Units.ResistanceUnit.FromSiUnit(double ohms) -> double
Gu.Units.ResistanceUnit.GetScalarValue(Gu.Units.Resistance quantity) -> double
Gu.Units.ResistanceUnit.ResistanceUnit() -> void
Gu.Units.ResistanceUnit.ResistanceUnit(System.Func<double, double>! toOhms, System.Func<double, double>! fromOhms, string! symbol) -> void
Gu.Units.ResistanceUnit.SiUnit.get -> Gu.Units.ResistanceUnit
Gu.Units.ResistanceUnit.Symbol.get -> string!
Gu.Units.ResistanceUnit.ToSiUnit(double value) -> double
Gu.Units.ResistanceUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.ResistanceUnit.ToString(string! format) -> string!
Gu.Units.ResistanceUnitTypeConverter
Gu.Units.ResistanceUnitTypeConverter.ResistanceUnitTypeConverter() -> void
Gu.Units.SolidAngle
Gu.Units.SolidAngle.CompareTo(Gu.Units.SolidAngle quantity) -> int
Gu.Units.SolidAngle.Equals(Gu.Units.SolidAngle other) -> bool
Gu.Units.SolidAngle.Equals(Gu.Units.SolidAngle other, Gu.Units.SolidAngle tolerance) -> bool
Gu.Units.SolidAngle.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.SolidAngle.GetValue(Gu.Units.SolidAngleUnit unit) -> double
Gu.Units.SolidAngle.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.SolidAngle.SiUnit.get -> Gu.Units.SolidAngleUnit
Gu.Units.SolidAngle.SiValue.get -> double
Gu.Units.SolidAngle.SolidAngle() -> void
Gu.Units.SolidAngle.SolidAngle(double value, Gu.Units.SolidAngleUnit unit) -> void
Gu.Units.SolidAngle.Steradians.get -> double
Gu.Units.SolidAngle.ToString(Gu.Units.SolidAngleUnit unit) -> string!
Gu.Units.SolidAngle.ToString(Gu.Units.SolidAngleUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.SolidAngle.ToString(Gu.Units.SolidAngleUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.SolidAngle.ToString(Gu.Units.SolidAngleUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.SolidAngle.ToString(string! format) -> string!
Gu.Units.SolidAngle.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.SolidAngle.ToString(string! valueFormat, Gu.Units.SolidAngleUnit unit) -> string!
Gu.Units.SolidAngle.ToString(string! valueFormat, Gu.Units.SolidAngleUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.SolidAngle.ToString(string! valueFormat, Gu.Units.SolidAngleUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.SolidAngle.ToString(string! valueFormat, Gu.Units.SolidAngleUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.SolidAngle.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.SolidAngle.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.SolidAngle.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.SolidAngle.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.SolidAngleTypeConverter
Gu.Units.SolidAngleTypeConverter.SolidAngleTypeConverter() -> void
Gu.Units.SolidAngleUnit
Gu.Units.SolidAngleUnit.CreateQuantity(double value) -> Gu.Units.SolidAngle
Gu.Units.SolidAngleUnit.Equals(Gu.Units.SolidAngleUnit other) -> bool
Gu.Units.SolidAngleUnit.FromSiUnit(double steradians) -> double
Gu.Units.SolidAngleUnit.GetScalarValue(Gu.Units.SolidAngle quantity) -> double
Gu.Units.SolidAngleUnit.SiUnit.get -> Gu.Units.SolidAngleUnit
Gu.Units.SolidAngleUnit.SolidAngleUnit() -> void
Gu.Units.SolidAngleUnit.SolidAngleUnit(System.Func<double, double>! toSteradians, System.Func<double, double>! fromSteradians, string! symbol) -> void
Gu.Units.SolidAngleUnit.Symbol.get -> string!
Gu.Units.SolidAngleUnit.ToSiUnit(double value) -> double
Gu.Units.SolidAngleUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.SolidAngleUnit.ToString(string! format) -> string!
Gu.Units.SolidAngleUnitTypeConverter
Gu.Units.SolidAngleUnitTypeConverter.SolidAngleUnitTypeConverter() -> void
Gu.Units.SpecificEnergy
Gu.Units.SpecificEnergy.CompareTo(Gu.Units.SpecificEnergy quantity) -> int
Gu.Units.SpecificEnergy.Equals(Gu.Units.SpecificEnergy other) -> bool
Gu.Units.SpecificEnergy.Equals(Gu.Units.SpecificEnergy other, Gu.Units.SpecificEnergy tolerance) -> bool
Gu.Units.SpecificEnergy.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.SpecificEnergy.GetValue(Gu.Units.SpecificEnergyUnit unit) -> double
Gu.Units.SpecificEnergy.JoulesPerKilogram.get -> double
Gu.Units.SpecificEnergy.KilojoulesPerKilogram.get -> double
Gu.Units.SpecificEnergy.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.SpecificEnergy.SiUnit.get -> Gu.Units.SpecificEnergyUnit
Gu.Units.SpecificEnergy.SiValue.get -> double
Gu.Units.SpecificEnergy.SpecificEnergy() -> void
Gu.Units.SpecificEnergy.SpecificEnergy(double value, Gu.Units.SpecificEnergyUnit unit) -> void
Gu.Units.SpecificEnergy.ToString(Gu.Units.SpecificEnergyUnit unit) -> string!
Gu.Units.SpecificEnergy.ToString(Gu.Units.SpecificEnergyUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.SpecificEnergy.ToString(Gu.Units.SpecificEnergyUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.SpecificEnergy.ToString(Gu.Units.SpecificEnergyUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.SpecificEnergy.ToString(string! format) -> string!
Gu.Units.SpecificEnergy.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.SpecificEnergy.ToString(string! valueFormat, Gu.Units.SpecificEnergyUnit unit) -> string!
Gu.Units.SpecificEnergy.ToString(string! valueFormat, Gu.Units.SpecificEnergyUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.SpecificEnergy.ToString(string! valueFormat, Gu.Units.SpecificEnergyUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.SpecificEnergy.ToString(string! valueFormat, Gu.Units.SpecificEnergyUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.SpecificEnergy.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.SpecificEnergy.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.SpecificEnergy.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.SpecificEnergy.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.SpecificEnergyTypeConverter
Gu.Units.SpecificEnergyTypeConverter.SpecificEnergyTypeConverter() -> void
Gu.Units.SpecificEnergyUnit
Gu.Units.SpecificEnergyUnit.CreateQuantity(double value) -> Gu.Units.SpecificEnergy
Gu.Units.SpecificEnergyUnit.Equals(Gu.Units.SpecificEnergyUnit other) -> bool
Gu.Units.SpecificEnergyUnit.FromSiUnit(double joulesPerKilogram) -> double
Gu.Units.SpecificEnergyUnit.GetScalarValue(Gu.Units.SpecificEnergy quantity) -> double
Gu.Units.SpecificEnergyUnit.SiUnit.get -> Gu.Units.SpecificEnergyUnit
Gu.Units.SpecificEnergyUnit.SpecificEnergyUnit() -> void
Gu.Units.SpecificEnergyUnit.SpecificEnergyUnit(System.Func<double, double>! toJoulesPerKilogram, System.Func<double, double>! fromJoulesPerKilogram, string! symbol) -> void
Gu.Units.SpecificEnergyUnit.Symbol.get -> string!
Gu.Units.SpecificEnergyUnit.ToSiUnit(double value) -> double
Gu.Units.SpecificEnergyUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.SpecificEnergyUnit.ToString(string! format) -> string!
Gu.Units.SpecificEnergyUnitTypeConverter
Gu.Units.SpecificEnergyUnitTypeConverter.SpecificEnergyUnitTypeConverter() -> void
Gu.Units.SpecificVolume
Gu.Units.SpecificVolume.CompareTo(Gu.Units.SpecificVolume quantity) -> int
Gu.Units.SpecificVolume.CubicCentimetresPerGram.get -> double
Gu.Units.SpecificVolume.CubicMetresPerGram.get -> double
Gu.Units.SpecificVolume.CubicMetresPerKilogram.get -> double
Gu.Units.SpecificVolume.Equals(Gu.Units.SpecificVolume other) -> bool
Gu.Units.SpecificVolume.Equals(Gu.Units.SpecificVolume other, Gu.Units.SpecificVolume tolerance) -> bool
Gu.Units.SpecificVolume.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.SpecificVolume.GetValue(Gu.Units.SpecificVolumeUnit unit) -> double
Gu.Units.SpecificVolume.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.SpecificVolume.SiUnit.get -> Gu.Units.SpecificVolumeUnit
Gu.Units.SpecificVolume.SiValue.get -> double
Gu.Units.SpecificVolume.SpecificVolume() -> void
Gu.Units.SpecificVolume.SpecificVolume(double value, Gu.Units.SpecificVolumeUnit unit) -> void
Gu.Units.SpecificVolume.ToString(Gu.Units.SpecificVolumeUnit unit) -> string!
Gu.Units.SpecificVolume.ToString(Gu.Units.SpecificVolumeUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.SpecificVolume.ToString(Gu.Units.SpecificVolumeUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.SpecificVolume.ToString(Gu.Units.SpecificVolumeUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.SpecificVolume.ToString(string! format) -> string!
Gu.Units.SpecificVolume.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.SpecificVolume.ToString(string! valueFormat, Gu.Units.SpecificVolumeUnit unit) -> string!
Gu.Units.SpecificVolume.ToString(string! valueFormat, Gu.Units.SpecificVolumeUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.SpecificVolume.ToString(string! valueFormat, Gu.Units.SpecificVolumeUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.SpecificVolume.ToString(string! valueFormat, Gu.Units.SpecificVolumeUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.SpecificVolume.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.SpecificVolume.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.SpecificVolume.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.SpecificVolume.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.SpecificVolumeTypeConverter
Gu.Units.SpecificVolumeTypeConverter.SpecificVolumeTypeConverter() -> void
Gu.Units.SpecificVolumeUnit
Gu.Units.SpecificVolumeUnit.CreateQuantity(double value) -> Gu.Units.SpecificVolume
Gu.Units.SpecificVolumeUnit.Equals(Gu.Units.SpecificVolumeUnit other) -> bool
Gu.Units.SpecificVolumeUnit.FromSiUnit(double cubicMetresPerKilogram) -> double
Gu.Units.SpecificVolumeUnit.GetScalarValue(Gu.Units.SpecificVolume quantity) -> double
Gu.Units.SpecificVolumeUnit.SiUnit.get -> Gu.Units.SpecificVolumeUnit
Gu.Units.SpecificVolumeUnit.SpecificVolumeUnit() -> void
Gu.Units.SpecificVolumeUnit.SpecificVolumeUnit(System.Func<double, double>! toCubicMetresPerKilogram, System.Func<double, double>! fromCubicMetresPerKilogram, string! symbol) -> void
Gu.Units.SpecificVolumeUnit.Symbol.get -> string!
Gu.Units.SpecificVolumeUnit.ToSiUnit(double value) -> double
Gu.Units.SpecificVolumeUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.SpecificVolumeUnit.ToString(string! format) -> string!
Gu.Units.SpecificVolumeUnitTypeConverter
Gu.Units.SpecificVolumeUnitTypeConverter.SpecificVolumeUnitTypeConverter() -> void
Gu.Units.Speed
Gu.Units.Speed.CentimetresPerHour.get -> double
Gu.Units.Speed.CentimetresPerMinute.get -> double
Gu.Units.Speed.CentimetresPerSecond.get -> double
Gu.Units.Speed.CompareTo(Gu.Units.Speed quantity) -> int
Gu.Units.Speed.Equals(Gu.Units.Speed other) -> bool
Gu.Units.Speed.Equals(Gu.Units.Speed other, Gu.Units.Speed tolerance) -> bool
Gu.Units.Speed.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Speed.GetValue(Gu.Units.SpeedUnit unit) -> double
Gu.Units.Speed.KilometresPerHour.get -> double
Gu.Units.Speed.MetresPerHour.get -> double
Gu.Units.Speed.MetresPerMinute.get -> double
Gu.Units.Speed.MetresPerSecond.get -> double
Gu.Units.Speed.MillimetresPerHour.get -> double
Gu.Units.Speed.MillimetresPerMinute.get -> double
Gu.Units.Speed.MillimetresPerSecond.get -> double
Gu.Units.Speed.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Speed.SiUnit.get -> Gu.Units.SpeedUnit
Gu.Units.Speed.SiValue.get -> double
Gu.Units.Speed.Speed() -> void
Gu.Units.Speed.Speed(double value, Gu.Units.SpeedUnit unit) -> void
Gu.Units.Speed.ToString(Gu.Units.SpeedUnit unit) -> string!
Gu.Units.Speed.ToString(Gu.Units.SpeedUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Speed.ToString(Gu.Units.SpeedUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Speed.ToString(Gu.Units.SpeedUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Speed.ToString(string! format) -> string!
Gu.Units.Speed.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Speed.ToString(string! valueFormat, Gu.Units.SpeedUnit unit) -> string!
Gu.Units.Speed.ToString(string! valueFormat, Gu.Units.SpeedUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Speed.ToString(string! valueFormat, Gu.Units.SpeedUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Speed.ToString(string! valueFormat, Gu.Units.SpeedUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Speed.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Speed.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Speed.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Speed.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.SpeedTypeConverter
Gu.Units.SpeedTypeConverter.SpeedTypeConverter() -> void
Gu.Units.SpeedUnit
Gu.Units.SpeedUnit.CreateQuantity(double value) -> Gu.Units.Speed
Gu.Units.SpeedUnit.Equals(Gu.Units.SpeedUnit other) -> bool
Gu.Units.SpeedUnit.FromSiUnit(double metresPerSecond) -> double
Gu.Units.SpeedUnit.GetScalarValue(Gu.Units.Speed quantity) -> double
Gu.Units.SpeedUnit.SiUnit.get -> Gu.Units.SpeedUnit
Gu.Units.SpeedUnit.SpeedUnit() -> void
Gu.Units.SpeedUnit.SpeedUnit(System.Func<double, double>! toMetresPerSecond, System.Func<double, double>! fromMetresPerSecond, string! symbol) -> void
Gu.Units.SpeedUnit.Symbol.get -> string!
Gu.Units.SpeedUnit.ToSiUnit(double value) -> double
Gu.Units.SpeedUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.SpeedUnit.ToString(string! format) -> string!
Gu.Units.SpeedUnitTypeConverter
Gu.Units.SpeedUnitTypeConverter.SpeedUnitTypeConverter() -> void
Gu.Units.Stiffness
Gu.Units.Stiffness.CompareTo(Gu.Units.Stiffness quantity) -> int
Gu.Units.Stiffness.Equals(Gu.Units.Stiffness other) -> bool
Gu.Units.Stiffness.Equals(Gu.Units.Stiffness other, Gu.Units.Stiffness tolerance) -> bool
Gu.Units.Stiffness.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Stiffness.GetValue(Gu.Units.StiffnessUnit unit) -> double
Gu.Units.Stiffness.GiganewtonsPerMicrometre.get -> double
Gu.Units.Stiffness.GiganewtonsPerMillimetre.get -> double
Gu.Units.Stiffness.KilonewtonsPerMicrometre.get -> double
Gu.Units.Stiffness.KilonewtonsPerMillimetre.get -> double
Gu.Units.Stiffness.KilonewtonsPerNanometre.get -> double
Gu.Units.Stiffness.MeganewtonsPerMicrometre.get -> double
Gu.Units.Stiffness.MeganewtonsPerMillimetre.get -> double
Gu.Units.Stiffness.MeganewtonsPerNanometre.get -> double
Gu.Units.Stiffness.NewtonsPerMetre.get -> double
Gu.Units.Stiffness.NewtonsPerMicrometre.get -> double
Gu.Units.Stiffness.NewtonsPerMillimetre.get -> double
Gu.Units.Stiffness.NewtonsPerNanometre.get -> double
Gu.Units.Stiffness.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Stiffness.SiUnit.get -> Gu.Units.StiffnessUnit
Gu.Units.Stiffness.SiValue.get -> double
Gu.Units.Stiffness.Stiffness() -> void
Gu.Units.Stiffness.Stiffness(double value, Gu.Units.StiffnessUnit unit) -> void
Gu.Units.Stiffness.ToString(Gu.Units.StiffnessUnit unit) -> string!
Gu.Units.Stiffness.ToString(Gu.Units.StiffnessUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Stiffness.ToString(Gu.Units.StiffnessUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Stiffness.ToString(Gu.Units.StiffnessUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Stiffness.ToString(string! format) -> string!
Gu.Units.Stiffness.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Stiffness.ToString(string! valueFormat, Gu.Units.StiffnessUnit unit) -> string!
Gu.Units.Stiffness.ToString(string! valueFormat, Gu.Units.StiffnessUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Stiffness.ToString(string! valueFormat, Gu.Units.StiffnessUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Stiffness.ToString(string! valueFormat, Gu.Units.StiffnessUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Stiffness.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Stiffness.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Stiffness.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Stiffness.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.StiffnessTypeConverter
Gu.Units.StiffnessTypeConverter.StiffnessTypeConverter() -> void
Gu.Units.StiffnessUnit
Gu.Units.StiffnessUnit.CreateQuantity(double value) -> Gu.Units.Stiffness
Gu.Units.StiffnessUnit.Equals(Gu.Units.StiffnessUnit other) -> bool
Gu.Units.StiffnessUnit.FromSiUnit(double newtonsPerMetre) -> double
Gu.Units.StiffnessUnit.GetScalarValue(Gu.Units.Stiffness quantity) -> double
Gu.Units.StiffnessUnit.SiUnit.get -> Gu.Units.StiffnessUnit
Gu.Units.StiffnessUnit.StiffnessUnit() -> void
Gu.Units.StiffnessUnit.StiffnessUnit(System.Func<double, double>! toNewtonsPerMetre, System.Func<double, double>! fromNewtonsPerMetre, string! symbol) -> void
Gu.Units.StiffnessUnit.Symbol.get -> string!
Gu.Units.StiffnessUnit.ToSiUnit(double value) -> double
Gu.Units.StiffnessUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.StiffnessUnit.ToString(string! format) -> string!
Gu.Units.StiffnessUnitTypeConverter
Gu.Units.StiffnessUnitTypeConverter.StiffnessUnitTypeConverter() -> void
Gu.Units.SuperScript
Gu.Units.SymbolFormat
Gu.Units.SymbolFormat.Default = 0 -> Gu.Units.SymbolFormat
Gu.Units.SymbolFormat.FractionHatPowers = 2 -> Gu.Units.SymbolFormat
Gu.Units.SymbolFormat.FractionSuperScript = 4 -> Gu.Units.SymbolFormat
Gu.Units.SymbolFormat.SignedHatPowers = 1 -> Gu.Units.SymbolFormat
Gu.Units.SymbolFormat.SignedSuperScript = 3 -> Gu.Units.SymbolFormat
Gu.Units.Temperature
Gu.Units.Temperature.Celsius.get -> double
Gu.Units.Temperature.CompareTo(Gu.Units.Temperature quantity) -> int
Gu.Units.Temperature.Equals(Gu.Units.Temperature other) -> bool
Gu.Units.Temperature.Equals(Gu.Units.Temperature other, Gu.Units.Temperature tolerance) -> bool
Gu.Units.Temperature.Fahrenheit.get -> double
Gu.Units.Temperature.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Temperature.GetValue(Gu.Units.TemperatureUnit unit) -> double
Gu.Units.Temperature.Kelvin.get -> double
Gu.Units.Temperature.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Temperature.SiUnit.get -> Gu.Units.TemperatureUnit
Gu.Units.Temperature.SiValue.get -> double
Gu.Units.Temperature.Temperature() -> void
Gu.Units.Temperature.Temperature(double value, Gu.Units.TemperatureUnit unit) -> void
Gu.Units.Temperature.ToString(Gu.Units.TemperatureUnit unit) -> string!
Gu.Units.Temperature.ToString(Gu.Units.TemperatureUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Temperature.ToString(Gu.Units.TemperatureUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Temperature.ToString(Gu.Units.TemperatureUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Temperature.ToString(string! format) -> string!
Gu.Units.Temperature.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Temperature.ToString(string! valueFormat, Gu.Units.TemperatureUnit unit) -> string!
Gu.Units.Temperature.ToString(string! valueFormat, Gu.Units.TemperatureUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Temperature.ToString(string! valueFormat, Gu.Units.TemperatureUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Temperature.ToString(string! valueFormat, Gu.Units.TemperatureUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Temperature.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Temperature.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Temperature.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Temperature.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.TemperatureTypeConverter
Gu.Units.TemperatureTypeConverter.TemperatureTypeConverter() -> void
Gu.Units.TemperatureUnit
Gu.Units.TemperatureUnit.CreateQuantity(double value) -> Gu.Units.Temperature
Gu.Units.TemperatureUnit.Equals(Gu.Units.TemperatureUnit other) -> bool
Gu.Units.TemperatureUnit.FromSiUnit(double kelvin) -> double
Gu.Units.TemperatureUnit.GetScalarValue(Gu.Units.Temperature quantity) -> double
Gu.Units.TemperatureUnit.SiUnit.get -> Gu.Units.TemperatureUnit
Gu.Units.TemperatureUnit.Symbol.get -> string!
Gu.Units.TemperatureUnit.TemperatureUnit() -> void
Gu.Units.TemperatureUnit.TemperatureUnit(System.Func<double, double>! toKelvin, System.Func<double, double>! fromKelvin, string! symbol) -> void
Gu.Units.TemperatureUnit.ToSiUnit(double value) -> double
Gu.Units.TemperatureUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.TemperatureUnit.ToString(string! format) -> string!
Gu.Units.TemperatureUnitTypeConverter
Gu.Units.TemperatureUnitTypeConverter.TemperatureUnitTypeConverter() -> void
Gu.Units.Time
Gu.Units.Time.CompareTo(Gu.Units.Time quantity) -> int
Gu.Units.Time.Days.get -> double
Gu.Units.Time.Equals(Gu.Units.Time other) -> bool
Gu.Units.Time.Equals(Gu.Units.Time other, Gu.Units.Time tolerance) -> bool
Gu.Units.Time.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Time.GetValue(Gu.Units.TimeUnit unit) -> double
Gu.Units.Time.Hours.get -> double
Gu.Units.Time.Microseconds.get -> double
Gu.Units.Time.Milliseconds.get -> double
Gu.Units.Time.Minutes.get -> double
Gu.Units.Time.Nanoseconds.get -> double
Gu.Units.Time.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Time.Seconds.get -> double
Gu.Units.Time.SiUnit.get -> Gu.Units.TimeUnit
Gu.Units.Time.SiValue.get -> double
Gu.Units.Time.Time() -> void
Gu.Units.Time.Time(double value, Gu.Units.TimeUnit unit) -> void
Gu.Units.Time.ToString(Gu.Units.TimeUnit unit) -> string!
Gu.Units.Time.ToString(Gu.Units.TimeUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Time.ToString(Gu.Units.TimeUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Time.ToString(Gu.Units.TimeUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Time.ToString(string! format) -> string!
Gu.Units.Time.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Time.ToString(string! valueFormat, Gu.Units.TimeUnit unit) -> string!
Gu.Units.Time.ToString(string! valueFormat, Gu.Units.TimeUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Time.ToString(string! valueFormat, Gu.Units.TimeUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Time.ToString(string! valueFormat, Gu.Units.TimeUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Time.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Time.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Time.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Time.ToTimeSpan() -> System.TimeSpan
Gu.Units.Time.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.TimeTypeConverter
Gu.Units.TimeTypeConverter.TimeTypeConverter() -> void
Gu.Units.TimeUnit
Gu.Units.TimeUnit.CreateQuantity(double value) -> Gu.Units.Time
Gu.Units.TimeUnit.Equals(Gu.Units.TimeUnit other) -> bool
Gu.Units.TimeUnit.FromSiUnit(double seconds) -> double
Gu.Units.TimeUnit.GetScalarValue(Gu.Units.Time quantity) -> double
Gu.Units.TimeUnit.SiUnit.get -> Gu.Units.TimeUnit
Gu.Units.TimeUnit.Symbol.get -> string!
Gu.Units.TimeUnit.TimeUnit() -> void
Gu.Units.TimeUnit.TimeUnit(System.Func<double, double>! toSeconds, System.Func<double, double>! fromSeconds, string! symbol) -> void
Gu.Units.TimeUnit.ToSiUnit(double value) -> double
Gu.Units.TimeUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.TimeUnit.ToString(string! format) -> string!
Gu.Units.TimeUnitTypeConverter
Gu.Units.TimeUnitTypeConverter.TimeUnitTypeConverter() -> void
Gu.Units.Torque
Gu.Units.Torque.CompareTo(Gu.Units.Torque quantity) -> int
Gu.Units.Torque.Equals(Gu.Units.Torque other) -> bool
Gu.Units.Torque.Equals(Gu.Units.Torque other, Gu.Units.Torque tolerance) -> bool
Gu.Units.Torque.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Torque.GetValue(Gu.Units.TorqueUnit unit) -> double
Gu.Units.Torque.NewtonMetres.get -> double
Gu.Units.Torque.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Torque.SiUnit.get -> Gu.Units.TorqueUnit
Gu.Units.Torque.SiValue.get -> double
Gu.Units.Torque.Torque() -> void
Gu.Units.Torque.Torque(double value, Gu.Units.TorqueUnit unit) -> void
Gu.Units.Torque.ToString(Gu.Units.TorqueUnit unit) -> string!
Gu.Units.Torque.ToString(Gu.Units.TorqueUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Torque.ToString(Gu.Units.TorqueUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Torque.ToString(Gu.Units.TorqueUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Torque.ToString(string! format) -> string!
Gu.Units.Torque.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Torque.ToString(string! valueFormat, Gu.Units.TorqueUnit unit) -> string!
Gu.Units.Torque.ToString(string! valueFormat, Gu.Units.TorqueUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Torque.ToString(string! valueFormat, Gu.Units.TorqueUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Torque.ToString(string! valueFormat, Gu.Units.TorqueUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Torque.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Torque.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Torque.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Torque.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.TorqueTypeConverter
Gu.Units.TorqueTypeConverter.TorqueTypeConverter() -> void
Gu.Units.TorqueUnit
Gu.Units.TorqueUnit.CreateQuantity(double value) -> Gu.Units.Torque
Gu.Units.TorqueUnit.Equals(Gu.Units.TorqueUnit other) -> bool
Gu.Units.TorqueUnit.FromSiUnit(double newtonMetres) -> double
Gu.Units.TorqueUnit.GetScalarValue(Gu.Units.Torque quantity) -> double
Gu.Units.TorqueUnit.SiUnit.get -> Gu.Units.TorqueUnit
Gu.Units.TorqueUnit.Symbol.get -> string!
Gu.Units.TorqueUnit.TorqueUnit() -> void
Gu.Units.TorqueUnit.TorqueUnit(System.Func<double, double>! toNewtonMetres, System.Func<double, double>! fromNewtonMetres, string! symbol) -> void
Gu.Units.TorqueUnit.ToSiUnit(double value) -> double
Gu.Units.TorqueUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.TorqueUnit.ToString(string! format) -> string!
Gu.Units.TorqueUnitTypeConverter
Gu.Units.TorqueUnitTypeConverter.TorqueUnitTypeConverter() -> void
Gu.Units.Unitless
Gu.Units.Unitless.CompareTo(Gu.Units.Unitless quantity) -> int
Gu.Units.Unitless.Equals(Gu.Units.Unitless other) -> bool
Gu.Units.Unitless.Equals(Gu.Units.Unitless other, Gu.Units.Unitless tolerance) -> bool
Gu.Units.Unitless.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Unitless.GetValue(Gu.Units.UnitlessUnit unit) -> double
Gu.Units.Unitless.PartsPerMillion.get -> double
Gu.Units.Unitless.Percents.get -> double
Gu.Units.Unitless.Promilles.get -> double
Gu.Units.Unitless.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Unitless.Scalar.get -> double
Gu.Units.Unitless.SiUnit.get -> Gu.Units.UnitlessUnit
Gu.Units.Unitless.SiValue.get -> double
Gu.Units.Unitless.ToString(Gu.Units.UnitlessUnit unit) -> string!
Gu.Units.Unitless.ToString(Gu.Units.UnitlessUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Unitless.ToString(Gu.Units.UnitlessUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Unitless.ToString(Gu.Units.UnitlessUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Unitless.ToString(string! format) -> string!
Gu.Units.Unitless.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Unitless.ToString(string! valueFormat, Gu.Units.UnitlessUnit unit) -> string!
Gu.Units.Unitless.ToString(string! valueFormat, Gu.Units.UnitlessUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Unitless.ToString(string! valueFormat, Gu.Units.UnitlessUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Unitless.ToString(string! valueFormat, Gu.Units.UnitlessUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Unitless.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Unitless.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Unitless.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Unitless.Unitless() -> void
Gu.Units.Unitless.Unitless(double value, Gu.Units.UnitlessUnit unit) -> void
Gu.Units.Unitless.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.UnitlessTypeConverter
Gu.Units.UnitlessTypeConverter.UnitlessTypeConverter() -> void
Gu.Units.UnitlessUnit
Gu.Units.UnitlessUnit.CreateQuantity(double value) -> Gu.Units.Unitless
Gu.Units.UnitlessUnit.Equals(Gu.Units.UnitlessUnit other) -> bool
Gu.Units.UnitlessUnit.FromSiUnit(double scalar) -> double
Gu.Units.UnitlessUnit.GetScalarValue(Gu.Units.Unitless quantity) -> double
Gu.Units.UnitlessUnit.SiUnit.get -> Gu.Units.UnitlessUnit
Gu.Units.UnitlessUnit.Symbol.get -> string!
Gu.Units.UnitlessUnit.ToSiUnit(double value) -> double
Gu.Units.UnitlessUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.UnitlessUnit.ToString(string! format) -> string!
Gu.Units.UnitlessUnit.UnitlessUnit() -> void
Gu.Units.UnitlessUnit.UnitlessUnit(System.Func<double, double>! toScalar, System.Func<double, double>! fromScalar, string! symbol) -> void
Gu.Units.UnitlessUnitTypeConverter
Gu.Units.UnitlessUnitTypeConverter.UnitlessUnitTypeConverter() -> void
Gu.Units.Voltage
Gu.Units.Voltage.CompareTo(Gu.Units.Voltage quantity) -> int
Gu.Units.Voltage.Equals(Gu.Units.Voltage other) -> bool
Gu.Units.Voltage.Equals(Gu.Units.Voltage other, Gu.Units.Voltage tolerance) -> bool
Gu.Units.Voltage.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Voltage.GetValue(Gu.Units.VoltageUnit unit) -> double
Gu.Units.Voltage.Gigavolts.get -> double
Gu.Units.Voltage.Kilovolts.get -> double
Gu.Units.Voltage.Megavolts.get -> double
Gu.Units.Voltage.Microvolts.get -> double
Gu.Units.Voltage.Millivolts.get -> double
Gu.Units.Voltage.Nanovolts.get -> double
Gu.Units.Voltage.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Voltage.SiUnit.get -> Gu.Units.VoltageUnit
Gu.Units.Voltage.SiValue.get -> double
Gu.Units.Voltage.ToString(Gu.Units.VoltageUnit unit) -> string!
Gu.Units.Voltage.ToString(Gu.Units.VoltageUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Voltage.ToString(Gu.Units.VoltageUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Voltage.ToString(Gu.Units.VoltageUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Voltage.ToString(string! format) -> string!
Gu.Units.Voltage.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Voltage.ToString(string! valueFormat, Gu.Units.VoltageUnit unit) -> string!
Gu.Units.Voltage.ToString(string! valueFormat, Gu.Units.VoltageUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Voltage.ToString(string! valueFormat, Gu.Units.VoltageUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Voltage.ToString(string! valueFormat, Gu.Units.VoltageUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Voltage.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Voltage.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Voltage.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Voltage.Voltage() -> void
Gu.Units.Voltage.Voltage(double value, Gu.Units.VoltageUnit unit) -> void
Gu.Units.Voltage.Volts.get -> double
Gu.Units.Voltage.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.VoltageTypeConverter
Gu.Units.VoltageTypeConverter.VoltageTypeConverter() -> void
Gu.Units.VoltageUnit
Gu.Units.VoltageUnit.CreateQuantity(double value) -> Gu.Units.Voltage
Gu.Units.VoltageUnit.Equals(Gu.Units.VoltageUnit other) -> bool
Gu.Units.VoltageUnit.FromSiUnit(double volts) -> double
Gu.Units.VoltageUnit.GetScalarValue(Gu.Units.Voltage quantity) -> double
Gu.Units.VoltageUnit.SiUnit.get -> Gu.Units.VoltageUnit
Gu.Units.VoltageUnit.Symbol.get -> string!
Gu.Units.VoltageUnit.ToSiUnit(double value) -> double
Gu.Units.VoltageUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.VoltageUnit.ToString(string! format) -> string!
Gu.Units.VoltageUnit.VoltageUnit() -> void
Gu.Units.VoltageUnit.VoltageUnit(System.Func<double, double>! toVolts, System.Func<double, double>! fromVolts, string! symbol) -> void
Gu.Units.VoltageUnitTypeConverter
Gu.Units.VoltageUnitTypeConverter.VoltageUnitTypeConverter() -> void
Gu.Units.Volume
Gu.Units.Volume.Centilitres.get -> double
Gu.Units.Volume.CompareTo(Gu.Units.Volume quantity) -> int
Gu.Units.Volume.CubicCentimetres.get -> double
Gu.Units.Volume.CubicDecimetres.get -> double
Gu.Units.Volume.CubicFeet.get -> double
Gu.Units.Volume.CubicInches.get -> double
Gu.Units.Volume.CubicMetres.get -> double
Gu.Units.Volume.CubicMillimetres.get -> double
Gu.Units.Volume.Decilitres.get -> double
Gu.Units.Volume.Equals(Gu.Units.Volume other) -> bool
Gu.Units.Volume.Equals(Gu.Units.Volume other, Gu.Units.Volume tolerance) -> bool
Gu.Units.Volume.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Volume.GetValue(Gu.Units.VolumeUnit unit) -> double
Gu.Units.Volume.Litres.get -> double
Gu.Units.Volume.Millilitres.get -> double
Gu.Units.Volume.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Volume.SiUnit.get -> Gu.Units.VolumeUnit
Gu.Units.Volume.SiValue.get -> double
Gu.Units.Volume.ToString(Gu.Units.VolumeUnit unit) -> string!
Gu.Units.Volume.ToString(Gu.Units.VolumeUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Volume.ToString(Gu.Units.VolumeUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Volume.ToString(Gu.Units.VolumeUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Volume.ToString(string! format) -> string!
Gu.Units.Volume.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Volume.ToString(string! valueFormat, Gu.Units.VolumeUnit unit) -> string!
Gu.Units.Volume.ToString(string! valueFormat, Gu.Units.VolumeUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Volume.ToString(string! valueFormat, Gu.Units.VolumeUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Volume.ToString(string! valueFormat, Gu.Units.VolumeUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Volume.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Volume.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Volume.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Volume.Volume() -> void
Gu.Units.Volume.Volume(double value, Gu.Units.VolumeUnit unit) -> void
Gu.Units.Volume.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.VolumetricFlow
Gu.Units.VolumetricFlow.CentilitresPerHour.get -> double
Gu.Units.VolumetricFlow.CentilitresPerMinute.get -> double
Gu.Units.VolumetricFlow.CentilitresPerSecond.get -> double
Gu.Units.VolumetricFlow.CompareTo(Gu.Units.VolumetricFlow quantity) -> int
Gu.Units.VolumetricFlow.CubicFeetPerDay.get -> double
Gu.Units.VolumetricFlow.CubicFeetPerHour.get -> double
Gu.Units.VolumetricFlow.CubicFeetPerMinute.get -> double
Gu.Units.VolumetricFlow.CubicFeetPerSecond.get -> double
Gu.Units.VolumetricFlow.CubicMetresPerHour.get -> double
Gu.Units.VolumetricFlow.CubicMetresPerMinute.get -> double
Gu.Units.VolumetricFlow.CubicMetresPerSecond.get -> double
Gu.Units.VolumetricFlow.Equals(Gu.Units.VolumetricFlow other) -> bool
Gu.Units.VolumetricFlow.Equals(Gu.Units.VolumetricFlow other, Gu.Units.VolumetricFlow tolerance) -> bool
Gu.Units.VolumetricFlow.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.VolumetricFlow.GetValue(Gu.Units.VolumetricFlowUnit unit) -> double
Gu.Units.VolumetricFlow.LitresPerHour.get -> double
Gu.Units.VolumetricFlow.LitresPerMinute.get -> double
Gu.Units.VolumetricFlow.LitresPerSecond.get -> double
Gu.Units.VolumetricFlow.MillilitresPerHour.get -> double
Gu.Units.VolumetricFlow.MillilitresPerMinute.get -> double
Gu.Units.VolumetricFlow.MillilitresPerSecond.get -> double
Gu.Units.VolumetricFlow.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.VolumetricFlow.SiUnit.get -> Gu.Units.VolumetricFlowUnit
Gu.Units.VolumetricFlow.SiValue.get -> double
Gu.Units.VolumetricFlow.ToString(Gu.Units.VolumetricFlowUnit unit) -> string!
Gu.Units.VolumetricFlow.ToString(Gu.Units.VolumetricFlowUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.VolumetricFlow.ToString(Gu.Units.VolumetricFlowUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.VolumetricFlow.ToString(Gu.Units.VolumetricFlowUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.VolumetricFlow.ToString(string! format) -> string!
Gu.Units.VolumetricFlow.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.VolumetricFlow.ToString(string! valueFormat, Gu.Units.VolumetricFlowUnit unit) -> string!
Gu.Units.VolumetricFlow.ToString(string! valueFormat, Gu.Units.VolumetricFlowUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.VolumetricFlow.ToString(string! valueFormat, Gu.Units.VolumetricFlowUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.VolumetricFlow.ToString(string! valueFormat, Gu.Units.VolumetricFlowUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.VolumetricFlow.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.VolumetricFlow.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.VolumetricFlow.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.VolumetricFlow.VolumetricFlow() -> void
Gu.Units.VolumetricFlow.VolumetricFlow(double value, Gu.Units.VolumetricFlowUnit unit) -> void
Gu.Units.VolumetricFlow.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.VolumetricFlowTypeConverter
Gu.Units.VolumetricFlowTypeConverter.VolumetricFlowTypeConverter() -> void
Gu.Units.VolumetricFlowUnit
Gu.Units.VolumetricFlowUnit.CreateQuantity(double value) -> Gu.Units.VolumetricFlow
Gu.Units.VolumetricFlowUnit.Equals(Gu.Units.VolumetricFlowUnit other) -> bool
Gu.Units.VolumetricFlowUnit.FromSiUnit(double cubicMetresPerSecond) -> double
Gu.Units.VolumetricFlowUnit.GetScalarValue(Gu.Units.VolumetricFlow quantity) -> double
Gu.Units.VolumetricFlowUnit.SiUnit.get -> Gu.Units.VolumetricFlowUnit
Gu.Units.VolumetricFlowUnit.Symbol.get -> string!
Gu.Units.VolumetricFlowUnit.ToSiUnit(double value) -> double
Gu.Units.VolumetricFlowUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.VolumetricFlowUnit.ToString(string! format) -> string!
Gu.Units.VolumetricFlowUnit.VolumetricFlowUnit() -> void
Gu.Units.VolumetricFlowUnit.VolumetricFlowUnit(System.Func<double, double>! toCubicMetresPerSecond, System.Func<double, double>! fromCubicMetresPerSecond, string! symbol) -> void
Gu.Units.VolumetricFlowUnitTypeConverter
Gu.Units.VolumetricFlowUnitTypeConverter.VolumetricFlowUnitTypeConverter() -> void
Gu.Units.VolumeTypeConverter
Gu.Units.VolumeTypeConverter.VolumeTypeConverter() -> void
Gu.Units.VolumeUnit
Gu.Units.VolumeUnit.CreateQuantity(double value) -> Gu.Units.Volume
Gu.Units.VolumeUnit.Equals(Gu.Units.VolumeUnit other) -> bool
Gu.Units.VolumeUnit.FromSiUnit(double cubicMetres) -> double
Gu.Units.VolumeUnit.GetScalarValue(Gu.Units.Volume quantity) -> double
Gu.Units.VolumeUnit.SiUnit.get -> Gu.Units.VolumeUnit
Gu.Units.VolumeUnit.Symbol.get -> string!
Gu.Units.VolumeUnit.ToSiUnit(double value) -> double
Gu.Units.VolumeUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.VolumeUnit.ToString(string! format) -> string!
Gu.Units.VolumeUnit.VolumeUnit() -> void
Gu.Units.VolumeUnit.VolumeUnit(System.Func<double, double>! toCubicMetres, System.Func<double, double>! fromCubicMetres, string! symbol) -> void
Gu.Units.VolumeUnitTypeConverter
Gu.Units.VolumeUnitTypeConverter.VolumeUnitTypeConverter() -> void
Gu.Units.Wavenumber
Gu.Units.Wavenumber.CompareTo(Gu.Units.Wavenumber quantity) -> int
Gu.Units.Wavenumber.Equals(Gu.Units.Wavenumber other) -> bool
Gu.Units.Wavenumber.Equals(Gu.Units.Wavenumber other, Gu.Units.Wavenumber tolerance) -> bool
Gu.Units.Wavenumber.GetSchema() -> System.Xml.Schema.XmlSchema?
Gu.Units.Wavenumber.GetValue(Gu.Units.WavenumberUnit unit) -> double
Gu.Units.Wavenumber.ReadXml(System.Xml.XmlReader! reader) -> void
Gu.Units.Wavenumber.ReciprocalMetres.get -> double
Gu.Units.Wavenumber.SiUnit.get -> Gu.Units.WavenumberUnit
Gu.Units.Wavenumber.SiValue.get -> double
Gu.Units.Wavenumber.ToString(Gu.Units.WavenumberUnit unit) -> string!
Gu.Units.Wavenumber.ToString(Gu.Units.WavenumberUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Wavenumber.ToString(Gu.Units.WavenumberUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Wavenumber.ToString(Gu.Units.WavenumberUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Wavenumber.ToString(string! format) -> string!
Gu.Units.Wavenumber.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
Gu.Units.Wavenumber.ToString(string! valueFormat, Gu.Units.WavenumberUnit unit) -> string!
Gu.Units.Wavenumber.ToString(string! valueFormat, Gu.Units.WavenumberUnit unit, Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.Wavenumber.ToString(string! valueFormat, Gu.Units.WavenumberUnit unit, Gu.Units.SymbolFormat symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Wavenumber.ToString(string! valueFormat, Gu.Units.WavenumberUnit unit, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Wavenumber.ToString(string! valueFormat, string! symbolFormat) -> string!
Gu.Units.Wavenumber.ToString(string! valueFormat, string! symbolFormat, System.IFormatProvider! formatProvider) -> string!
Gu.Units.Wavenumber.ToString(System.IFormatProvider! provider) -> string!
Gu.Units.Wavenumber.Wavenumber() -> void
Gu.Units.Wavenumber.Wavenumber(double value, Gu.Units.WavenumberUnit unit) -> void
Gu.Units.Wavenumber.WriteXml(System.Xml.XmlWriter! writer) -> void
Gu.Units.WavenumberTypeConverter
Gu.Units.WavenumberTypeConverter.WavenumberTypeConverter() -> void
Gu.Units.WavenumberUnit
Gu.Units.WavenumberUnit.CreateQuantity(double value) -> Gu.Units.Wavenumber
Gu.Units.WavenumberUnit.Equals(Gu.Units.WavenumberUnit other) -> bool
Gu.Units.WavenumberUnit.FromSiUnit(double reciprocalMetres) -> double
Gu.Units.WavenumberUnit.GetScalarValue(Gu.Units.Wavenumber quantity) -> double
Gu.Units.WavenumberUnit.SiUnit.get -> Gu.Units.WavenumberUnit
Gu.Units.WavenumberUnit.Symbol.get -> string!
Gu.Units.WavenumberUnit.ToSiUnit(double value) -> double
Gu.Units.WavenumberUnit.ToString(Gu.Units.SymbolFormat symbolFormat) -> string!
Gu.Units.WavenumberUnit.ToString(string! format) -> string!
Gu.Units.WavenumberUnit.WavenumberUnit() -> void
Gu.Units.WavenumberUnit.WavenumberUnit(System.Func<double, double>! toReciprocalMetres, System.Func<double, double>! fromReciprocalMetres, string! symbol) -> void
Gu.Units.WavenumberUnitTypeConverter
Gu.Units.WavenumberUnitTypeConverter.WavenumberUnitTypeConverter() -> void
override Gu.Units.Acceleration.Equals(object? obj) -> bool
override Gu.Units.Acceleration.GetHashCode() -> int
override Gu.Units.Acceleration.ToString() -> string!
~override Gu.Units.AccelerationTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.AccelerationTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.AccelerationTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.AccelerationTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.AccelerationUnit.Equals(object? obj) -> bool
override Gu.Units.AccelerationUnit.GetHashCode() -> int
override Gu.Units.AccelerationUnit.ToString() -> string!
~override Gu.Units.AccelerationUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.AccelerationUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.AccelerationUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.AccelerationUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.AmountOfSubstance.Equals(object? obj) -> bool
override Gu.Units.AmountOfSubstance.GetHashCode() -> int
override Gu.Units.AmountOfSubstance.ToString() -> string!
~override Gu.Units.AmountOfSubstanceTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.AmountOfSubstanceTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.AmountOfSubstanceTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.AmountOfSubstanceTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.AmountOfSubstanceUnit.Equals(object? obj) -> bool
override Gu.Units.AmountOfSubstanceUnit.GetHashCode() -> int
override Gu.Units.AmountOfSubstanceUnit.ToString() -> string!
~override Gu.Units.AmountOfSubstanceUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.AmountOfSubstanceUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.AmountOfSubstanceUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.AmountOfSubstanceUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Angle.Equals(object? obj) -> bool
override Gu.Units.Angle.GetHashCode() -> int
override Gu.Units.Angle.ToString() -> string!
override Gu.Units.AnglePerUnitless.Equals(object? obj) -> bool
override Gu.Units.AnglePerUnitless.GetHashCode() -> int
override Gu.Units.AnglePerUnitless.ToString() -> string!
~override Gu.Units.AnglePerUnitlessTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.AnglePerUnitlessTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.AnglePerUnitlessTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.AnglePerUnitlessTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.AnglePerUnitlessUnit.Equals(object? obj) -> bool
override Gu.Units.AnglePerUnitlessUnit.GetHashCode() -> int
override Gu.Units.AnglePerUnitlessUnit.ToString() -> string!
~override Gu.Units.AnglePerUnitlessUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.AnglePerUnitlessUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.AnglePerUnitlessUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.AnglePerUnitlessUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Gu.Units.AngleTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.AngleTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.AngleTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.AngleTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.AngleUnit.Equals(object? obj) -> bool
override Gu.Units.AngleUnit.GetHashCode() -> int
override Gu.Units.AngleUnit.ToString() -> string!
~override Gu.Units.AngleUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.AngleUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.AngleUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.AngleUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.AngularAcceleration.Equals(object? obj) -> bool
override Gu.Units.AngularAcceleration.GetHashCode() -> int
override Gu.Units.AngularAcceleration.ToString() -> string!
~override Gu.Units.AngularAccelerationTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.AngularAccelerationTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.AngularAccelerationTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.AngularAccelerationTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.AngularAccelerationUnit.Equals(object? obj) -> bool
override Gu.Units.AngularAccelerationUnit.GetHashCode() -> int
override Gu.Units.AngularAccelerationUnit.ToString() -> string!
~override Gu.Units.AngularAccelerationUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.AngularAccelerationUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.AngularAccelerationUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.AngularAccelerationUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.AngularJerk.Equals(object? obj) -> bool
override Gu.Units.AngularJerk.GetHashCode() -> int
override Gu.Units.AngularJerk.ToString() -> string!
~override Gu.Units.AngularJerkTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.AngularJerkTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.AngularJerkTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.AngularJerkTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.AngularJerkUnit.Equals(object? obj) -> bool
override Gu.Units.AngularJerkUnit.GetHashCode() -> int
override Gu.Units.AngularJerkUnit.ToString() -> string!
~override Gu.Units.AngularJerkUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.AngularJerkUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.AngularJerkUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.AngularJerkUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.AngularSpeed.Equals(object? obj) -> bool
override Gu.Units.AngularSpeed.GetHashCode() -> int
override Gu.Units.AngularSpeed.ToString() -> string!
~override Gu.Units.AngularSpeedTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.AngularSpeedTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.AngularSpeedTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.AngularSpeedTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.AngularSpeedUnit.Equals(object? obj) -> bool
override Gu.Units.AngularSpeedUnit.GetHashCode() -> int
override Gu.Units.AngularSpeedUnit.ToString() -> string!
~override Gu.Units.AngularSpeedUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.AngularSpeedUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.AngularSpeedUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.AngularSpeedUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Area.Equals(object? obj) -> bool
override Gu.Units.Area.GetHashCode() -> int
override Gu.Units.Area.ToString() -> string!
override Gu.Units.AreaDensity.Equals(object? obj) -> bool
override Gu.Units.AreaDensity.GetHashCode() -> int
override Gu.Units.AreaDensity.ToString() -> string!
~override Gu.Units.AreaDensityTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.AreaDensityTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.AreaDensityTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.AreaDensityTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.AreaDensityUnit.Equals(object? obj) -> bool
override Gu.Units.AreaDensityUnit.GetHashCode() -> int
override Gu.Units.AreaDensityUnit.ToString() -> string!
~override Gu.Units.AreaDensityUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.AreaDensityUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.AreaDensityUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.AreaDensityUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Gu.Units.AreaTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.AreaTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.AreaTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.AreaTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.AreaUnit.Equals(object? obj) -> bool
override Gu.Units.AreaUnit.GetHashCode() -> int
override Gu.Units.AreaUnit.ToString() -> string!
~override Gu.Units.AreaUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.AreaUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.AreaUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.AreaUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Capacitance.Equals(object? obj) -> bool
override Gu.Units.Capacitance.GetHashCode() -> int
override Gu.Units.Capacitance.ToString() -> string!
~override Gu.Units.CapacitanceTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.CapacitanceTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.CapacitanceTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.CapacitanceTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.CapacitanceUnit.Equals(object? obj) -> bool
override Gu.Units.CapacitanceUnit.GetHashCode() -> int
override Gu.Units.CapacitanceUnit.ToString() -> string!
~override Gu.Units.CapacitanceUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.CapacitanceUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.CapacitanceUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.CapacitanceUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.CatalyticActivity.Equals(object? obj) -> bool
override Gu.Units.CatalyticActivity.GetHashCode() -> int
override Gu.Units.CatalyticActivity.ToString() -> string!
~override Gu.Units.CatalyticActivityTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.CatalyticActivityTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.CatalyticActivityTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.CatalyticActivityTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.CatalyticActivityUnit.Equals(object? obj) -> bool
override Gu.Units.CatalyticActivityUnit.GetHashCode() -> int
override Gu.Units.CatalyticActivityUnit.ToString() -> string!
~override Gu.Units.CatalyticActivityUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.CatalyticActivityUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.CatalyticActivityUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.CatalyticActivityUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Conductivity.Equals(object? obj) -> bool
override Gu.Units.Conductivity.GetHashCode() -> int
override Gu.Units.Conductivity.ToString() -> string!
~override Gu.Units.ConductivityTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.ConductivityTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.ConductivityTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.ConductivityTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.ConductivityUnit.Equals(object? obj) -> bool
override Gu.Units.ConductivityUnit.GetHashCode() -> int
override Gu.Units.ConductivityUnit.ToString() -> string!
~override Gu.Units.ConductivityUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.ConductivityUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.ConductivityUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.ConductivityUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Current.Equals(object? obj) -> bool
override Gu.Units.Current.GetHashCode() -> int
override Gu.Units.Current.ToString() -> string!
~override Gu.Units.CurrentTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.CurrentTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.CurrentTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.CurrentTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.CurrentUnit.Equals(object? obj) -> bool
override Gu.Units.CurrentUnit.GetHashCode() -> int
override Gu.Units.CurrentUnit.ToString() -> string!
~override Gu.Units.CurrentUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.CurrentUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.CurrentUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.CurrentUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Data.Equals(object? obj) -> bool
override Gu.Units.Data.GetHashCode() -> int
override Gu.Units.Data.ToString() -> string!
~override Gu.Units.DataTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.DataTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.DataTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.DataTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.DataUnit.Equals(object? obj) -> bool
override Gu.Units.DataUnit.GetHashCode() -> int
override Gu.Units.DataUnit.ToString() -> string!
~override Gu.Units.DataUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.DataUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.DataUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.DataUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Density.Equals(object? obj) -> bool
override Gu.Units.Density.GetHashCode() -> int
override Gu.Units.Density.ToString() -> string!
~override Gu.Units.DensityTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.DensityTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.DensityTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.DensityTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.DensityUnit.Equals(object? obj) -> bool
override Gu.Units.DensityUnit.GetHashCode() -> int
override Gu.Units.DensityUnit.ToString() -> string!
~override Gu.Units.DensityUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.DensityUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.DensityUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.DensityUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.ElectricalConductance.Equals(object? obj) -> bool
override Gu.Units.ElectricalConductance.GetHashCode() -> int
override Gu.Units.ElectricalConductance.ToString() -> string!
~override Gu.Units.ElectricalConductanceTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.ElectricalConductanceTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.ElectricalConductanceTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.ElectricalConductanceTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.ElectricalConductanceUnit.Equals(object? obj) -> bool
override Gu.Units.ElectricalConductanceUnit.GetHashCode() -> int
override Gu.Units.ElectricalConductanceUnit.ToString() -> string!
~override Gu.Units.ElectricalConductanceUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.ElectricalConductanceUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.ElectricalConductanceUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.ElectricalConductanceUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.ElectricCharge.Equals(object? obj) -> bool
override Gu.Units.ElectricCharge.GetHashCode() -> int
override Gu.Units.ElectricCharge.ToString() -> string!
~override Gu.Units.ElectricChargeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.ElectricChargeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.ElectricChargeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.ElectricChargeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.ElectricChargeUnit.Equals(object? obj) -> bool
override Gu.Units.ElectricChargeUnit.GetHashCode() -> int
override Gu.Units.ElectricChargeUnit.ToString() -> string!
~override Gu.Units.ElectricChargeUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.ElectricChargeUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.ElectricChargeUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.ElectricChargeUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Energy.Equals(object? obj) -> bool
override Gu.Units.Energy.GetHashCode() -> int
override Gu.Units.Energy.ToString() -> string!
~override Gu.Units.EnergyTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.EnergyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.EnergyTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.EnergyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.EnergyUnit.Equals(object? obj) -> bool
override Gu.Units.EnergyUnit.GetHashCode() -> int
override Gu.Units.EnergyUnit.ToString() -> string!
~override Gu.Units.EnergyUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.EnergyUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.EnergyUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.EnergyUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Flexibility.Equals(object? obj) -> bool
override Gu.Units.Flexibility.GetHashCode() -> int
override Gu.Units.Flexibility.ToString() -> string!
~override Gu.Units.FlexibilityTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.FlexibilityTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.FlexibilityTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.FlexibilityTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.FlexibilityUnit.Equals(object? obj) -> bool
override Gu.Units.FlexibilityUnit.GetHashCode() -> int
override Gu.Units.FlexibilityUnit.ToString() -> string!
~override Gu.Units.FlexibilityUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.FlexibilityUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.FlexibilityUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.FlexibilityUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Force.Equals(object? obj) -> bool
override Gu.Units.Force.GetHashCode() -> int
override Gu.Units.Force.ToString() -> string!
override Gu.Units.ForcePerUnitless.Equals(object? obj) -> bool
override Gu.Units.ForcePerUnitless.GetHashCode() -> int
override Gu.Units.ForcePerUnitless.ToString() -> string!
~override Gu.Units.ForcePerUnitlessTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.ForcePerUnitlessTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.ForcePerUnitlessTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.ForcePerUnitlessTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.ForcePerUnitlessUnit.Equals(object? obj) -> bool
override Gu.Units.ForcePerUnitlessUnit.GetHashCode() -> int
override Gu.Units.ForcePerUnitlessUnit.ToString() -> string!
~override Gu.Units.ForcePerUnitlessUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.ForcePerUnitlessUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.ForcePerUnitlessUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.ForcePerUnitlessUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Gu.Units.ForceTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.ForceTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.ForceTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.ForceTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.ForceUnit.Equals(object? obj) -> bool
override Gu.Units.ForceUnit.GetHashCode() -> int
override Gu.Units.ForceUnit.ToString() -> string!
~override Gu.Units.ForceUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.ForceUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.ForceUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.ForceUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Frequency.Equals(object? obj) -> bool
override Gu.Units.Frequency.GetHashCode() -> int
override Gu.Units.Frequency.ToString() -> string!
~override Gu.Units.FrequencyTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.FrequencyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.FrequencyTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.FrequencyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.FrequencyUnit.Equals(object? obj) -> bool
override Gu.Units.FrequencyUnit.GetHashCode() -> int
override Gu.Units.FrequencyUnit.ToString() -> string!
~override Gu.Units.FrequencyUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.FrequencyUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.FrequencyUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.FrequencyUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Illuminance.Equals(object? obj) -> bool
override Gu.Units.Illuminance.GetHashCode() -> int
override Gu.Units.Illuminance.ToString() -> string!
~override Gu.Units.IlluminanceTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.IlluminanceTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.IlluminanceTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.IlluminanceTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.IlluminanceUnit.Equals(object? obj) -> bool
override Gu.Units.IlluminanceUnit.GetHashCode() -> int
override Gu.Units.IlluminanceUnit.ToString() -> string!
~override Gu.Units.IlluminanceUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.IlluminanceUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.IlluminanceUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.IlluminanceUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Inductance.Equals(object? obj) -> bool
override Gu.Units.Inductance.GetHashCode() -> int
override Gu.Units.Inductance.ToString() -> string!
~override Gu.Units.InductanceTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.InductanceTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.InductanceTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.InductanceTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.InductanceUnit.Equals(object? obj) -> bool
override Gu.Units.InductanceUnit.GetHashCode() -> int
override Gu.Units.InductanceUnit.ToString() -> string!
~override Gu.Units.InductanceUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.InductanceUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.InductanceUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.InductanceUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Jerk.Equals(object? obj) -> bool
override Gu.Units.Jerk.GetHashCode() -> int
override Gu.Units.Jerk.ToString() -> string!
~override Gu.Units.JerkTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.JerkTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.JerkTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.JerkTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.JerkUnit.Equals(object? obj) -> bool
override Gu.Units.JerkUnit.GetHashCode() -> int
override Gu.Units.JerkUnit.ToString() -> string!
~override Gu.Units.JerkUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.JerkUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.JerkUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.JerkUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.KinematicViscosity.Equals(object? obj) -> bool
override Gu.Units.KinematicViscosity.GetHashCode() -> int
override Gu.Units.KinematicViscosity.ToString() -> string!
~override Gu.Units.KinematicViscosityTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.KinematicViscosityTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.KinematicViscosityTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.KinematicViscosityTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.KinematicViscosityUnit.Equals(object? obj) -> bool
override Gu.Units.KinematicViscosityUnit.GetHashCode() -> int
override Gu.Units.KinematicViscosityUnit.ToString() -> string!
~override Gu.Units.KinematicViscosityUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.KinematicViscosityUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.KinematicViscosityUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.KinematicViscosityUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Length.Equals(object? obj) -> bool
override Gu.Units.Length.GetHashCode() -> int
override Gu.Units.Length.ToString() -> string!
override Gu.Units.LengthPerUnitless.Equals(object? obj) -> bool
override Gu.Units.LengthPerUnitless.GetHashCode() -> int
override Gu.Units.LengthPerUnitless.ToString() -> string!
~override Gu.Units.LengthPerUnitlessTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.LengthPerUnitlessTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.LengthPerUnitlessTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.LengthPerUnitlessTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.LengthPerUnitlessUnit.Equals(object? obj) -> bool
override Gu.Units.LengthPerUnitlessUnit.GetHashCode() -> int
override Gu.Units.LengthPerUnitlessUnit.ToString() -> string!
~override Gu.Units.LengthPerUnitlessUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.LengthPerUnitlessUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.LengthPerUnitlessUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.LengthPerUnitlessUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Gu.Units.LengthTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.LengthTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.LengthTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.LengthTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.LengthUnit.Equals(object? obj) -> bool
override Gu.Units.LengthUnit.GetHashCode() -> int
override Gu.Units.LengthUnit.ToString() -> string!
~override Gu.Units.LengthUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.LengthUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.LengthUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.LengthUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.LuminousFlux.Equals(object? obj) -> bool
override Gu.Units.LuminousFlux.GetHashCode() -> int
override Gu.Units.LuminousFlux.ToString() -> string!
~override Gu.Units.LuminousFluxTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.LuminousFluxTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.LuminousFluxTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.LuminousFluxTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.LuminousFluxUnit.Equals(object? obj) -> bool
override Gu.Units.LuminousFluxUnit.GetHashCode() -> int
override Gu.Units.LuminousFluxUnit.ToString() -> string!
~override Gu.Units.LuminousFluxUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.LuminousFluxUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.LuminousFluxUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.LuminousFluxUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.LuminousIntensity.Equals(object? obj) -> bool
override Gu.Units.LuminousIntensity.GetHashCode() -> int
override Gu.Units.LuminousIntensity.ToString() -> string!
~override Gu.Units.LuminousIntensityTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.LuminousIntensityTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.LuminousIntensityTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.LuminousIntensityTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.LuminousIntensityUnit.Equals(object? obj) -> bool
override Gu.Units.LuminousIntensityUnit.GetHashCode() -> int
override Gu.Units.LuminousIntensityUnit.ToString() -> string!
~override Gu.Units.LuminousIntensityUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.LuminousIntensityUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.LuminousIntensityUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.LuminousIntensityUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.MagneticFieldStrength.Equals(object? obj) -> bool
override Gu.Units.MagneticFieldStrength.GetHashCode() -> int
override Gu.Units.MagneticFieldStrength.ToString() -> string!
~override Gu.Units.MagneticFieldStrengthTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.MagneticFieldStrengthTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.MagneticFieldStrengthTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.MagneticFieldStrengthTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.MagneticFieldStrengthUnit.Equals(object? obj) -> bool
override Gu.Units.MagneticFieldStrengthUnit.GetHashCode() -> int
override Gu.Units.MagneticFieldStrengthUnit.ToString() -> string!
~override Gu.Units.MagneticFieldStrengthUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.MagneticFieldStrengthUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.MagneticFieldStrengthUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.MagneticFieldStrengthUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.MagneticFlux.Equals(object? obj) -> bool
override Gu.Units.MagneticFlux.GetHashCode() -> int
override Gu.Units.MagneticFlux.ToString() -> string!
~override Gu.Units.MagneticFluxTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.MagneticFluxTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.MagneticFluxTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.MagneticFluxTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.MagneticFluxUnit.Equals(object? obj) -> bool
override Gu.Units.MagneticFluxUnit.GetHashCode() -> int
override Gu.Units.MagneticFluxUnit.ToString() -> string!
~override Gu.Units.MagneticFluxUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.MagneticFluxUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.MagneticFluxUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.MagneticFluxUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Mass.Equals(object? obj) -> bool
override Gu.Units.Mass.GetHashCode() -> int
override Gu.Units.Mass.ToString() -> string!
override Gu.Units.MassFlow.Equals(object? obj) -> bool
override Gu.Units.MassFlow.GetHashCode() -> int
override Gu.Units.MassFlow.ToString() -> string!
~override Gu.Units.MassFlowTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.MassFlowTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.MassFlowTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.MassFlowTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.MassFlowUnit.Equals(object? obj) -> bool
override Gu.Units.MassFlowUnit.GetHashCode() -> int
override Gu.Units.MassFlowUnit.ToString() -> string!
~override Gu.Units.MassFlowUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.MassFlowUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.MassFlowUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.MassFlowUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Gu.Units.MassTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.MassTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.MassTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.MassTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.MassUnit.Equals(object? obj) -> bool
override Gu.Units.MassUnit.GetHashCode() -> int
override Gu.Units.MassUnit.ToString() -> string!
~override Gu.Units.MassUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.MassUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.MassUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.MassUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.MolarHeatCapacity.Equals(object? obj) -> bool
override Gu.Units.MolarHeatCapacity.GetHashCode() -> int
override Gu.Units.MolarHeatCapacity.ToString() -> string!
~override Gu.Units.MolarHeatCapacityTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.MolarHeatCapacityTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.MolarHeatCapacityTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.MolarHeatCapacityTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.MolarHeatCapacityUnit.Equals(object? obj) -> bool
override Gu.Units.MolarHeatCapacityUnit.GetHashCode() -> int
override Gu.Units.MolarHeatCapacityUnit.ToString() -> string!
~override Gu.Units.MolarHeatCapacityUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.MolarHeatCapacityUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.MolarHeatCapacityUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.MolarHeatCapacityUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.MolarMass.Equals(object? obj) -> bool
override Gu.Units.MolarMass.GetHashCode() -> int
override Gu.Units.MolarMass.ToString() -> string!
~override Gu.Units.MolarMassTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.MolarMassTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.MolarMassTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.MolarMassTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.MolarMassUnit.Equals(object? obj) -> bool
override Gu.Units.MolarMassUnit.GetHashCode() -> int
override Gu.Units.MolarMassUnit.ToString() -> string!
~override Gu.Units.MolarMassUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.MolarMassUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.MolarMassUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.MolarMassUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Momentum.Equals(object? obj) -> bool
override Gu.Units.Momentum.GetHashCode() -> int
override Gu.Units.Momentum.ToString() -> string!
~override Gu.Units.MomentumTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.MomentumTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.MomentumTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.MomentumTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.MomentumUnit.Equals(object? obj) -> bool
override Gu.Units.MomentumUnit.GetHashCode() -> int
override Gu.Units.MomentumUnit.ToString() -> string!
~override Gu.Units.MomentumUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.MomentumUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.MomentumUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.MomentumUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Power.Equals(object? obj) -> bool
override Gu.Units.Power.GetHashCode() -> int
override Gu.Units.Power.ToString() -> string!
~override Gu.Units.PowerTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.PowerTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.PowerTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.PowerTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.PowerUnit.Equals(object? obj) -> bool
override Gu.Units.PowerUnit.GetHashCode() -> int
override Gu.Units.PowerUnit.ToString() -> string!
~override Gu.Units.PowerUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.PowerUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.PowerUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.PowerUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Pressure.Equals(object? obj) -> bool
override Gu.Units.Pressure.GetHashCode() -> int
override Gu.Units.Pressure.ToString() -> string!
~override Gu.Units.PressureTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.PressureTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.PressureTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.PressureTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.PressureUnit.Equals(object? obj) -> bool
override Gu.Units.PressureUnit.GetHashCode() -> int
override Gu.Units.PressureUnit.ToString() -> string!
~override Gu.Units.PressureUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.PressureUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.PressureUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.PressureUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Resistance.Equals(object? obj) -> bool
override Gu.Units.Resistance.GetHashCode() -> int
override Gu.Units.Resistance.ToString() -> string!
~override Gu.Units.ResistanceTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.ResistanceTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.ResistanceTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.ResistanceTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.ResistanceUnit.Equals(object? obj) -> bool
override Gu.Units.ResistanceUnit.GetHashCode() -> int
override Gu.Units.ResistanceUnit.ToString() -> string!
~override Gu.Units.ResistanceUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.ResistanceUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.ResistanceUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.ResistanceUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.SolidAngle.Equals(object? obj) -> bool
override Gu.Units.SolidAngle.GetHashCode() -> int
override Gu.Units.SolidAngle.ToString() -> string!
~override Gu.Units.SolidAngleTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.SolidAngleTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.SolidAngleTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.SolidAngleTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.SolidAngleUnit.Equals(object? obj) -> bool
override Gu.Units.SolidAngleUnit.GetHashCode() -> int
override Gu.Units.SolidAngleUnit.ToString() -> string!
~override Gu.Units.SolidAngleUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.SolidAngleUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.SolidAngleUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.SolidAngleUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.SpecificEnergy.Equals(object? obj) -> bool
override Gu.Units.SpecificEnergy.GetHashCode() -> int
override Gu.Units.SpecificEnergy.ToString() -> string!
~override Gu.Units.SpecificEnergyTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.SpecificEnergyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.SpecificEnergyTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.SpecificEnergyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.SpecificEnergyUnit.Equals(object? obj) -> bool
override Gu.Units.SpecificEnergyUnit.GetHashCode() -> int
override Gu.Units.SpecificEnergyUnit.ToString() -> string!
~override Gu.Units.SpecificEnergyUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.SpecificEnergyUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.SpecificEnergyUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.SpecificEnergyUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.SpecificVolume.Equals(object? obj) -> bool
override Gu.Units.SpecificVolume.GetHashCode() -> int
override Gu.Units.SpecificVolume.ToString() -> string!
~override Gu.Units.SpecificVolumeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.SpecificVolumeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.SpecificVolumeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.SpecificVolumeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.SpecificVolumeUnit.Equals(object? obj) -> bool
override Gu.Units.SpecificVolumeUnit.GetHashCode() -> int
override Gu.Units.SpecificVolumeUnit.ToString() -> string!
~override Gu.Units.SpecificVolumeUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.SpecificVolumeUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.SpecificVolumeUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.SpecificVolumeUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Speed.Equals(object? obj) -> bool
override Gu.Units.Speed.GetHashCode() -> int
override Gu.Units.Speed.ToString() -> string!
~override Gu.Units.SpeedTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.SpeedTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.SpeedTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.SpeedTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.SpeedUnit.Equals(object? obj) -> bool
override Gu.Units.SpeedUnit.GetHashCode() -> int
override Gu.Units.SpeedUnit.ToString() -> string!
~override Gu.Units.SpeedUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.SpeedUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.SpeedUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.SpeedUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Stiffness.Equals(object? obj) -> bool
override Gu.Units.Stiffness.GetHashCode() -> int
override Gu.Units.Stiffness.ToString() -> string!
~override Gu.Units.StiffnessTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.StiffnessTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.StiffnessTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.StiffnessTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.StiffnessUnit.Equals(object? obj) -> bool
override Gu.Units.StiffnessUnit.GetHashCode() -> int
override Gu.Units.StiffnessUnit.ToString() -> string!
~override Gu.Units.StiffnessUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.StiffnessUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.StiffnessUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.StiffnessUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Temperature.Equals(object? obj) -> bool
override Gu.Units.Temperature.GetHashCode() -> int
override Gu.Units.Temperature.ToString() -> string!
~override Gu.Units.TemperatureTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.TemperatureTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.TemperatureTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.TemperatureTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.TemperatureUnit.Equals(object? obj) -> bool
override Gu.Units.TemperatureUnit.GetHashCode() -> int
override Gu.Units.TemperatureUnit.ToString() -> string!
~override Gu.Units.TemperatureUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.TemperatureUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.TemperatureUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.TemperatureUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Time.Equals(object? obj) -> bool
override Gu.Units.Time.GetHashCode() -> int
override Gu.Units.Time.ToString() -> string!
~override Gu.Units.TimeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.TimeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.TimeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.TimeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.TimeUnit.Equals(object? obj) -> bool
override Gu.Units.TimeUnit.GetHashCode() -> int
override Gu.Units.TimeUnit.ToString() -> string!
~override Gu.Units.TimeUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.TimeUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.TimeUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.TimeUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Torque.Equals(object? obj) -> bool
override Gu.Units.Torque.GetHashCode() -> int
override Gu.Units.Torque.ToString() -> string!
~override Gu.Units.TorqueTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.TorqueTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.TorqueTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.TorqueTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.TorqueUnit.Equals(object? obj) -> bool
override Gu.Units.TorqueUnit.GetHashCode() -> int
override Gu.Units.TorqueUnit.ToString() -> string!
~override Gu.Units.TorqueUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.TorqueUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.TorqueUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.TorqueUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Unitless.Equals(object? obj) -> bool
override Gu.Units.Unitless.GetHashCode() -> int
override Gu.Units.Unitless.ToString() -> string!
~override Gu.Units.UnitlessTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.UnitlessTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.UnitlessTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.UnitlessTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.UnitlessUnit.Equals(object? obj) -> bool
override Gu.Units.UnitlessUnit.GetHashCode() -> int
override Gu.Units.UnitlessUnit.ToString() -> string!
~override Gu.Units.UnitlessUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.UnitlessUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.UnitlessUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.UnitlessUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Voltage.Equals(object? obj) -> bool
override Gu.Units.Voltage.GetHashCode() -> int
override Gu.Units.Voltage.ToString() -> string!
~override Gu.Units.VoltageTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.VoltageTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.VoltageTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.VoltageTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.VoltageUnit.Equals(object? obj) -> bool
override Gu.Units.VoltageUnit.GetHashCode() -> int
override Gu.Units.VoltageUnit.ToString() -> string!
~override Gu.Units.VoltageUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.VoltageUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.VoltageUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.VoltageUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Volume.Equals(object? obj) -> bool
override Gu.Units.Volume.GetHashCode() -> int
override Gu.Units.Volume.ToString() -> string!
override Gu.Units.VolumetricFlow.Equals(object? obj) -> bool
override Gu.Units.VolumetricFlow.GetHashCode() -> int
override Gu.Units.VolumetricFlow.ToString() -> string!
~override Gu.Units.VolumetricFlowTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.VolumetricFlowTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.VolumetricFlowTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.VolumetricFlowTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.VolumetricFlowUnit.Equals(object? obj) -> bool
override Gu.Units.VolumetricFlowUnit.GetHashCode() -> int
override Gu.Units.VolumetricFlowUnit.ToString() -> string!
~override Gu.Units.VolumetricFlowUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.VolumetricFlowUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.VolumetricFlowUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.VolumetricFlowUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
~override Gu.Units.VolumeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.VolumeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.VolumeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.VolumeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.VolumeUnit.Equals(object? obj) -> bool
override Gu.Units.VolumeUnit.GetHashCode() -> int
override Gu.Units.VolumeUnit.ToString() -> string!
~override Gu.Units.VolumeUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.VolumeUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.VolumeUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.VolumeUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.Wavenumber.Equals(object? obj) -> bool
override Gu.Units.Wavenumber.GetHashCode() -> int
override Gu.Units.Wavenumber.ToString() -> string!
~override Gu.Units.WavenumberTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.WavenumberTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.WavenumberTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.WavenumberTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
override Gu.Units.WavenumberUnit.Equals(object? obj) -> bool
override Gu.Units.WavenumberUnit.GetHashCode() -> int
override Gu.Units.WavenumberUnit.ToString() -> string!
~override Gu.Units.WavenumberUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) -> bool
~override Gu.Units.WavenumberUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) -> bool
~override Gu.Units.WavenumberUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) -> object
~override Gu.Units.WavenumberUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) -> object
static Gu.Units.Acceleration.From(double value, Gu.Units.AccelerationUnit unit) -> Gu.Units.Acceleration
static Gu.Units.Acceleration.FromCentimetresPerHourSquared(double centimetresPerHourSquared) -> Gu.Units.Acceleration
static Gu.Units.Acceleration.FromCentimetresPerSecondSquared(double centimetresPerSecondSquared) -> Gu.Units.Acceleration
static Gu.Units.Acceleration.FromMetresPerHourSquared(double metresPerHourSquared) -> Gu.Units.Acceleration
static Gu.Units.Acceleration.FromMetresPerMinuteSquared(double metresPerMinuteSquared) -> Gu.Units.Acceleration
static Gu.Units.Acceleration.FromMetresPerSecondSquared(double metresPerSecondSquared) -> Gu.Units.Acceleration
static Gu.Units.Acceleration.FromMillimetresPerHourSquared(double millimetresPerHourSquared) -> Gu.Units.Acceleration
static Gu.Units.Acceleration.FromMillimetresPerMinuteSquared(double millimetresPerMinuteSquared) -> Gu.Units.Acceleration
static Gu.Units.Acceleration.FromMillimetresPerSecondSquared(double millimetresPerSecondSquared) -> Gu.Units.Acceleration
static Gu.Units.Acceleration.operator !=(Gu.Units.Acceleration left, Gu.Units.Acceleration right) -> bool
static Gu.Units.Acceleration.operator *(double left, Gu.Units.Acceleration right) -> Gu.Units.Acceleration
static Gu.Units.Acceleration.operator *(Gu.Units.Acceleration left, double right) -> Gu.Units.Acceleration
static Gu.Units.Acceleration.operator *(Gu.Units.Acceleration left, Gu.Units.AreaDensity right) -> Gu.Units.Pressure
static Gu.Units.Acceleration.operator *(Gu.Units.Acceleration left, Gu.Units.Frequency right) -> Gu.Units.Jerk
static Gu.Units.Acceleration.operator *(Gu.Units.Acceleration left, Gu.Units.Length right) -> Gu.Units.SpecificEnergy
static Gu.Units.Acceleration.operator *(Gu.Units.Acceleration left, Gu.Units.Mass right) -> Gu.Units.Force
static Gu.Units.Acceleration.operator *(Gu.Units.Acceleration left, Gu.Units.Momentum right) -> Gu.Units.Power
static Gu.Units.Acceleration.operator *(Gu.Units.Acceleration left, Gu.Units.Time right) -> Gu.Units.Speed
static Gu.Units.Acceleration.operator +(Gu.Units.Acceleration acceleration) -> Gu.Units.Acceleration
static Gu.Units.Acceleration.operator +(Gu.Units.Acceleration left, Gu.Units.Acceleration right) -> Gu.Units.Acceleration
static Gu.Units.Acceleration.operator -(Gu.Units.Acceleration acceleration) -> Gu.Units.Acceleration
static Gu.Units.Acceleration.operator -(Gu.Units.Acceleration left, Gu.Units.Acceleration right) -> Gu.Units.Acceleration
static Gu.Units.Acceleration.operator /(Gu.Units.Acceleration left, double right) -> Gu.Units.Acceleration
static Gu.Units.Acceleration.operator /(Gu.Units.Acceleration left, Gu.Units.Acceleration right) -> double
static Gu.Units.Acceleration.operator /(Gu.Units.Acceleration left, Gu.Units.Frequency right) -> Gu.Units.Speed
static Gu.Units.Acceleration.operator /(Gu.Units.Acceleration left, Gu.Units.Jerk right) -> Gu.Units.Time
static Gu.Units.Acceleration.operator /(Gu.Units.Acceleration left, Gu.Units.SpecificEnergy right) -> Gu.Units.Wavenumber
static Gu.Units.Acceleration.operator /(Gu.Units.Acceleration left, Gu.Units.Speed right) -> Gu.Units.Frequency
static Gu.Units.Acceleration.operator /(Gu.Units.Acceleration left, Gu.Units.Time right) -> Gu.Units.Jerk
static Gu.Units.Acceleration.operator /(Gu.Units.Acceleration left, Gu.Units.Wavenumber right) -> Gu.Units.SpecificEnergy
static Gu.Units.Acceleration.operator <(Gu.Units.Acceleration left, Gu.Units.Acceleration right) -> bool
static Gu.Units.Acceleration.operator <=(Gu.Units.Acceleration left, Gu.Units.Acceleration right) -> bool
static Gu.Units.Acceleration.operator ==(Gu.Units.Acceleration left, Gu.Units.Acceleration right) -> bool
static Gu.Units.Acceleration.operator >(Gu.Units.Acceleration left, Gu.Units.Acceleration right) -> bool
static Gu.Units.Acceleration.operator >=(Gu.Units.Acceleration left, Gu.Units.Acceleration right) -> bool
static Gu.Units.Acceleration.Parse(string! text) -> Gu.Units.Acceleration
static Gu.Units.Acceleration.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Acceleration
static Gu.Units.Acceleration.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Acceleration
static Gu.Units.Acceleration.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Acceleration
static Gu.Units.Acceleration.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Acceleration
static Gu.Units.Acceleration.TryParse(string! text, out Gu.Units.Acceleration result) -> bool
static Gu.Units.Acceleration.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Acceleration result) -> bool
static Gu.Units.Acceleration.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Acceleration result) -> bool
static Gu.Units.Acceleration.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Acceleration result) -> bool
static Gu.Units.AccelerationUnit.operator !=(Gu.Units.AccelerationUnit left, Gu.Units.AccelerationUnit right) -> bool
static Gu.Units.AccelerationUnit.operator *(double left, Gu.Units.AccelerationUnit right) -> Gu.Units.Acceleration
static Gu.Units.AccelerationUnit.operator ==(Gu.Units.AccelerationUnit left, Gu.Units.AccelerationUnit right) -> bool
static Gu.Units.AccelerationUnit.Parse(string! text) -> Gu.Units.AccelerationUnit
static Gu.Units.AccelerationUnit.TryParse(string! text, out Gu.Units.AccelerationUnit result) -> bool
static Gu.Units.AmountOfSubstance.From(double value, Gu.Units.AmountOfSubstanceUnit unit) -> Gu.Units.AmountOfSubstance
static Gu.Units.AmountOfSubstance.FromMoles(double moles) -> Gu.Units.AmountOfSubstance
static Gu.Units.AmountOfSubstance.operator !=(Gu.Units.AmountOfSubstance left, Gu.Units.AmountOfSubstance right) -> bool
static Gu.Units.AmountOfSubstance.operator *(double left, Gu.Units.AmountOfSubstance right) -> Gu.Units.AmountOfSubstance
static Gu.Units.AmountOfSubstance.operator *(Gu.Units.AmountOfSubstance left, double right) -> Gu.Units.AmountOfSubstance
static Gu.Units.AmountOfSubstance.operator *(Gu.Units.AmountOfSubstance left, Gu.Units.Frequency right) -> Gu.Units.CatalyticActivity
static Gu.Units.AmountOfSubstance.operator *(Gu.Units.AmountOfSubstance left, Gu.Units.MolarMass right) -> Gu.Units.Mass
static Gu.Units.AmountOfSubstance.operator +(Gu.Units.AmountOfSubstance amountOfSubstance) -> Gu.Units.AmountOfSubstance
static Gu.Units.AmountOfSubstance.operator +(Gu.Units.AmountOfSubstance left, Gu.Units.AmountOfSubstance right) -> Gu.Units.AmountOfSubstance
static Gu.Units.AmountOfSubstance.operator -(Gu.Units.AmountOfSubstance amountOfSubstance) -> Gu.Units.AmountOfSubstance
static Gu.Units.AmountOfSubstance.operator -(Gu.Units.AmountOfSubstance left, Gu.Units.AmountOfSubstance right) -> Gu.Units.AmountOfSubstance
static Gu.Units.AmountOfSubstance.operator /(Gu.Units.AmountOfSubstance left, double right) -> Gu.Units.AmountOfSubstance
static Gu.Units.AmountOfSubstance.operator /(Gu.Units.AmountOfSubstance left, Gu.Units.AmountOfSubstance right) -> double
static Gu.Units.AmountOfSubstance.operator /(Gu.Units.AmountOfSubstance left, Gu.Units.CatalyticActivity right) -> Gu.Units.Time
static Gu.Units.AmountOfSubstance.operator /(Gu.Units.AmountOfSubstance left, Gu.Units.Time right) -> Gu.Units.CatalyticActivity
static Gu.Units.AmountOfSubstance.operator <(Gu.Units.AmountOfSubstance left, Gu.Units.AmountOfSubstance right) -> bool
static Gu.Units.AmountOfSubstance.operator <=(Gu.Units.AmountOfSubstance left, Gu.Units.AmountOfSubstance right) -> bool
static Gu.Units.AmountOfSubstance.operator ==(Gu.Units.AmountOfSubstance left, Gu.Units.AmountOfSubstance right) -> bool
static Gu.Units.AmountOfSubstance.operator >(Gu.Units.AmountOfSubstance left, Gu.Units.AmountOfSubstance right) -> bool
static Gu.Units.AmountOfSubstance.operator >=(Gu.Units.AmountOfSubstance left, Gu.Units.AmountOfSubstance right) -> bool
static Gu.Units.AmountOfSubstance.Parse(string! text) -> Gu.Units.AmountOfSubstance
static Gu.Units.AmountOfSubstance.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.AmountOfSubstance
static Gu.Units.AmountOfSubstance.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.AmountOfSubstance
static Gu.Units.AmountOfSubstance.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.AmountOfSubstance
static Gu.Units.AmountOfSubstance.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.AmountOfSubstance
static Gu.Units.AmountOfSubstance.TryParse(string! text, out Gu.Units.AmountOfSubstance result) -> bool
static Gu.Units.AmountOfSubstance.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.AmountOfSubstance result) -> bool
static Gu.Units.AmountOfSubstance.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.AmountOfSubstance result) -> bool
static Gu.Units.AmountOfSubstance.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.AmountOfSubstance result) -> bool
static Gu.Units.AmountOfSubstanceUnit.operator !=(Gu.Units.AmountOfSubstanceUnit left, Gu.Units.AmountOfSubstanceUnit right) -> bool
static Gu.Units.AmountOfSubstanceUnit.operator *(double left, Gu.Units.AmountOfSubstanceUnit right) -> Gu.Units.AmountOfSubstance
static Gu.Units.AmountOfSubstanceUnit.operator ==(Gu.Units.AmountOfSubstanceUnit left, Gu.Units.AmountOfSubstanceUnit right) -> bool
static Gu.Units.AmountOfSubstanceUnit.Parse(string! text) -> Gu.Units.AmountOfSubstanceUnit
static Gu.Units.AmountOfSubstanceUnit.TryParse(string! text, out Gu.Units.AmountOfSubstanceUnit result) -> bool
static Gu.Units.Angle.From(double value, Gu.Units.AngleUnit unit) -> Gu.Units.Angle
static Gu.Units.Angle.FromDegrees(double degrees) -> Gu.Units.Angle
static Gu.Units.Angle.FromRadians(double radians) -> Gu.Units.Angle
static Gu.Units.Angle.operator !=(Gu.Units.Angle left, Gu.Units.Angle right) -> bool
static Gu.Units.Angle.operator *(double left, Gu.Units.Angle right) -> Gu.Units.Angle
static Gu.Units.Angle.operator *(Gu.Units.Angle left, double right) -> Gu.Units.Angle
static Gu.Units.Angle.operator *(Gu.Units.Angle left, Gu.Units.Frequency right) -> Gu.Units.AngularSpeed
static Gu.Units.Angle.operator *(Gu.Units.Angle left, Gu.Units.Torque right) -> Gu.Units.Energy
static Gu.Units.Angle.operator +(Gu.Units.Angle angle) -> Gu.Units.Angle
static Gu.Units.Angle.operator +(Gu.Units.Angle left, Gu.Units.Angle right) -> Gu.Units.Angle
static Gu.Units.Angle.operator -(Gu.Units.Angle angle) -> Gu.Units.Angle
static Gu.Units.Angle.operator -(Gu.Units.Angle left, Gu.Units.Angle right) -> Gu.Units.Angle
static Gu.Units.Angle.operator /(Gu.Units.Angle left, double right) -> Gu.Units.Angle
static Gu.Units.Angle.operator /(Gu.Units.Angle left, Gu.Units.Angle right) -> double
static Gu.Units.Angle.operator /(Gu.Units.Angle left, Gu.Units.AnglePerUnitless right) -> Gu.Units.Unitless
static Gu.Units.Angle.operator /(Gu.Units.Angle left, Gu.Units.AngularSpeed right) -> Gu.Units.Time
static Gu.Units.Angle.operator /(Gu.Units.Angle left, Gu.Units.Time right) -> Gu.Units.AngularSpeed
static Gu.Units.Angle.operator /(Gu.Units.Angle left, Gu.Units.Unitless right) -> Gu.Units.AnglePerUnitless
static Gu.Units.Angle.operator <(Gu.Units.Angle left, Gu.Units.Angle right) -> bool
static Gu.Units.Angle.operator <=(Gu.Units.Angle left, Gu.Units.Angle right) -> bool
static Gu.Units.Angle.operator ==(Gu.Units.Angle left, Gu.Units.Angle right) -> bool
static Gu.Units.Angle.operator >(Gu.Units.Angle left, Gu.Units.Angle right) -> bool
static Gu.Units.Angle.operator >=(Gu.Units.Angle left, Gu.Units.Angle right) -> bool
static Gu.Units.Angle.Parse(string! text) -> Gu.Units.Angle
static Gu.Units.Angle.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Angle
static Gu.Units.Angle.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Angle
static Gu.Units.Angle.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Angle
static Gu.Units.Angle.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Angle
static Gu.Units.Angle.TryParse(string! text, out Gu.Units.Angle result) -> bool
static Gu.Units.Angle.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Angle result) -> bool
static Gu.Units.Angle.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Angle result) -> bool
static Gu.Units.Angle.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Angle result) -> bool
static Gu.Units.AnglePerUnitless.From(double value, Gu.Units.AnglePerUnitlessUnit unit) -> Gu.Units.AnglePerUnitless
static Gu.Units.AnglePerUnitless.FromDegreesPerPercent(double degreesPerPercent) -> Gu.Units.AnglePerUnitless
static Gu.Units.AnglePerUnitless.FromRadiansPerPercent(double radiansPerPercent) -> Gu.Units.AnglePerUnitless
static Gu.Units.AnglePerUnitless.FromRadiansPerUnitless(double radiansPerUnitless) -> Gu.Units.AnglePerUnitless
static Gu.Units.AnglePerUnitless.operator !=(Gu.Units.AnglePerUnitless left, Gu.Units.AnglePerUnitless right) -> bool
static Gu.Units.AnglePerUnitless.operator *(double left, Gu.Units.AnglePerUnitless right) -> Gu.Units.AnglePerUnitless
static Gu.Units.AnglePerUnitless.operator *(Gu.Units.AnglePerUnitless left, double right) -> Gu.Units.AnglePerUnitless
static Gu.Units.AnglePerUnitless.operator *(Gu.Units.AnglePerUnitless left, Gu.Units.Unitless right) -> Gu.Units.Angle
static Gu.Units.AnglePerUnitless.operator +(Gu.Units.AnglePerUnitless anglePerUnitless) -> Gu.Units.AnglePerUnitless
static Gu.Units.AnglePerUnitless.operator +(Gu.Units.AnglePerUnitless left, Gu.Units.AnglePerUnitless right) -> Gu.Units.AnglePerUnitless
static Gu.Units.AnglePerUnitless.operator -(Gu.Units.AnglePerUnitless anglePerUnitless) -> Gu.Units.AnglePerUnitless
static Gu.Units.AnglePerUnitless.operator -(Gu.Units.AnglePerUnitless left, Gu.Units.AnglePerUnitless right) -> Gu.Units.AnglePerUnitless
static Gu.Units.AnglePerUnitless.operator /(Gu.Units.AnglePerUnitless left, double right) -> Gu.Units.AnglePerUnitless
static Gu.Units.AnglePerUnitless.operator /(Gu.Units.AnglePerUnitless left, Gu.Units.AnglePerUnitless right) -> double
static Gu.Units.AnglePerUnitless.operator <(Gu.Units.AnglePerUnitless left, Gu.Units.AnglePerUnitless right) -> bool
static Gu.Units.AnglePerUnitless.operator <=(Gu.Units.AnglePerUnitless left, Gu.Units.AnglePerUnitless right) -> bool
static Gu.Units.AnglePerUnitless.operator ==(Gu.Units.AnglePerUnitless left, Gu.Units.AnglePerUnitless right) -> bool
static Gu.Units.AnglePerUnitless.operator >(Gu.Units.AnglePerUnitless left, Gu.Units.AnglePerUnitless right) -> bool
static Gu.Units.AnglePerUnitless.operator >=(Gu.Units.AnglePerUnitless left, Gu.Units.AnglePerUnitless right) -> bool
static Gu.Units.AnglePerUnitless.Parse(string! text) -> Gu.Units.AnglePerUnitless
static Gu.Units.AnglePerUnitless.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.AnglePerUnitless
static Gu.Units.AnglePerUnitless.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.AnglePerUnitless
static Gu.Units.AnglePerUnitless.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.AnglePerUnitless
static Gu.Units.AnglePerUnitless.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.AnglePerUnitless
static Gu.Units.AnglePerUnitless.TryParse(string! text, out Gu.Units.AnglePerUnitless result) -> bool
static Gu.Units.AnglePerUnitless.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.AnglePerUnitless result) -> bool
static Gu.Units.AnglePerUnitless.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.AnglePerUnitless result) -> bool
static Gu.Units.AnglePerUnitless.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.AnglePerUnitless result) -> bool
static Gu.Units.AnglePerUnitlessUnit.operator !=(Gu.Units.AnglePerUnitlessUnit left, Gu.Units.AnglePerUnitlessUnit right) -> bool
static Gu.Units.AnglePerUnitlessUnit.operator *(double left, Gu.Units.AnglePerUnitlessUnit right) -> Gu.Units.AnglePerUnitless
static Gu.Units.AnglePerUnitlessUnit.operator ==(Gu.Units.AnglePerUnitlessUnit left, Gu.Units.AnglePerUnitlessUnit right) -> bool
static Gu.Units.AnglePerUnitlessUnit.Parse(string! text) -> Gu.Units.AnglePerUnitlessUnit
static Gu.Units.AnglePerUnitlessUnit.TryParse(string! text, out Gu.Units.AnglePerUnitlessUnit result) -> bool
static Gu.Units.AngleUnit.operator !=(Gu.Units.AngleUnit left, Gu.Units.AngleUnit right) -> bool
static Gu.Units.AngleUnit.operator *(double left, Gu.Units.AngleUnit right) -> Gu.Units.Angle
static Gu.Units.AngleUnit.operator ==(Gu.Units.AngleUnit left, Gu.Units.AngleUnit right) -> bool
static Gu.Units.AngleUnit.Parse(string! text) -> Gu.Units.AngleUnit
static Gu.Units.AngleUnit.TryParse(string! text, out Gu.Units.AngleUnit result) -> bool
static Gu.Units.AngularAcceleration.From(double value, Gu.Units.AngularAccelerationUnit unit) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularAcceleration.FromDegreesPerHourSquared(double degreesPerHourSquared) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularAcceleration.FromDegreesPerMinuteSquared(double degreesPerMinuteSquared) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularAcceleration.FromDegreesPerSecondSquared(double degreesPerSecondSquared) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularAcceleration.FromRadiansPerHourSquared(double radiansPerHourSquared) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularAcceleration.FromRadiansPerMinuteSquared(double radiansPerMinuteSquared) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularAcceleration.FromRadiansPerSecondSquared(double radiansPerSecondSquared) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularAcceleration.operator !=(Gu.Units.AngularAcceleration left, Gu.Units.AngularAcceleration right) -> bool
static Gu.Units.AngularAcceleration.operator *(double left, Gu.Units.AngularAcceleration right) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularAcceleration.operator *(Gu.Units.AngularAcceleration left, double right) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularAcceleration.operator *(Gu.Units.AngularAcceleration left, Gu.Units.Frequency right) -> Gu.Units.AngularJerk
static Gu.Units.AngularAcceleration.operator *(Gu.Units.AngularAcceleration left, Gu.Units.Time right) -> Gu.Units.AngularSpeed
static Gu.Units.AngularAcceleration.operator +(Gu.Units.AngularAcceleration angularAcceleration) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularAcceleration.operator +(Gu.Units.AngularAcceleration left, Gu.Units.AngularAcceleration right) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularAcceleration.operator -(Gu.Units.AngularAcceleration angularAcceleration) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularAcceleration.operator -(Gu.Units.AngularAcceleration left, Gu.Units.AngularAcceleration right) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularAcceleration.operator /(Gu.Units.AngularAcceleration left, double right) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularAcceleration.operator /(Gu.Units.AngularAcceleration left, Gu.Units.AngularAcceleration right) -> double
static Gu.Units.AngularAcceleration.operator /(Gu.Units.AngularAcceleration left, Gu.Units.AngularJerk right) -> Gu.Units.Time
static Gu.Units.AngularAcceleration.operator /(Gu.Units.AngularAcceleration left, Gu.Units.AngularSpeed right) -> Gu.Units.Frequency
static Gu.Units.AngularAcceleration.operator /(Gu.Units.AngularAcceleration left, Gu.Units.Frequency right) -> Gu.Units.AngularSpeed
static Gu.Units.AngularAcceleration.operator /(Gu.Units.AngularAcceleration left, Gu.Units.Time right) -> Gu.Units.AngularJerk
static Gu.Units.AngularAcceleration.operator <(Gu.Units.AngularAcceleration left, Gu.Units.AngularAcceleration right) -> bool
static Gu.Units.AngularAcceleration.operator <=(Gu.Units.AngularAcceleration left, Gu.Units.AngularAcceleration right) -> bool
static Gu.Units.AngularAcceleration.operator ==(Gu.Units.AngularAcceleration left, Gu.Units.AngularAcceleration right) -> bool
static Gu.Units.AngularAcceleration.operator >(Gu.Units.AngularAcceleration left, Gu.Units.AngularAcceleration right) -> bool
static Gu.Units.AngularAcceleration.operator >=(Gu.Units.AngularAcceleration left, Gu.Units.AngularAcceleration right) -> bool
static Gu.Units.AngularAcceleration.Parse(string! text) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularAcceleration.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularAcceleration.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularAcceleration.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularAcceleration.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularAcceleration.TryParse(string! text, out Gu.Units.AngularAcceleration result) -> bool
static Gu.Units.AngularAcceleration.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.AngularAcceleration result) -> bool
static Gu.Units.AngularAcceleration.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.AngularAcceleration result) -> bool
static Gu.Units.AngularAcceleration.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.AngularAcceleration result) -> bool
static Gu.Units.AngularAccelerationUnit.operator !=(Gu.Units.AngularAccelerationUnit left, Gu.Units.AngularAccelerationUnit right) -> bool
static Gu.Units.AngularAccelerationUnit.operator *(double left, Gu.Units.AngularAccelerationUnit right) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularAccelerationUnit.operator ==(Gu.Units.AngularAccelerationUnit left, Gu.Units.AngularAccelerationUnit right) -> bool
static Gu.Units.AngularAccelerationUnit.Parse(string! text) -> Gu.Units.AngularAccelerationUnit
static Gu.Units.AngularAccelerationUnit.TryParse(string! text, out Gu.Units.AngularAccelerationUnit result) -> bool
static Gu.Units.AngularJerk.From(double value, Gu.Units.AngularJerkUnit unit) -> Gu.Units.AngularJerk
static Gu.Units.AngularJerk.FromDegreesPerHourCubed(double degreesPerHourCubed) -> Gu.Units.AngularJerk
static Gu.Units.AngularJerk.FromDegreesPerMinuteCubed(double degreesPerMinuteCubed) -> Gu.Units.AngularJerk
static Gu.Units.AngularJerk.FromDegreesPerSecondCubed(double degreesPerSecondCubed) -> Gu.Units.AngularJerk
static Gu.Units.AngularJerk.FromRadiansPerHourCubed(double radiansPerHourCubed) -> Gu.Units.AngularJerk
static Gu.Units.AngularJerk.FromRadiansPerMinuteCubed(double radiansPerMinuteCubed) -> Gu.Units.AngularJerk
static Gu.Units.AngularJerk.FromRadiansPerSecondCubed(double radiansPerSecondCubed) -> Gu.Units.AngularJerk
static Gu.Units.AngularJerk.operator !=(Gu.Units.AngularJerk left, Gu.Units.AngularJerk right) -> bool
static Gu.Units.AngularJerk.operator *(double left, Gu.Units.AngularJerk right) -> Gu.Units.AngularJerk
static Gu.Units.AngularJerk.operator *(Gu.Units.AngularJerk left, double right) -> Gu.Units.AngularJerk
static Gu.Units.AngularJerk.operator *(Gu.Units.AngularJerk left, Gu.Units.Time right) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularJerk.operator +(Gu.Units.AngularJerk angularJerk) -> Gu.Units.AngularJerk
static Gu.Units.AngularJerk.operator +(Gu.Units.AngularJerk left, Gu.Units.AngularJerk right) -> Gu.Units.AngularJerk
static Gu.Units.AngularJerk.operator -(Gu.Units.AngularJerk angularJerk) -> Gu.Units.AngularJerk
static Gu.Units.AngularJerk.operator -(Gu.Units.AngularJerk left, Gu.Units.AngularJerk right) -> Gu.Units.AngularJerk
static Gu.Units.AngularJerk.operator /(Gu.Units.AngularJerk left, double right) -> Gu.Units.AngularJerk
static Gu.Units.AngularJerk.operator /(Gu.Units.AngularJerk left, Gu.Units.AngularAcceleration right) -> Gu.Units.Frequency
static Gu.Units.AngularJerk.operator /(Gu.Units.AngularJerk left, Gu.Units.AngularJerk right) -> double
static Gu.Units.AngularJerk.operator /(Gu.Units.AngularJerk left, Gu.Units.Frequency right) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularJerk.operator <(Gu.Units.AngularJerk left, Gu.Units.AngularJerk right) -> bool
static Gu.Units.AngularJerk.operator <=(Gu.Units.AngularJerk left, Gu.Units.AngularJerk right) -> bool
static Gu.Units.AngularJerk.operator ==(Gu.Units.AngularJerk left, Gu.Units.AngularJerk right) -> bool
static Gu.Units.AngularJerk.operator >(Gu.Units.AngularJerk left, Gu.Units.AngularJerk right) -> bool
static Gu.Units.AngularJerk.operator >=(Gu.Units.AngularJerk left, Gu.Units.AngularJerk right) -> bool
static Gu.Units.AngularJerk.Parse(string! text) -> Gu.Units.AngularJerk
static Gu.Units.AngularJerk.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.AngularJerk
static Gu.Units.AngularJerk.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.AngularJerk
static Gu.Units.AngularJerk.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.AngularJerk
static Gu.Units.AngularJerk.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.AngularJerk
static Gu.Units.AngularJerk.TryParse(string! text, out Gu.Units.AngularJerk result) -> bool
static Gu.Units.AngularJerk.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.AngularJerk result) -> bool
static Gu.Units.AngularJerk.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.AngularJerk result) -> bool
static Gu.Units.AngularJerk.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.AngularJerk result) -> bool
static Gu.Units.AngularJerkUnit.operator !=(Gu.Units.AngularJerkUnit left, Gu.Units.AngularJerkUnit right) -> bool
static Gu.Units.AngularJerkUnit.operator *(double left, Gu.Units.AngularJerkUnit right) -> Gu.Units.AngularJerk
static Gu.Units.AngularJerkUnit.operator ==(Gu.Units.AngularJerkUnit left, Gu.Units.AngularJerkUnit right) -> bool
static Gu.Units.AngularJerkUnit.Parse(string! text) -> Gu.Units.AngularJerkUnit
static Gu.Units.AngularJerkUnit.TryParse(string! text, out Gu.Units.AngularJerkUnit result) -> bool
static Gu.Units.AngularSpeed.From(double value, Gu.Units.AngularSpeedUnit unit) -> Gu.Units.AngularSpeed
static Gu.Units.AngularSpeed.FromDegreesPerHour(double degreesPerHour) -> Gu.Units.AngularSpeed
static Gu.Units.AngularSpeed.FromDegreesPerMinute(double degreesPerMinute) -> Gu.Units.AngularSpeed
static Gu.Units.AngularSpeed.FromDegreesPerSecond(double degreesPerSecond) -> Gu.Units.AngularSpeed
static Gu.Units.AngularSpeed.FromRadiansPerHour(double radiansPerHour) -> Gu.Units.AngularSpeed
static Gu.Units.AngularSpeed.FromRadiansPerMinute(double radiansPerMinute) -> Gu.Units.AngularSpeed
static Gu.Units.AngularSpeed.FromRadiansPerSecond(double radiansPerSecond) -> Gu.Units.AngularSpeed
static Gu.Units.AngularSpeed.FromRevolutionsPerMinute(double revolutionsPerMinute) -> Gu.Units.AngularSpeed
static Gu.Units.AngularSpeed.operator !=(Gu.Units.AngularSpeed left, Gu.Units.AngularSpeed right) -> bool
static Gu.Units.AngularSpeed.operator *(double left, Gu.Units.AngularSpeed right) -> Gu.Units.AngularSpeed
static Gu.Units.AngularSpeed.operator *(Gu.Units.AngularSpeed left, double right) -> Gu.Units.AngularSpeed
static Gu.Units.AngularSpeed.operator *(Gu.Units.AngularSpeed left, Gu.Units.Frequency right) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularSpeed.operator *(Gu.Units.AngularSpeed left, Gu.Units.Time right) -> Gu.Units.Angle
static Gu.Units.AngularSpeed.operator *(Gu.Units.AngularSpeed left, Gu.Units.Torque right) -> Gu.Units.Power
static Gu.Units.AngularSpeed.operator +(Gu.Units.AngularSpeed angularSpeed) -> Gu.Units.AngularSpeed
static Gu.Units.AngularSpeed.operator +(Gu.Units.AngularSpeed left, Gu.Units.AngularSpeed right) -> Gu.Units.AngularSpeed
static Gu.Units.AngularSpeed.operator -(Gu.Units.AngularSpeed angularSpeed) -> Gu.Units.AngularSpeed
static Gu.Units.AngularSpeed.operator -(Gu.Units.AngularSpeed left, Gu.Units.AngularSpeed right) -> Gu.Units.AngularSpeed
static Gu.Units.AngularSpeed.operator /(Gu.Units.AngularSpeed left, double right) -> Gu.Units.AngularSpeed
static Gu.Units.AngularSpeed.operator /(Gu.Units.AngularSpeed left, Gu.Units.Angle right) -> Gu.Units.Frequency
static Gu.Units.AngularSpeed.operator /(Gu.Units.AngularSpeed left, Gu.Units.AngularAcceleration right) -> Gu.Units.Time
static Gu.Units.AngularSpeed.operator /(Gu.Units.AngularSpeed left, Gu.Units.AngularSpeed right) -> double
static Gu.Units.AngularSpeed.operator /(Gu.Units.AngularSpeed left, Gu.Units.Frequency right) -> Gu.Units.Angle
static Gu.Units.AngularSpeed.operator /(Gu.Units.AngularSpeed left, Gu.Units.Time right) -> Gu.Units.AngularAcceleration
static Gu.Units.AngularSpeed.operator <(Gu.Units.AngularSpeed left, Gu.Units.AngularSpeed right) -> bool
static Gu.Units.AngularSpeed.operator <=(Gu.Units.AngularSpeed left, Gu.Units.AngularSpeed right) -> bool
static Gu.Units.AngularSpeed.operator ==(Gu.Units.AngularSpeed left, Gu.Units.AngularSpeed right) -> bool
static Gu.Units.AngularSpeed.operator >(Gu.Units.AngularSpeed left, Gu.Units.AngularSpeed right) -> bool
static Gu.Units.AngularSpeed.operator >=(Gu.Units.AngularSpeed left, Gu.Units.AngularSpeed right) -> bool
static Gu.Units.AngularSpeed.Parse(string! text) -> Gu.Units.AngularSpeed
static Gu.Units.AngularSpeed.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.AngularSpeed
static Gu.Units.AngularSpeed.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.AngularSpeed
static Gu.Units.AngularSpeed.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.AngularSpeed
static Gu.Units.AngularSpeed.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.AngularSpeed
static Gu.Units.AngularSpeed.TryParse(string! text, out Gu.Units.AngularSpeed result) -> bool
static Gu.Units.AngularSpeed.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.AngularSpeed result) -> bool
static Gu.Units.AngularSpeed.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.AngularSpeed result) -> bool
static Gu.Units.AngularSpeed.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.AngularSpeed result) -> bool
static Gu.Units.AngularSpeedUnit.operator !=(Gu.Units.AngularSpeedUnit left, Gu.Units.AngularSpeedUnit right) -> bool
static Gu.Units.AngularSpeedUnit.operator *(double left, Gu.Units.AngularSpeedUnit right) -> Gu.Units.AngularSpeed
static Gu.Units.AngularSpeedUnit.operator ==(Gu.Units.AngularSpeedUnit left, Gu.Units.AngularSpeedUnit right) -> bool
static Gu.Units.AngularSpeedUnit.Parse(string! text) -> Gu.Units.AngularSpeedUnit
static Gu.Units.AngularSpeedUnit.TryParse(string! text, out Gu.Units.AngularSpeedUnit result) -> bool
static Gu.Units.Area.From(double value, Gu.Units.AreaUnit unit) -> Gu.Units.Area
static Gu.Units.Area.FromHectares(double hectares) -> Gu.Units.Area
static Gu.Units.Area.FromSquareCentimetres(double squareCentimetres) -> Gu.Units.Area
static Gu.Units.Area.FromSquareDecimetres(double squareDecimetres) -> Gu.Units.Area
static Gu.Units.Area.FromSquareFeet(double squareFeet) -> Gu.Units.Area
static Gu.Units.Area.FromSquareInches(double squareInches) -> Gu.Units.Area
static Gu.Units.Area.FromSquareKilometres(double squareKilometres) -> Gu.Units.Area
static Gu.Units.Area.FromSquareMetres(double squareMetres) -> Gu.Units.Area
static Gu.Units.Area.FromSquareMile(double squareMile) -> Gu.Units.Area
static Gu.Units.Area.FromSquareMillimetres(double squareMillimetres) -> Gu.Units.Area
static Gu.Units.Area.FromSquareYards(double squareYards) -> Gu.Units.Area
static Gu.Units.Area.operator !=(Gu.Units.Area left, Gu.Units.Area right) -> bool
static Gu.Units.Area.operator *(double left, Gu.Units.Area right) -> Gu.Units.Area
static Gu.Units.Area.operator *(Gu.Units.Area left, double right) -> Gu.Units.Area
static Gu.Units.Area.operator *(Gu.Units.Area left, Gu.Units.AreaDensity right) -> Gu.Units.Mass
static Gu.Units.Area.operator *(Gu.Units.Area left, Gu.Units.Frequency right) -> Gu.Units.KinematicViscosity
static Gu.Units.Area.operator *(Gu.Units.Area left, Gu.Units.Illuminance right) -> Gu.Units.LuminousFlux
static Gu.Units.Area.operator *(Gu.Units.Area left, Gu.Units.Length right) -> Gu.Units.Volume
static Gu.Units.Area.operator *(Gu.Units.Area left, Gu.Units.MagneticFieldStrength right) -> Gu.Units.MagneticFlux
static Gu.Units.Area.operator *(Gu.Units.Area left, Gu.Units.Pressure right) -> Gu.Units.Force
static Gu.Units.Area.operator *(Gu.Units.Area left, Gu.Units.Speed right) -> Gu.Units.VolumetricFlow
static Gu.Units.Area.operator *(Gu.Units.Area left, Gu.Units.Stiffness right) -> Gu.Units.Energy
static Gu.Units.Area.operator *(Gu.Units.Area left, Gu.Units.Wavenumber right) -> Gu.Units.Length
static Gu.Units.Area.operator +(Gu.Units.Area area) -> Gu.Units.Area
static Gu.Units.Area.operator +(Gu.Units.Area left, Gu.Units.Area right) -> Gu.Units.Area
static Gu.Units.Area.operator -(Gu.Units.Area area) -> Gu.Units.Area
static Gu.Units.Area.operator -(Gu.Units.Area left, Gu.Units.Area right) -> Gu.Units.Area
static Gu.Units.Area.operator /(Gu.Units.Area left, double right) -> Gu.Units.Area
static Gu.Units.Area.operator /(Gu.Units.Area left, Gu.Units.Area right) -> double
static Gu.Units.Area.operator /(Gu.Units.Area left, Gu.Units.Energy right) -> Gu.Units.Flexibility
static Gu.Units.Area.operator /(Gu.Units.Area left, Gu.Units.Flexibility right) -> Gu.Units.Energy
static Gu.Units.Area.operator /(Gu.Units.Area left, Gu.Units.KinematicViscosity right) -> Gu.Units.Time
static Gu.Units.Area.operator /(Gu.Units.Area left, Gu.Units.Length right) -> Gu.Units.Length
static Gu.Units.Area.operator /(Gu.Units.Area left, Gu.Units.Time right) -> Gu.Units.KinematicViscosity
static Gu.Units.Area.operator /(Gu.Units.Area left, Gu.Units.Volume right) -> Gu.Units.Wavenumber
static Gu.Units.Area.operator /(Gu.Units.Area left, Gu.Units.Wavenumber right) -> Gu.Units.Volume
static Gu.Units.Area.operator <(Gu.Units.Area left, Gu.Units.Area right) -> bool
static Gu.Units.Area.operator <=(Gu.Units.Area left, Gu.Units.Area right) -> bool
static Gu.Units.Area.operator ==(Gu.Units.Area left, Gu.Units.Area right) -> bool
static Gu.Units.Area.operator >(Gu.Units.Area left, Gu.Units.Area right) -> bool
static Gu.Units.Area.operator >=(Gu.Units.Area left, Gu.Units.Area right) -> bool
static Gu.Units.Area.Parse(string! text) -> Gu.Units.Area
static Gu.Units.Area.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Area
static Gu.Units.Area.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Area
static Gu.Units.Area.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Area
static Gu.Units.Area.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Area
static Gu.Units.Area.TryParse(string! text, out Gu.Units.Area result) -> bool
static Gu.Units.Area.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Area result) -> bool
static Gu.Units.Area.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Area result) -> bool
static Gu.Units.Area.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Area result) -> bool
static Gu.Units.AreaDensity.From(double value, Gu.Units.AreaDensityUnit unit) -> Gu.Units.AreaDensity
static Gu.Units.AreaDensity.FromKilogramsPerSquareMetre(double kilogramsPerSquareMetre) -> Gu.Units.AreaDensity
static Gu.Units.AreaDensity.operator !=(Gu.Units.AreaDensity left, Gu.Units.AreaDensity right) -> bool
static Gu.Units.AreaDensity.operator *(double left, Gu.Units.AreaDensity right) -> Gu.Units.AreaDensity
static Gu.Units.AreaDensity.operator *(Gu.Units.AreaDensity left, double right) -> Gu.Units.AreaDensity
static Gu.Units.AreaDensity.operator *(Gu.Units.AreaDensity left, Gu.Units.Acceleration right) -> Gu.Units.Pressure
static Gu.Units.AreaDensity.operator *(Gu.Units.AreaDensity left, Gu.Units.Area right) -> Gu.Units.Mass
static Gu.Units.AreaDensity.operator *(Gu.Units.AreaDensity left, Gu.Units.KinematicViscosity right) -> Gu.Units.MassFlow
static Gu.Units.AreaDensity.operator *(Gu.Units.AreaDensity left, Gu.Units.SpecificEnergy right) -> Gu.Units.Stiffness
static Gu.Units.AreaDensity.operator *(Gu.Units.AreaDensity left, Gu.Units.SpecificVolume right) -> Gu.Units.Length
static Gu.Units.AreaDensity.operator *(Gu.Units.AreaDensity left, Gu.Units.VolumetricFlow right) -> Gu.Units.Momentum
static Gu.Units.AreaDensity.operator *(Gu.Units.AreaDensity left, Gu.Units.Wavenumber right) -> Gu.Units.Density
static Gu.Units.AreaDensity.operator +(Gu.Units.AreaDensity areaDensity) -> Gu.Units.AreaDensity
static Gu.Units.AreaDensity.operator +(Gu.Units.AreaDensity left, Gu.Units.AreaDensity right) -> Gu.Units.AreaDensity
static Gu.Units.AreaDensity.operator -(Gu.Units.AreaDensity areaDensity) -> Gu.Units.AreaDensity
static Gu.Units.AreaDensity.operator -(Gu.Units.AreaDensity left, Gu.Units.AreaDensity right) -> Gu.Units.AreaDensity
static Gu.Units.AreaDensity.operator /(Gu.Units.AreaDensity left, double right) -> Gu.Units.AreaDensity
static Gu.Units.AreaDensity.operator /(Gu.Units.AreaDensity left, Gu.Units.AreaDensity right) -> double
static Gu.Units.AreaDensity.operator /(Gu.Units.AreaDensity left, Gu.Units.Density right) -> Gu.Units.Length
static Gu.Units.AreaDensity.operator /(Gu.Units.AreaDensity left, Gu.Units.Length right) -> Gu.Units.Density
static Gu.Units.AreaDensity.operator <(Gu.Units.AreaDensity left, Gu.Units.AreaDensity right) -> bool
static Gu.Units.AreaDensity.operator <=(Gu.Units.AreaDensity left, Gu.Units.AreaDensity right) -> bool
static Gu.Units.AreaDensity.operator ==(Gu.Units.AreaDensity left, Gu.Units.AreaDensity right) -> bool
static Gu.Units.AreaDensity.operator >(Gu.Units.AreaDensity left, Gu.Units.AreaDensity right) -> bool
static Gu.Units.AreaDensity.operator >=(Gu.Units.AreaDensity left, Gu.Units.AreaDensity right) -> bool
static Gu.Units.AreaDensity.Parse(string! text) -> Gu.Units.AreaDensity
static Gu.Units.AreaDensity.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.AreaDensity
static Gu.Units.AreaDensity.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.AreaDensity
static Gu.Units.AreaDensity.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.AreaDensity
static Gu.Units.AreaDensity.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.AreaDensity
static Gu.Units.AreaDensity.TryParse(string! text, out Gu.Units.AreaDensity result) -> bool
static Gu.Units.AreaDensity.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.AreaDensity result) -> bool
static Gu.Units.AreaDensity.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.AreaDensity result) -> bool
static Gu.Units.AreaDensity.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.AreaDensity result) -> bool
static Gu.Units.AreaDensityUnit.operator !=(Gu.Units.AreaDensityUnit left, Gu.Units.AreaDensityUnit right) -> bool
static Gu.Units.AreaDensityUnit.operator *(double left, Gu.Units.AreaDensityUnit right) -> Gu.Units.AreaDensity
static Gu.Units.AreaDensityUnit.operator ==(Gu.Units.AreaDensityUnit left, Gu.Units.AreaDensityUnit right) -> bool
static Gu.Units.AreaDensityUnit.Parse(string! text) -> Gu.Units.AreaDensityUnit
static Gu.Units.AreaDensityUnit.TryParse(string! text, out Gu.Units.AreaDensityUnit result) -> bool
static Gu.Units.AreaUnit.operator !=(Gu.Units.AreaUnit left, Gu.Units.AreaUnit right) -> bool
static Gu.Units.AreaUnit.operator *(double left, Gu.Units.AreaUnit right) -> Gu.Units.Area
static Gu.Units.AreaUnit.operator ==(Gu.Units.AreaUnit left, Gu.Units.AreaUnit right) -> bool
static Gu.Units.AreaUnit.Parse(string! text) -> Gu.Units.AreaUnit
static Gu.Units.AreaUnit.TryParse(string! text, out Gu.Units.AreaUnit result) -> bool
static Gu.Units.Capacitance.From(double value, Gu.Units.CapacitanceUnit unit) -> Gu.Units.Capacitance
static Gu.Units.Capacitance.FromFarads(double farads) -> Gu.Units.Capacitance
static Gu.Units.Capacitance.FromGigafarads(double gigafarads) -> Gu.Units.Capacitance
static Gu.Units.Capacitance.FromKilofarads(double kilofarads) -> Gu.Units.Capacitance
static Gu.Units.Capacitance.FromMegafarads(double megafarads) -> Gu.Units.Capacitance
static Gu.Units.Capacitance.FromMicrofarads(double microfarads) -> Gu.Units.Capacitance
static Gu.Units.Capacitance.FromMillifarads(double millifarads) -> Gu.Units.Capacitance
static Gu.Units.Capacitance.FromNanofarads(double nanofarads) -> Gu.Units.Capacitance
static Gu.Units.Capacitance.operator !=(Gu.Units.Capacitance left, Gu.Units.Capacitance right) -> bool
static Gu.Units.Capacitance.operator *(double left, Gu.Units.Capacitance right) -> Gu.Units.Capacitance
static Gu.Units.Capacitance.operator *(Gu.Units.Capacitance left, double right) -> Gu.Units.Capacitance
static Gu.Units.Capacitance.operator *(Gu.Units.Capacitance left, Gu.Units.Frequency right) -> Gu.Units.ElectricalConductance
static Gu.Units.Capacitance.operator *(Gu.Units.Capacitance left, Gu.Units.Resistance right) -> Gu.Units.Time
static Gu.Units.Capacitance.operator *(Gu.Units.Capacitance left, Gu.Units.Voltage right) -> Gu.Units.ElectricCharge
static Gu.Units.Capacitance.operator +(Gu.Units.Capacitance capacitance) -> Gu.Units.Capacitance
static Gu.Units.Capacitance.operator +(Gu.Units.Capacitance left, Gu.Units.Capacitance right) -> Gu.Units.Capacitance
static Gu.Units.Capacitance.operator -(Gu.Units.Capacitance capacitance) -> Gu.Units.Capacitance
static Gu.Units.Capacitance.operator -(Gu.Units.Capacitance left, Gu.Units.Capacitance right) -> Gu.Units.Capacitance
static Gu.Units.Capacitance.operator /(Gu.Units.Capacitance left, double right) -> Gu.Units.Capacitance
static Gu.Units.Capacitance.operator /(Gu.Units.Capacitance left, Gu.Units.Capacitance right) -> double
static Gu.Units.Capacitance.operator /(Gu.Units.Capacitance left, Gu.Units.ElectricalConductance right) -> Gu.Units.Time
static Gu.Units.Capacitance.operator /(Gu.Units.Capacitance left, Gu.Units.Time right) -> Gu.Units.ElectricalConductance
static Gu.Units.Capacitance.operator <(Gu.Units.Capacitance left, Gu.Units.Capacitance right) -> bool
static Gu.Units.Capacitance.operator <=(Gu.Units.Capacitance left, Gu.Units.Capacitance right) -> bool
static Gu.Units.Capacitance.operator ==(Gu.Units.Capacitance left, Gu.Units.Capacitance right) -> bool
static Gu.Units.Capacitance.operator >(Gu.Units.Capacitance left, Gu.Units.Capacitance right) -> bool
static Gu.Units.Capacitance.operator >=(Gu.Units.Capacitance left, Gu.Units.Capacitance right) -> bool
static Gu.Units.Capacitance.Parse(string! text) -> Gu.Units.Capacitance
static Gu.Units.Capacitance.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Capacitance
static Gu.Units.Capacitance.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Capacitance
static Gu.Units.Capacitance.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Capacitance
static Gu.Units.Capacitance.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Capacitance
static Gu.Units.Capacitance.TryParse(string! text, out Gu.Units.Capacitance result) -> bool
static Gu.Units.Capacitance.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Capacitance result) -> bool
static Gu.Units.Capacitance.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Capacitance result) -> bool
static Gu.Units.Capacitance.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Capacitance result) -> bool
static Gu.Units.CapacitanceUnit.operator !=(Gu.Units.CapacitanceUnit left, Gu.Units.CapacitanceUnit right) -> bool
static Gu.Units.CapacitanceUnit.operator *(double left, Gu.Units.CapacitanceUnit right) -> Gu.Units.Capacitance
static Gu.Units.CapacitanceUnit.operator ==(Gu.Units.CapacitanceUnit left, Gu.Units.CapacitanceUnit right) -> bool
static Gu.Units.CapacitanceUnit.Parse(string! text) -> Gu.Units.CapacitanceUnit
static Gu.Units.CapacitanceUnit.TryParse(string! text, out Gu.Units.CapacitanceUnit result) -> bool
static Gu.Units.CatalyticActivity.From(double value, Gu.Units.CatalyticActivityUnit unit) -> Gu.Units.CatalyticActivity
static Gu.Units.CatalyticActivity.FromKatals(double katals) -> Gu.Units.CatalyticActivity
static Gu.Units.CatalyticActivity.operator !=(Gu.Units.CatalyticActivity left, Gu.Units.CatalyticActivity right) -> bool
static Gu.Units.CatalyticActivity.operator *(double left, Gu.Units.CatalyticActivity right) -> Gu.Units.CatalyticActivity
static Gu.Units.CatalyticActivity.operator *(Gu.Units.CatalyticActivity left, double right) -> Gu.Units.CatalyticActivity
static Gu.Units.CatalyticActivity.operator *(Gu.Units.CatalyticActivity left, Gu.Units.MolarMass right) -> Gu.Units.MassFlow
static Gu.Units.CatalyticActivity.operator *(Gu.Units.CatalyticActivity left, Gu.Units.Time right) -> Gu.Units.AmountOfSubstance
static Gu.Units.CatalyticActivity.operator +(Gu.Units.CatalyticActivity catalyticActivity) -> Gu.Units.CatalyticActivity
static Gu.Units.CatalyticActivity.operator +(Gu.Units.CatalyticActivity left, Gu.Units.CatalyticActivity right) -> Gu.Units.CatalyticActivity
static Gu.Units.CatalyticActivity.operator -(Gu.Units.CatalyticActivity catalyticActivity) -> Gu.Units.CatalyticActivity
static Gu.Units.CatalyticActivity.operator -(Gu.Units.CatalyticActivity left, Gu.Units.CatalyticActivity right) -> Gu.Units.CatalyticActivity
static Gu.Units.CatalyticActivity.operator /(Gu.Units.CatalyticActivity left, double right) -> Gu.Units.CatalyticActivity
static Gu.Units.CatalyticActivity.operator /(Gu.Units.CatalyticActivity left, Gu.Units.AmountOfSubstance right) -> Gu.Units.Frequency
static Gu.Units.CatalyticActivity.operator /(Gu.Units.CatalyticActivity left, Gu.Units.CatalyticActivity right) -> double
static Gu.Units.CatalyticActivity.operator /(Gu.Units.CatalyticActivity left, Gu.Units.Frequency right) -> Gu.Units.AmountOfSubstance
static Gu.Units.CatalyticActivity.operator <(Gu.Units.CatalyticActivity left, Gu.Units.CatalyticActivity right) -> bool
static Gu.Units.CatalyticActivity.operator <=(Gu.Units.CatalyticActivity left, Gu.Units.CatalyticActivity right) -> bool
static Gu.Units.CatalyticActivity.operator ==(Gu.Units.CatalyticActivity left, Gu.Units.CatalyticActivity right) -> bool
static Gu.Units.CatalyticActivity.operator >(Gu.Units.CatalyticActivity left, Gu.Units.CatalyticActivity right) -> bool
static Gu.Units.CatalyticActivity.operator >=(Gu.Units.CatalyticActivity left, Gu.Units.CatalyticActivity right) -> bool
static Gu.Units.CatalyticActivity.Parse(string! text) -> Gu.Units.CatalyticActivity
static Gu.Units.CatalyticActivity.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.CatalyticActivity
static Gu.Units.CatalyticActivity.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.CatalyticActivity
static Gu.Units.CatalyticActivity.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.CatalyticActivity
static Gu.Units.CatalyticActivity.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.CatalyticActivity
static Gu.Units.CatalyticActivity.TryParse(string! text, out Gu.Units.CatalyticActivity result) -> bool
static Gu.Units.CatalyticActivity.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.CatalyticActivity result) -> bool
static Gu.Units.CatalyticActivity.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.CatalyticActivity result) -> bool
static Gu.Units.CatalyticActivity.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.CatalyticActivity result) -> bool
static Gu.Units.CatalyticActivityUnit.operator !=(Gu.Units.CatalyticActivityUnit left, Gu.Units.CatalyticActivityUnit right) -> bool
static Gu.Units.CatalyticActivityUnit.operator *(double left, Gu.Units.CatalyticActivityUnit right) -> Gu.Units.CatalyticActivity
static Gu.Units.CatalyticActivityUnit.operator ==(Gu.Units.CatalyticActivityUnit left, Gu.Units.CatalyticActivityUnit right) -> bool
static Gu.Units.CatalyticActivityUnit.Parse(string! text) -> Gu.Units.CatalyticActivityUnit
static Gu.Units.CatalyticActivityUnit.TryParse(string! text, out Gu.Units.CatalyticActivityUnit result) -> bool
static Gu.Units.Conductivity.From(double value, Gu.Units.ConductivityUnit unit) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.FromMicrosiemensPerCentimetre(double microsiemensPerCentimetre) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.FromMicrosiemensPerMetre(double microsiemensPerMetre) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.FromMicrosiemensPerMillimetre(double microsiemensPerMillimetre) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.FromMillisiemensPerCentimetre(double millisiemensPerCentimetre) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.FromMillisiemensPerMetre(double millisiemensPerMetre) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.FromMillisiemensPerMillimetre(double millisiemensPerMillimetre) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.FromNanosiemensPerCentimetre(double nanosiemensPerCentimetre) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.FromNanosiemensPerMetre(double nanosiemensPerMetre) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.FromNanosiemensPerMicrometre(double nanosiemensPerMicrometre) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.FromNanosiemensPerMillimetre(double nanosiemensPerMillimetre) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.FromSiemensPerCentimetre(double siemensPerCentimetre) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.FromSiemensPerMetre(double siemensPerMetre) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.FromSiemensPerMillimetre(double siemensPerMillimetre) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.operator !=(Gu.Units.Conductivity left, Gu.Units.Conductivity right) -> bool
static Gu.Units.Conductivity.operator *(double left, Gu.Units.Conductivity right) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.operator *(Gu.Units.Conductivity left, double right) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.operator *(Gu.Units.Conductivity left, Gu.Units.Length right) -> Gu.Units.ElectricalConductance
static Gu.Units.Conductivity.operator *(Gu.Units.Conductivity left, Gu.Units.Resistance right) -> Gu.Units.Wavenumber
static Gu.Units.Conductivity.operator +(Gu.Units.Conductivity conductivity) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.operator +(Gu.Units.Conductivity left, Gu.Units.Conductivity right) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.operator -(Gu.Units.Conductivity conductivity) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.operator -(Gu.Units.Conductivity left, Gu.Units.Conductivity right) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.operator /(Gu.Units.Conductivity left, double right) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.operator /(Gu.Units.Conductivity left, Gu.Units.Conductivity right) -> double
static Gu.Units.Conductivity.operator /(Gu.Units.Conductivity left, Gu.Units.ElectricalConductance right) -> Gu.Units.Wavenumber
static Gu.Units.Conductivity.operator /(Gu.Units.Conductivity left, Gu.Units.Wavenumber right) -> Gu.Units.ElectricalConductance
static Gu.Units.Conductivity.operator <(Gu.Units.Conductivity left, Gu.Units.Conductivity right) -> bool
static Gu.Units.Conductivity.operator <=(Gu.Units.Conductivity left, Gu.Units.Conductivity right) -> bool
static Gu.Units.Conductivity.operator ==(Gu.Units.Conductivity left, Gu.Units.Conductivity right) -> bool
static Gu.Units.Conductivity.operator >(Gu.Units.Conductivity left, Gu.Units.Conductivity right) -> bool
static Gu.Units.Conductivity.operator >=(Gu.Units.Conductivity left, Gu.Units.Conductivity right) -> bool
static Gu.Units.Conductivity.Parse(string! text) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Conductivity
static Gu.Units.Conductivity.TryParse(string! text, out Gu.Units.Conductivity result) -> bool
static Gu.Units.Conductivity.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Conductivity result) -> bool
static Gu.Units.Conductivity.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Conductivity result) -> bool
static Gu.Units.Conductivity.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Conductivity result) -> bool
static Gu.Units.ConductivityUnit.operator !=(Gu.Units.ConductivityUnit left, Gu.Units.ConductivityUnit right) -> bool
static Gu.Units.ConductivityUnit.operator *(double left, Gu.Units.ConductivityUnit right) -> Gu.Units.Conductivity
static Gu.Units.ConductivityUnit.operator ==(Gu.Units.ConductivityUnit left, Gu.Units.ConductivityUnit right) -> bool
static Gu.Units.ConductivityUnit.Parse(string! text) -> Gu.Units.ConductivityUnit
static Gu.Units.ConductivityUnit.TryParse(string! text, out Gu.Units.ConductivityUnit result) -> bool
static Gu.Units.Current.From(double value, Gu.Units.CurrentUnit unit) -> Gu.Units.Current
static Gu.Units.Current.FromAmperes(double amperes) -> Gu.Units.Current
static Gu.Units.Current.FromGigaamperes(double gigaamperes) -> Gu.Units.Current
static Gu.Units.Current.FromKiloamperes(double kiloamperes) -> Gu.Units.Current
static Gu.Units.Current.FromMegaamperes(double megaamperes) -> Gu.Units.Current
static Gu.Units.Current.FromMicroamperes(double microamperes) -> Gu.Units.Current
static Gu.Units.Current.FromMilliamperes(double milliamperes) -> Gu.Units.Current
static Gu.Units.Current.FromNanoamperes(double nanoamperes) -> Gu.Units.Current
static Gu.Units.Current.operator !=(Gu.Units.Current left, Gu.Units.Current right) -> bool
static Gu.Units.Current.operator *(double left, Gu.Units.Current right) -> Gu.Units.Current
static Gu.Units.Current.operator *(Gu.Units.Current left, double right) -> Gu.Units.Current
static Gu.Units.Current.operator *(Gu.Units.Current left, Gu.Units.Inductance right) -> Gu.Units.MagneticFlux
static Gu.Units.Current.operator *(Gu.Units.Current left, Gu.Units.MagneticFieldStrength right) -> Gu.Units.Stiffness
static Gu.Units.Current.operator *(Gu.Units.Current left, Gu.Units.MagneticFlux right) -> Gu.Units.Energy
static Gu.Units.Current.operator *(Gu.Units.Current left, Gu.Units.Resistance right) -> Gu.Units.Voltage
static Gu.Units.Current.operator *(Gu.Units.Current left, Gu.Units.Time right) -> Gu.Units.ElectricCharge
static Gu.Units.Current.operator *(Gu.Units.Current left, Gu.Units.Voltage right) -> Gu.Units.Power
static Gu.Units.Current.operator +(Gu.Units.Current current) -> Gu.Units.Current
static Gu.Units.Current.operator +(Gu.Units.Current left, Gu.Units.Current right) -> Gu.Units.Current
static Gu.Units.Current.operator -(Gu.Units.Current current) -> Gu.Units.Current
static Gu.Units.Current.operator -(Gu.Units.Current left, Gu.Units.Current right) -> Gu.Units.Current
static Gu.Units.Current.operator /(Gu.Units.Current left, double right) -> Gu.Units.Current
static Gu.Units.Current.operator /(Gu.Units.Current left, Gu.Units.Current right) -> double
static Gu.Units.Current.operator /(Gu.Units.Current left, Gu.Units.ElectricalConductance right) -> Gu.Units.Voltage
static Gu.Units.Current.operator /(Gu.Units.Current left, Gu.Units.ElectricCharge right) -> Gu.Units.Frequency
static Gu.Units.Current.operator /(Gu.Units.Current left, Gu.Units.Frequency right) -> Gu.Units.ElectricCharge
static Gu.Units.Current.operator /(Gu.Units.Current left, Gu.Units.Voltage right) -> Gu.Units.ElectricalConductance
static Gu.Units.Current.operator <(Gu.Units.Current left, Gu.Units.Current right) -> bool
static Gu.Units.Current.operator <=(Gu.Units.Current left, Gu.Units.Current right) -> bool
static Gu.Units.Current.operator ==(Gu.Units.Current left, Gu.Units.Current right) -> bool
static Gu.Units.Current.operator >(Gu.Units.Current left, Gu.Units.Current right) -> bool
static Gu.Units.Current.operator >=(Gu.Units.Current left, Gu.Units.Current right) -> bool
static Gu.Units.Current.Parse(string! text) -> Gu.Units.Current
static Gu.Units.Current.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Current
static Gu.Units.Current.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Current
static Gu.Units.Current.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Current
static Gu.Units.Current.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Current
static Gu.Units.Current.TryParse(string! text, out Gu.Units.Current result) -> bool
static Gu.Units.Current.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Current result) -> bool
static Gu.Units.Current.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Current result) -> bool
static Gu.Units.Current.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Current result) -> bool
static Gu.Units.CurrentUnit.operator !=(Gu.Units.CurrentUnit left, Gu.Units.CurrentUnit right) -> bool
static Gu.Units.CurrentUnit.operator *(double left, Gu.Units.CurrentUnit right) -> Gu.Units.Current
static Gu.Units.CurrentUnit.operator ==(Gu.Units.CurrentUnit left, Gu.Units.CurrentUnit right) -> bool
static Gu.Units.CurrentUnit.Parse(string! text) -> Gu.Units.CurrentUnit
static Gu.Units.CurrentUnit.TryParse(string! text, out Gu.Units.CurrentUnit result) -> bool
static Gu.Units.Data.From(double value, Gu.Units.DataUnit unit) -> Gu.Units.Data
static Gu.Units.Data.FromBits(double bits) -> Gu.Units.Data
static Gu.Units.Data.FromByte(double byte) -> Gu.Units.Data
static Gu.Units.Data.FromGigabits(double gigabits) -> Gu.Units.Data
static Gu.Units.Data.FromGigabyte(double gigabyte) -> Gu.Units.Data
static Gu.Units.Data.FromKilobits(double kilobits) -> Gu.Units.Data
static Gu.Units.Data.FromKilobyte(double kilobyte) -> Gu.Units.Data
static Gu.Units.Data.FromMegabits(double megabits) -> Gu.Units.Data
static Gu.Units.Data.FromMegabyte(double megabyte) -> Gu.Units.Data
static Gu.Units.Data.FromTerabyte(double terabyte) -> Gu.Units.Data
static Gu.Units.Data.operator !=(Gu.Units.Data left, Gu.Units.Data right) -> bool
static Gu.Units.Data.operator *(double left, Gu.Units.Data right) -> Gu.Units.Data
static Gu.Units.Data.operator *(Gu.Units.Data left, double right) -> Gu.Units.Data
static Gu.Units.Data.operator +(Gu.Units.Data data) -> Gu.Units.Data
static Gu.Units.Data.operator +(Gu.Units.Data left, Gu.Units.Data right) -> Gu.Units.Data
static Gu.Units.Data.operator -(Gu.Units.Data data) -> Gu.Units.Data
static Gu.Units.Data.operator -(Gu.Units.Data left, Gu.Units.Data right) -> Gu.Units.Data
static Gu.Units.Data.operator /(Gu.Units.Data left, double right) -> Gu.Units.Data
static Gu.Units.Data.operator /(Gu.Units.Data left, Gu.Units.Data right) -> double
static Gu.Units.Data.operator <(Gu.Units.Data left, Gu.Units.Data right) -> bool
static Gu.Units.Data.operator <=(Gu.Units.Data left, Gu.Units.Data right) -> bool
static Gu.Units.Data.operator ==(Gu.Units.Data left, Gu.Units.Data right) -> bool
static Gu.Units.Data.operator >(Gu.Units.Data left, Gu.Units.Data right) -> bool
static Gu.Units.Data.operator >=(Gu.Units.Data left, Gu.Units.Data right) -> bool
static Gu.Units.Data.Parse(string! text) -> Gu.Units.Data
static Gu.Units.Data.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Data
static Gu.Units.Data.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Data
static Gu.Units.Data.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Data
static Gu.Units.Data.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Data
static Gu.Units.Data.TryParse(string! text, out Gu.Units.Data result) -> bool
static Gu.Units.Data.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Data result) -> bool
static Gu.Units.Data.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Data result) -> bool
static Gu.Units.Data.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Data result) -> bool
static Gu.Units.DataUnit.operator !=(Gu.Units.DataUnit left, Gu.Units.DataUnit right) -> bool
static Gu.Units.DataUnit.operator *(double left, Gu.Units.DataUnit right) -> Gu.Units.Data
static Gu.Units.DataUnit.operator ==(Gu.Units.DataUnit left, Gu.Units.DataUnit right) -> bool
static Gu.Units.DataUnit.Parse(string! text) -> Gu.Units.DataUnit
static Gu.Units.DataUnit.TryParse(string! text, out Gu.Units.DataUnit result) -> bool
static Gu.Units.Density.From(double value, Gu.Units.DensityUnit unit) -> Gu.Units.Density
static Gu.Units.Density.FromGramsPerCubicCentimetre(double gramsPerCubicCentimetre) -> Gu.Units.Density
static Gu.Units.Density.FromGramsPerCubicMetre(double gramsPerCubicMetre) -> Gu.Units.Density
static Gu.Units.Density.FromGramsPerCubicMillimetre(double gramsPerCubicMillimetre) -> Gu.Units.Density
static Gu.Units.Density.FromKilogramsPerCubicMetre(double kilogramsPerCubicMetre) -> Gu.Units.Density
static Gu.Units.Density.FromMilligramsPerCubicMetre(double milligramsPerCubicMetre) -> Gu.Units.Density
static Gu.Units.Density.FromMilligramsPerCubicMillimetre(double milligramsPerCubicMillimetre) -> Gu.Units.Density
static Gu.Units.Density.operator !=(Gu.Units.Density left, Gu.Units.Density right) -> bool
static Gu.Units.Density.operator *(double left, Gu.Units.Density right) -> Gu.Units.Density
static Gu.Units.Density.operator *(Gu.Units.Density left, double right) -> Gu.Units.Density
static Gu.Units.Density.operator *(Gu.Units.Density left, Gu.Units.Length right) -> Gu.Units.AreaDensity
static Gu.Units.Density.operator *(Gu.Units.Density left, Gu.Units.SpecificEnergy right) -> Gu.Units.Pressure
static Gu.Units.Density.operator *(Gu.Units.Density left, Gu.Units.Volume right) -> Gu.Units.Mass
static Gu.Units.Density.operator *(Gu.Units.Density left, Gu.Units.VolumetricFlow right) -> Gu.Units.MassFlow
static Gu.Units.Density.operator +(Gu.Units.Density density) -> Gu.Units.Density
static Gu.Units.Density.operator +(Gu.Units.Density left, Gu.Units.Density right) -> Gu.Units.Density
static Gu.Units.Density.operator -(Gu.Units.Density density) -> Gu.Units.Density
static Gu.Units.Density.operator -(Gu.Units.Density left, Gu.Units.Density right) -> Gu.Units.Density
static Gu.Units.Density.operator /(double left, Gu.Units.Density right) -> Gu.Units.SpecificVolume
static Gu.Units.Density.operator /(Gu.Units.Density left, double right) -> Gu.Units.Density
static Gu.Units.Density.operator /(Gu.Units.Density left, Gu.Units.AreaDensity right) -> Gu.Units.Wavenumber
static Gu.Units.Density.operator /(Gu.Units.Density left, Gu.Units.Density right) -> double
static Gu.Units.Density.operator /(Gu.Units.Density left, Gu.Units.Wavenumber right) -> Gu.Units.AreaDensity
static Gu.Units.Density.operator <(Gu.Units.Density left, Gu.Units.Density right) -> bool
static Gu.Units.Density.operator <=(Gu.Units.Density left, Gu.Units.Density right) -> bool
static Gu.Units.Density.operator ==(Gu.Units.Density left, Gu.Units.Density right) -> bool
static Gu.Units.Density.operator >(Gu.Units.Density left, Gu.Units.Density right) -> bool
static Gu.Units.Density.operator >=(Gu.Units.Density left, Gu.Units.Density right) -> bool
static Gu.Units.Density.Parse(string! text) -> Gu.Units.Density
static Gu.Units.Density.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Density
static Gu.Units.Density.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Density
static Gu.Units.Density.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Density
static Gu.Units.Density.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Density
static Gu.Units.Density.TryParse(string! text, out Gu.Units.Density result) -> bool
static Gu.Units.Density.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Density result) -> bool
static Gu.Units.Density.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Density result) -> bool
static Gu.Units.Density.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Density result) -> bool
static Gu.Units.DensityUnit.operator !=(Gu.Units.DensityUnit left, Gu.Units.DensityUnit right) -> bool
static Gu.Units.DensityUnit.operator *(double left, Gu.Units.DensityUnit right) -> Gu.Units.Density
static Gu.Units.DensityUnit.operator ==(Gu.Units.DensityUnit left, Gu.Units.DensityUnit right) -> bool
static Gu.Units.DensityUnit.Parse(string! text) -> Gu.Units.DensityUnit
static Gu.Units.DensityUnit.TryParse(string! text, out Gu.Units.DensityUnit result) -> bool
static Gu.Units.ElectricalConductance.From(double value, Gu.Units.ElectricalConductanceUnit unit) -> Gu.Units.ElectricalConductance
static Gu.Units.ElectricalConductance.FromMicrosiemens(double microsiemens) -> Gu.Units.ElectricalConductance
static Gu.Units.ElectricalConductance.FromMillisiemens(double millisiemens) -> Gu.Units.ElectricalConductance
static Gu.Units.ElectricalConductance.FromNanosiemens(double nanosiemens) -> Gu.Units.ElectricalConductance
static Gu.Units.ElectricalConductance.FromSiemens(double siemens) -> Gu.Units.ElectricalConductance
static Gu.Units.ElectricalConductance.operator !=(Gu.Units.ElectricalConductance left, Gu.Units.ElectricalConductance right) -> bool
static Gu.Units.ElectricalConductance.operator *(double left, Gu.Units.ElectricalConductance right) -> Gu.Units.ElectricalConductance
static Gu.Units.ElectricalConductance.operator *(Gu.Units.ElectricalConductance left, double right) -> Gu.Units.ElectricalConductance
static Gu.Units.ElectricalConductance.operator *(Gu.Units.ElectricalConductance left, Gu.Units.Inductance right) -> Gu.Units.Time
static Gu.Units.ElectricalConductance.operator *(Gu.Units.ElectricalConductance left, Gu.Units.MagneticFlux right) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricalConductance.operator *(Gu.Units.ElectricalConductance left, Gu.Units.Time right) -> Gu.Units.Capacitance
static Gu.Units.ElectricalConductance.operator *(Gu.Units.ElectricalConductance left, Gu.Units.Voltage right) -> Gu.Units.Current
static Gu.Units.ElectricalConductance.operator *(Gu.Units.ElectricalConductance left, Gu.Units.Wavenumber right) -> Gu.Units.Conductivity
static Gu.Units.ElectricalConductance.operator +(Gu.Units.ElectricalConductance electricalConductance) -> Gu.Units.ElectricalConductance
static Gu.Units.ElectricalConductance.operator +(Gu.Units.ElectricalConductance left, Gu.Units.ElectricalConductance right) -> Gu.Units.ElectricalConductance
static Gu.Units.ElectricalConductance.operator -(Gu.Units.ElectricalConductance electricalConductance) -> Gu.Units.ElectricalConductance
static Gu.Units.ElectricalConductance.operator -(Gu.Units.ElectricalConductance left, Gu.Units.ElectricalConductance right) -> Gu.Units.ElectricalConductance
static Gu.Units.ElectricalConductance.operator /(double left, Gu.Units.ElectricalConductance right) -> Gu.Units.Resistance
static Gu.Units.ElectricalConductance.operator /(Gu.Units.ElectricalConductance left, double right) -> Gu.Units.ElectricalConductance
static Gu.Units.ElectricalConductance.operator /(Gu.Units.ElectricalConductance left, Gu.Units.Capacitance right) -> Gu.Units.Frequency
static Gu.Units.ElectricalConductance.operator /(Gu.Units.ElectricalConductance left, Gu.Units.Conductivity right) -> Gu.Units.Length
static Gu.Units.ElectricalConductance.operator /(Gu.Units.ElectricalConductance left, Gu.Units.ElectricalConductance right) -> double
static Gu.Units.ElectricalConductance.operator /(Gu.Units.ElectricalConductance left, Gu.Units.Frequency right) -> Gu.Units.Capacitance
static Gu.Units.ElectricalConductance.operator /(Gu.Units.ElectricalConductance left, Gu.Units.Length right) -> Gu.Units.Conductivity
static Gu.Units.ElectricalConductance.operator <(Gu.Units.ElectricalConductance left, Gu.Units.ElectricalConductance right) -> bool
static Gu.Units.ElectricalConductance.operator <=(Gu.Units.ElectricalConductance left, Gu.Units.ElectricalConductance right) -> bool
static Gu.Units.ElectricalConductance.operator ==(Gu.Units.ElectricalConductance left, Gu.Units.ElectricalConductance right) -> bool
static Gu.Units.ElectricalConductance.operator >(Gu.Units.ElectricalConductance left, Gu.Units.ElectricalConductance right) -> bool
static Gu.Units.ElectricalConductance.operator >=(Gu.Units.ElectricalConductance left, Gu.Units.ElectricalConductance right) -> bool
static Gu.Units.ElectricalConductance.Parse(string! text) -> Gu.Units.ElectricalConductance
static Gu.Units.ElectricalConductance.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.ElectricalConductance
static Gu.Units.ElectricalConductance.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.ElectricalConductance
static Gu.Units.ElectricalConductance.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.ElectricalConductance
static Gu.Units.ElectricalConductance.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.ElectricalConductance
static Gu.Units.ElectricalConductance.TryParse(string! text, out Gu.Units.ElectricalConductance result) -> bool
static Gu.Units.ElectricalConductance.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.ElectricalConductance result) -> bool
static Gu.Units.ElectricalConductance.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.ElectricalConductance result) -> bool
static Gu.Units.ElectricalConductance.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.ElectricalConductance result) -> bool
static Gu.Units.ElectricalConductanceUnit.operator !=(Gu.Units.ElectricalConductanceUnit left, Gu.Units.ElectricalConductanceUnit right) -> bool
static Gu.Units.ElectricalConductanceUnit.operator *(double left, Gu.Units.ElectricalConductanceUnit right) -> Gu.Units.ElectricalConductance
static Gu.Units.ElectricalConductanceUnit.operator ==(Gu.Units.ElectricalConductanceUnit left, Gu.Units.ElectricalConductanceUnit right) -> bool
static Gu.Units.ElectricalConductanceUnit.Parse(string! text) -> Gu.Units.ElectricalConductanceUnit
static Gu.Units.ElectricalConductanceUnit.TryParse(string! text, out Gu.Units.ElectricalConductanceUnit result) -> bool
static Gu.Units.ElectricCharge.From(double value, Gu.Units.ElectricChargeUnit unit) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricCharge.FromCoulombs(double coulombs) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricCharge.FromGigacoulombs(double gigacoulombs) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricCharge.FromKilocoulombs(double kilocoulombs) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricCharge.FromMegacoulombs(double megacoulombs) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricCharge.FromMicrocoulombs(double microcoulombs) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricCharge.FromMillicoulombs(double millicoulombs) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricCharge.FromNanocoulombs(double nanocoulombs) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricCharge.operator !=(Gu.Units.ElectricCharge left, Gu.Units.ElectricCharge right) -> bool
static Gu.Units.ElectricCharge.operator *(double left, Gu.Units.ElectricCharge right) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricCharge.operator *(Gu.Units.ElectricCharge left, double right) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricCharge.operator *(Gu.Units.ElectricCharge left, Gu.Units.Frequency right) -> Gu.Units.Current
static Gu.Units.ElectricCharge.operator *(Gu.Units.ElectricCharge left, Gu.Units.MagneticFieldStrength right) -> Gu.Units.MassFlow
static Gu.Units.ElectricCharge.operator *(Gu.Units.ElectricCharge left, Gu.Units.Resistance right) -> Gu.Units.MagneticFlux
static Gu.Units.ElectricCharge.operator *(Gu.Units.ElectricCharge left, Gu.Units.Voltage right) -> Gu.Units.Energy
static Gu.Units.ElectricCharge.operator +(Gu.Units.ElectricCharge electricCharge) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricCharge.operator +(Gu.Units.ElectricCharge left, Gu.Units.ElectricCharge right) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricCharge.operator -(Gu.Units.ElectricCharge electricCharge) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricCharge.operator -(Gu.Units.ElectricCharge left, Gu.Units.ElectricCharge right) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricCharge.operator /(Gu.Units.ElectricCharge left, double right) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricCharge.operator /(Gu.Units.ElectricCharge left, Gu.Units.Capacitance right) -> Gu.Units.Voltage
static Gu.Units.ElectricCharge.operator /(Gu.Units.ElectricCharge left, Gu.Units.Current right) -> Gu.Units.Time
static Gu.Units.ElectricCharge.operator /(Gu.Units.ElectricCharge left, Gu.Units.ElectricalConductance right) -> Gu.Units.MagneticFlux
static Gu.Units.ElectricCharge.operator /(Gu.Units.ElectricCharge left, Gu.Units.ElectricCharge right) -> double
static Gu.Units.ElectricCharge.operator /(Gu.Units.ElectricCharge left, Gu.Units.MagneticFlux right) -> Gu.Units.ElectricalConductance
static Gu.Units.ElectricCharge.operator /(Gu.Units.ElectricCharge left, Gu.Units.Time right) -> Gu.Units.Current
static Gu.Units.ElectricCharge.operator /(Gu.Units.ElectricCharge left, Gu.Units.Voltage right) -> Gu.Units.Capacitance
static Gu.Units.ElectricCharge.operator <(Gu.Units.ElectricCharge left, Gu.Units.ElectricCharge right) -> bool
static Gu.Units.ElectricCharge.operator <=(Gu.Units.ElectricCharge left, Gu.Units.ElectricCharge right) -> bool
static Gu.Units.ElectricCharge.operator ==(Gu.Units.ElectricCharge left, Gu.Units.ElectricCharge right) -> bool
static Gu.Units.ElectricCharge.operator >(Gu.Units.ElectricCharge left, Gu.Units.ElectricCharge right) -> bool
static Gu.Units.ElectricCharge.operator >=(Gu.Units.ElectricCharge left, Gu.Units.ElectricCharge right) -> bool
static Gu.Units.ElectricCharge.Parse(string! text) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricCharge.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricCharge.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricCharge.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricCharge.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricCharge.TryParse(string! text, out Gu.Units.ElectricCharge result) -> bool
static Gu.Units.ElectricCharge.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.ElectricCharge result) -> bool
static Gu.Units.ElectricCharge.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.ElectricCharge result) -> bool
static Gu.Units.ElectricCharge.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.ElectricCharge result) -> bool
static Gu.Units.ElectricChargeUnit.operator !=(Gu.Units.ElectricChargeUnit left, Gu.Units.ElectricChargeUnit right) -> bool
static Gu.Units.ElectricChargeUnit.operator *(double left, Gu.Units.ElectricChargeUnit right) -> Gu.Units.ElectricCharge
static Gu.Units.ElectricChargeUnit.operator ==(Gu.Units.ElectricChargeUnit left, Gu.Units.ElectricChargeUnit right) -> bool
static Gu.Units.ElectricChargeUnit.Parse(string! text) -> Gu.Units.ElectricChargeUnit
static Gu.Units.ElectricChargeUnit.TryParse(string! text, out Gu.Units.ElectricChargeUnit result) -> bool
static Gu.Units.Energy.From(double value, Gu.Units.EnergyUnit unit) -> Gu.Units.Energy
static Gu.Units.Energy.FromGigajoules(double gigajoules) -> Gu.Units.Energy
static Gu.Units.Energy.FromJoules(double joules) -> Gu.Units.Energy
static Gu.Units.Energy.FromKilojoules(double kilojoules) -> Gu.Units.Energy
static Gu.Units.Energy.FromKilowattHours(double kilowattHours) -> Gu.Units.Energy
static Gu.Units.Energy.FromMegajoules(double megajoules) -> Gu.Units.Energy
static Gu.Units.Energy.FromMicrojoules(double microjoules) -> Gu.Units.Energy
static Gu.Units.Energy.FromMillijoules(double millijoules) -> Gu.Units.Energy
static Gu.Units.Energy.FromNanojoules(double nanojoules) -> Gu.Units.Energy
static Gu.Units.Energy.operator !=(Gu.Units.Energy left, Gu.Units.Energy right) -> bool
static Gu.Units.Energy.operator *(double left, Gu.Units.Energy right) -> Gu.Units.Energy
static Gu.Units.Energy.operator *(Gu.Units.Energy left, double right) -> Gu.Units.Energy
static Gu.Units.Energy.operator *(Gu.Units.Energy left, Gu.Units.Flexibility right) -> Gu.Units.Area
static Gu.Units.Energy.operator *(Gu.Units.Energy left, Gu.Units.Frequency right) -> Gu.Units.Power
static Gu.Units.Energy.operator *(Gu.Units.Energy left, Gu.Units.Wavenumber right) -> Gu.Units.Force
static Gu.Units.Energy.operator +(Gu.Units.Energy energy) -> Gu.Units.Energy
static Gu.Units.Energy.operator +(Gu.Units.Energy left, Gu.Units.Energy right) -> Gu.Units.Energy
static Gu.Units.Energy.operator -(Gu.Units.Energy energy) -> Gu.Units.Energy
static Gu.Units.Energy.operator -(Gu.Units.Energy left, Gu.Units.Energy right) -> Gu.Units.Energy
static Gu.Units.Energy.operator /(Gu.Units.Energy left, double right) -> Gu.Units.Energy
static Gu.Units.Energy.operator /(Gu.Units.Energy left, Gu.Units.Angle right) -> Gu.Units.Torque
static Gu.Units.Energy.operator /(Gu.Units.Energy left, Gu.Units.Area right) -> Gu.Units.Stiffness
static Gu.Units.Energy.operator /(Gu.Units.Energy left, Gu.Units.Current right) -> Gu.Units.MagneticFlux
static Gu.Units.Energy.operator /(Gu.Units.Energy left, Gu.Units.ElectricCharge right) -> Gu.Units.Voltage
static Gu.Units.Energy.operator /(Gu.Units.Energy left, Gu.Units.Energy right) -> double
static Gu.Units.Energy.operator /(Gu.Units.Energy left, Gu.Units.Force right) -> Gu.Units.Length
static Gu.Units.Energy.operator /(Gu.Units.Energy left, Gu.Units.KinematicViscosity right) -> Gu.Units.MassFlow
static Gu.Units.Energy.operator /(Gu.Units.Energy left, Gu.Units.Length right) -> Gu.Units.Force
static Gu.Units.Energy.operator /(Gu.Units.Energy left, Gu.Units.MagneticFlux right) -> Gu.Units.Current
static Gu.Units.Energy.operator /(Gu.Units.Energy left, Gu.Units.Mass right) -> Gu.Units.SpecificEnergy
static Gu.Units.Energy.operator /(Gu.Units.Energy left, Gu.Units.MassFlow right) -> Gu.Units.KinematicViscosity
static Gu.Units.Energy.operator /(Gu.Units.Energy left, Gu.Units.Momentum right) -> Gu.Units.Speed
static Gu.Units.Energy.operator /(Gu.Units.Energy left, Gu.Units.Power right) -> Gu.Units.Time
static Gu.Units.Energy.operator /(Gu.Units.Energy left, Gu.Units.Pressure right) -> Gu.Units.Volume
static Gu.Units.Energy.operator /(Gu.Units.Energy left, Gu.Units.SpecificEnergy right) -> Gu.Units.Mass
static Gu.Units.Energy.operator /(Gu.Units.Energy left, Gu.Units.Speed right) -> Gu.Units.Momentum
static Gu.Units.Energy.operator /(Gu.Units.Energy left, Gu.Units.Stiffness right) -> Gu.Units.Area
static Gu.Units.Energy.operator /(Gu.Units.Energy left, Gu.Units.Time right) -> Gu.Units.Power
static Gu.Units.Energy.operator /(Gu.Units.Energy left, Gu.Units.Torque right) -> Gu.Units.Angle
static Gu.Units.Energy.operator /(Gu.Units.Energy left, Gu.Units.Voltage right) -> Gu.Units.ElectricCharge
static Gu.Units.Energy.operator /(Gu.Units.Energy left, Gu.Units.Volume right) -> Gu.Units.Pressure
static Gu.Units.Energy.operator <(Gu.Units.Energy left, Gu.Units.Energy right) -> bool
static Gu.Units.Energy.operator <=(Gu.Units.Energy left, Gu.Units.Energy right) -> bool
static Gu.Units.Energy.operator ==(Gu.Units.Energy left, Gu.Units.Energy right) -> bool
static Gu.Units.Energy.operator >(Gu.Units.Energy left, Gu.Units.Energy right) -> bool
static Gu.Units.Energy.operator >=(Gu.Units.Energy left, Gu.Units.Energy right) -> bool
static Gu.Units.Energy.Parse(string! text) -> Gu.Units.Energy
static Gu.Units.Energy.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Energy
static Gu.Units.Energy.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Energy
static Gu.Units.Energy.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Energy
static Gu.Units.Energy.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Energy
static Gu.Units.Energy.TryParse(string! text, out Gu.Units.Energy result) -> bool
static Gu.Units.Energy.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Energy result) -> bool
static Gu.Units.Energy.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Energy result) -> bool
static Gu.Units.Energy.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Energy result) -> bool
static Gu.Units.EnergyUnit.operator !=(Gu.Units.EnergyUnit left, Gu.Units.EnergyUnit right) -> bool
static Gu.Units.EnergyUnit.operator *(double left, Gu.Units.EnergyUnit right) -> Gu.Units.Energy
static Gu.Units.EnergyUnit.operator ==(Gu.Units.EnergyUnit left, Gu.Units.EnergyUnit right) -> bool
static Gu.Units.EnergyUnit.Parse(string! text) -> Gu.Units.EnergyUnit
static Gu.Units.EnergyUnit.TryParse(string! text, out Gu.Units.EnergyUnit result) -> bool
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Acceleration>! source) -> Gu.Units.Acceleration
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Acceleration?>! source) -> Gu.Units.Acceleration?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.AmountOfSubstance>! source) -> Gu.Units.AmountOfSubstance
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.AmountOfSubstance?>! source) -> Gu.Units.AmountOfSubstance?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Angle>! source) -> Gu.Units.Angle
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Angle?>! source) -> Gu.Units.Angle?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.AnglePerUnitless>! source) -> Gu.Units.AnglePerUnitless
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.AnglePerUnitless?>! source) -> Gu.Units.AnglePerUnitless?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.AngularAcceleration>! source) -> Gu.Units.AngularAcceleration
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.AngularAcceleration?>! source) -> Gu.Units.AngularAcceleration?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.AngularJerk>! source) -> Gu.Units.AngularJerk
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.AngularJerk?>! source) -> Gu.Units.AngularJerk?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.AngularSpeed>! source) -> Gu.Units.AngularSpeed
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.AngularSpeed?>! source) -> Gu.Units.AngularSpeed?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Area>! source) -> Gu.Units.Area
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Area?>! source) -> Gu.Units.Area?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.AreaDensity>! source) -> Gu.Units.AreaDensity
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.AreaDensity?>! source) -> Gu.Units.AreaDensity?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Capacitance>! source) -> Gu.Units.Capacitance
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Capacitance?>! source) -> Gu.Units.Capacitance?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.CatalyticActivity>! source) -> Gu.Units.CatalyticActivity
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.CatalyticActivity?>! source) -> Gu.Units.CatalyticActivity?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Conductivity>! source) -> Gu.Units.Conductivity
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Conductivity?>! source) -> Gu.Units.Conductivity?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Current>! source) -> Gu.Units.Current
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Current?>! source) -> Gu.Units.Current?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Data>! source) -> Gu.Units.Data
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Data?>! source) -> Gu.Units.Data?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Density>! source) -> Gu.Units.Density
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Density?>! source) -> Gu.Units.Density?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.ElectricalConductance>! source) -> Gu.Units.ElectricalConductance
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.ElectricalConductance?>! source) -> Gu.Units.ElectricalConductance?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.ElectricCharge>! source) -> Gu.Units.ElectricCharge
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.ElectricCharge?>! source) -> Gu.Units.ElectricCharge?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Energy>! source) -> Gu.Units.Energy
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Energy?>! source) -> Gu.Units.Energy?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Flexibility>! source) -> Gu.Units.Flexibility
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Flexibility?>! source) -> Gu.Units.Flexibility?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Force>! source) -> Gu.Units.Force
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Force?>! source) -> Gu.Units.Force?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.ForcePerUnitless>! source) -> Gu.Units.ForcePerUnitless
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.ForcePerUnitless?>! source) -> Gu.Units.ForcePerUnitless?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Frequency>! source) -> Gu.Units.Frequency
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Frequency?>! source) -> Gu.Units.Frequency?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Illuminance>! source) -> Gu.Units.Illuminance
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Illuminance?>! source) -> Gu.Units.Illuminance?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Inductance>! source) -> Gu.Units.Inductance
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Inductance?>! source) -> Gu.Units.Inductance?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Jerk>! source) -> Gu.Units.Jerk
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Jerk?>! source) -> Gu.Units.Jerk?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.KinematicViscosity>! source) -> Gu.Units.KinematicViscosity
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.KinematicViscosity?>! source) -> Gu.Units.KinematicViscosity?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Length>! source) -> Gu.Units.Length
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Length?>! source) -> Gu.Units.Length?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.LengthPerUnitless>! source) -> Gu.Units.LengthPerUnitless
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.LengthPerUnitless?>! source) -> Gu.Units.LengthPerUnitless?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.LuminousFlux>! source) -> Gu.Units.LuminousFlux
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.LuminousFlux?>! source) -> Gu.Units.LuminousFlux?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.LuminousIntensity>! source) -> Gu.Units.LuminousIntensity
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.LuminousIntensity?>! source) -> Gu.Units.LuminousIntensity?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.MagneticFieldStrength>! source) -> Gu.Units.MagneticFieldStrength
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.MagneticFieldStrength?>! source) -> Gu.Units.MagneticFieldStrength?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.MagneticFlux>! source) -> Gu.Units.MagneticFlux
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.MagneticFlux?>! source) -> Gu.Units.MagneticFlux?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Mass>! source) -> Gu.Units.Mass
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Mass?>! source) -> Gu.Units.Mass?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.MassFlow>! source) -> Gu.Units.MassFlow
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.MassFlow?>! source) -> Gu.Units.MassFlow?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.MolarHeatCapacity>! source) -> Gu.Units.MolarHeatCapacity
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.MolarHeatCapacity?>! source) -> Gu.Units.MolarHeatCapacity?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.MolarMass>! source) -> Gu.Units.MolarMass
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.MolarMass?>! source) -> Gu.Units.MolarMass?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Momentum>! source) -> Gu.Units.Momentum
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Momentum?>! source) -> Gu.Units.Momentum?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Power>! source) -> Gu.Units.Power
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Power?>! source) -> Gu.Units.Power?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Pressure>! source) -> Gu.Units.Pressure
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Pressure?>! source) -> Gu.Units.Pressure?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Resistance>! source) -> Gu.Units.Resistance
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Resistance?>! source) -> Gu.Units.Resistance?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.SolidAngle>! source) -> Gu.Units.SolidAngle
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.SolidAngle?>! source) -> Gu.Units.SolidAngle?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.SpecificEnergy>! source) -> Gu.Units.SpecificEnergy
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.SpecificEnergy?>! source) -> Gu.Units.SpecificEnergy?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.SpecificVolume>! source) -> Gu.Units.SpecificVolume
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.SpecificVolume?>! source) -> Gu.Units.SpecificVolume?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Speed>! source) -> Gu.Units.Speed
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Speed?>! source) -> Gu.Units.Speed?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Stiffness>! source) -> Gu.Units.Stiffness
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Stiffness?>! source) -> Gu.Units.Stiffness?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Temperature>! source) -> Gu.Units.Temperature
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Temperature?>! source) -> Gu.Units.Temperature?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Time>! source) -> Gu.Units.Time
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Time?>! source) -> Gu.Units.Time?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Torque>! source) -> Gu.Units.Torque
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Torque?>! source) -> Gu.Units.Torque?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Unitless>! source) -> Gu.Units.Unitless
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Unitless?>! source) -> Gu.Units.Unitless?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Voltage>! source) -> Gu.Units.Voltage
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Voltage?>! source) -> Gu.Units.Voltage?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Volume>! source) -> Gu.Units.Volume
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Volume?>! source) -> Gu.Units.Volume?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.VolumetricFlow>! source) -> Gu.Units.VolumetricFlow
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.VolumetricFlow?>! source) -> Gu.Units.VolumetricFlow?
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Wavenumber>! source) -> Gu.Units.Wavenumber
static Gu.Units.EnumerableUnits.Average(this System.Collections.Generic.IEnumerable<Gu.Units.Wavenumber?>! source) -> Gu.Units.Wavenumber?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Acceleration>! source) -> Gu.Units.Acceleration
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Acceleration?>! source) -> Gu.Units.Acceleration?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.AmountOfSubstance>! source) -> Gu.Units.AmountOfSubstance
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.AmountOfSubstance?>! source) -> Gu.Units.AmountOfSubstance?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Angle>! source) -> Gu.Units.Angle
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Angle?>! source) -> Gu.Units.Angle?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.AnglePerUnitless>! source) -> Gu.Units.AnglePerUnitless
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.AnglePerUnitless?>! source) -> Gu.Units.AnglePerUnitless?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.AngularAcceleration>! source) -> Gu.Units.AngularAcceleration
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.AngularAcceleration?>! source) -> Gu.Units.AngularAcceleration?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.AngularJerk>! source) -> Gu.Units.AngularJerk
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.AngularJerk?>! source) -> Gu.Units.AngularJerk?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.AngularSpeed>! source) -> Gu.Units.AngularSpeed
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.AngularSpeed?>! source) -> Gu.Units.AngularSpeed?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Area>! source) -> Gu.Units.Area
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Area?>! source) -> Gu.Units.Area?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.AreaDensity>! source) -> Gu.Units.AreaDensity
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.AreaDensity?>! source) -> Gu.Units.AreaDensity?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Capacitance>! source) -> Gu.Units.Capacitance
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Capacitance?>! source) -> Gu.Units.Capacitance?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.CatalyticActivity>! source) -> Gu.Units.CatalyticActivity
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.CatalyticActivity?>! source) -> Gu.Units.CatalyticActivity?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Conductivity>! source) -> Gu.Units.Conductivity
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Conductivity?>! source) -> Gu.Units.Conductivity?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Current>! source) -> Gu.Units.Current
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Current?>! source) -> Gu.Units.Current?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Data>! source) -> Gu.Units.Data
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Data?>! source) -> Gu.Units.Data?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Density>! source) -> Gu.Units.Density
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Density?>! source) -> Gu.Units.Density?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.ElectricalConductance>! source) -> Gu.Units.ElectricalConductance
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.ElectricalConductance?>! source) -> Gu.Units.ElectricalConductance?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.ElectricCharge>! source) -> Gu.Units.ElectricCharge
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.ElectricCharge?>! source) -> Gu.Units.ElectricCharge?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Energy>! source) -> Gu.Units.Energy
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Energy?>! source) -> Gu.Units.Energy?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Flexibility>! source) -> Gu.Units.Flexibility
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Flexibility?>! source) -> Gu.Units.Flexibility?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Force>! source) -> Gu.Units.Force
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Force?>! source) -> Gu.Units.Force?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.ForcePerUnitless>! source) -> Gu.Units.ForcePerUnitless
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.ForcePerUnitless?>! source) -> Gu.Units.ForcePerUnitless?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Frequency>! source) -> Gu.Units.Frequency
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Frequency?>! source) -> Gu.Units.Frequency?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Illuminance>! source) -> Gu.Units.Illuminance
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Illuminance?>! source) -> Gu.Units.Illuminance?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Inductance>! source) -> Gu.Units.Inductance
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Inductance?>! source) -> Gu.Units.Inductance?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Jerk>! source) -> Gu.Units.Jerk
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Jerk?>! source) -> Gu.Units.Jerk?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.KinematicViscosity>! source) -> Gu.Units.KinematicViscosity
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.KinematicViscosity?>! source) -> Gu.Units.KinematicViscosity?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Length>! source) -> Gu.Units.Length
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Length?>! source) -> Gu.Units.Length?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.LengthPerUnitless>! source) -> Gu.Units.LengthPerUnitless
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.LengthPerUnitless?>! source) -> Gu.Units.LengthPerUnitless?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.LuminousFlux>! source) -> Gu.Units.LuminousFlux
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.LuminousFlux?>! source) -> Gu.Units.LuminousFlux?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.LuminousIntensity>! source) -> Gu.Units.LuminousIntensity
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.LuminousIntensity?>! source) -> Gu.Units.LuminousIntensity?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.MagneticFieldStrength>! source) -> Gu.Units.MagneticFieldStrength
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.MagneticFieldStrength?>! source) -> Gu.Units.MagneticFieldStrength?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.MagneticFlux>! source) -> Gu.Units.MagneticFlux
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.MagneticFlux?>! source) -> Gu.Units.MagneticFlux?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Mass>! source) -> Gu.Units.Mass
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Mass?>! source) -> Gu.Units.Mass?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.MassFlow>! source) -> Gu.Units.MassFlow
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.MassFlow?>! source) -> Gu.Units.MassFlow?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.MolarHeatCapacity>! source) -> Gu.Units.MolarHeatCapacity
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.MolarHeatCapacity?>! source) -> Gu.Units.MolarHeatCapacity?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.MolarMass>! source) -> Gu.Units.MolarMass
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.MolarMass?>! source) -> Gu.Units.MolarMass?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Momentum>! source) -> Gu.Units.Momentum
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Momentum?>! source) -> Gu.Units.Momentum?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Power>! source) -> Gu.Units.Power
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Power?>! source) -> Gu.Units.Power?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Pressure>! source) -> Gu.Units.Pressure
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Pressure?>! source) -> Gu.Units.Pressure?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Resistance>! source) -> Gu.Units.Resistance
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Resistance?>! source) -> Gu.Units.Resistance?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.SolidAngle>! source) -> Gu.Units.SolidAngle
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.SolidAngle?>! source) -> Gu.Units.SolidAngle?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.SpecificEnergy>! source) -> Gu.Units.SpecificEnergy
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.SpecificEnergy?>! source) -> Gu.Units.SpecificEnergy?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.SpecificVolume>! source) -> Gu.Units.SpecificVolume
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.SpecificVolume?>! source) -> Gu.Units.SpecificVolume?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Speed>! source) -> Gu.Units.Speed
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Speed?>! source) -> Gu.Units.Speed?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Stiffness>! source) -> Gu.Units.Stiffness
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Stiffness?>! source) -> Gu.Units.Stiffness?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Temperature>! source) -> Gu.Units.Temperature
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Temperature?>! source) -> Gu.Units.Temperature?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Time>! source) -> Gu.Units.Time
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Time?>! source) -> Gu.Units.Time?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Torque>! source) -> Gu.Units.Torque
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Torque?>! source) -> Gu.Units.Torque?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Unitless>! source) -> Gu.Units.Unitless
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Unitless?>! source) -> Gu.Units.Unitless?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Voltage>! source) -> Gu.Units.Voltage
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Voltage?>! source) -> Gu.Units.Voltage?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Volume>! source) -> Gu.Units.Volume
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Volume?>! source) -> Gu.Units.Volume?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.VolumetricFlow>! source) -> Gu.Units.VolumetricFlow
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.VolumetricFlow?>! source) -> Gu.Units.VolumetricFlow?
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Wavenumber>! source) -> Gu.Units.Wavenumber
static Gu.Units.EnumerableUnits.Max(this System.Collections.Generic.IEnumerable<Gu.Units.Wavenumber?>! source) -> Gu.Units.Wavenumber?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Acceleration>! source) -> Gu.Units.Acceleration
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Acceleration?>! source) -> Gu.Units.Acceleration?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.AmountOfSubstance>! source) -> Gu.Units.AmountOfSubstance
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.AmountOfSubstance?>! source) -> Gu.Units.AmountOfSubstance?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Angle>! source) -> Gu.Units.Angle
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Angle?>! source) -> Gu.Units.Angle?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.AnglePerUnitless>! source) -> Gu.Units.AnglePerUnitless
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.AnglePerUnitless?>! source) -> Gu.Units.AnglePerUnitless?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.AngularAcceleration>! source) -> Gu.Units.AngularAcceleration
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.AngularAcceleration?>! source) -> Gu.Units.AngularAcceleration?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.AngularJerk>! source) -> Gu.Units.AngularJerk
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.AngularJerk?>! source) -> Gu.Units.AngularJerk?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.AngularSpeed>! source) -> Gu.Units.AngularSpeed
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.AngularSpeed?>! source) -> Gu.Units.AngularSpeed?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Area>! source) -> Gu.Units.Area
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Area?>! source) -> Gu.Units.Area?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.AreaDensity>! source) -> Gu.Units.AreaDensity
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.AreaDensity?>! source) -> Gu.Units.AreaDensity?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Capacitance>! source) -> Gu.Units.Capacitance
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Capacitance?>! source) -> Gu.Units.Capacitance?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.CatalyticActivity>! source) -> Gu.Units.CatalyticActivity
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.CatalyticActivity?>! source) -> Gu.Units.CatalyticActivity?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Conductivity>! source) -> Gu.Units.Conductivity
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Conductivity?>! source) -> Gu.Units.Conductivity?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Current>! source) -> Gu.Units.Current
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Current?>! source) -> Gu.Units.Current?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Data>! source) -> Gu.Units.Data
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Data?>! source) -> Gu.Units.Data?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Density>! source) -> Gu.Units.Density
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Density?>! source) -> Gu.Units.Density?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.ElectricalConductance>! source) -> Gu.Units.ElectricalConductance
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.ElectricalConductance?>! source) -> Gu.Units.ElectricalConductance?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.ElectricCharge>! source) -> Gu.Units.ElectricCharge
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.ElectricCharge?>! source) -> Gu.Units.ElectricCharge?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Energy>! source) -> Gu.Units.Energy
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Energy?>! source) -> Gu.Units.Energy?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Flexibility>! source) -> Gu.Units.Flexibility
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Flexibility?>! source) -> Gu.Units.Flexibility?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Force>! source) -> Gu.Units.Force
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Force?>! source) -> Gu.Units.Force?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.ForcePerUnitless>! source) -> Gu.Units.ForcePerUnitless
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.ForcePerUnitless?>! source) -> Gu.Units.ForcePerUnitless?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Frequency>! source) -> Gu.Units.Frequency
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Frequency?>! source) -> Gu.Units.Frequency?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Illuminance>! source) -> Gu.Units.Illuminance
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Illuminance?>! source) -> Gu.Units.Illuminance?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Inductance>! source) -> Gu.Units.Inductance
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Inductance?>! source) -> Gu.Units.Inductance?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Jerk>! source) -> Gu.Units.Jerk
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Jerk?>! source) -> Gu.Units.Jerk?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.KinematicViscosity>! source) -> Gu.Units.KinematicViscosity
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.KinematicViscosity?>! source) -> Gu.Units.KinematicViscosity?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Length>! source) -> Gu.Units.Length
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Length?>! source) -> Gu.Units.Length?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.LengthPerUnitless>! source) -> Gu.Units.LengthPerUnitless
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.LengthPerUnitless?>! source) -> Gu.Units.LengthPerUnitless?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.LuminousFlux>! source) -> Gu.Units.LuminousFlux
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.LuminousFlux?>! source) -> Gu.Units.LuminousFlux?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.LuminousIntensity>! source) -> Gu.Units.LuminousIntensity
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.LuminousIntensity?>! source) -> Gu.Units.LuminousIntensity?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.MagneticFieldStrength>! source) -> Gu.Units.MagneticFieldStrength
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.MagneticFieldStrength?>! source) -> Gu.Units.MagneticFieldStrength?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.MagneticFlux>! source) -> Gu.Units.MagneticFlux
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.MagneticFlux?>! source) -> Gu.Units.MagneticFlux?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Mass>! source) -> Gu.Units.Mass
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Mass?>! source) -> Gu.Units.Mass?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.MassFlow>! source) -> Gu.Units.MassFlow
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.MassFlow?>! source) -> Gu.Units.MassFlow?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.MolarHeatCapacity>! source) -> Gu.Units.MolarHeatCapacity
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.MolarHeatCapacity?>! source) -> Gu.Units.MolarHeatCapacity?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.MolarMass>! source) -> Gu.Units.MolarMass
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.MolarMass?>! source) -> Gu.Units.MolarMass?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Momentum>! source) -> Gu.Units.Momentum
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Momentum?>! source) -> Gu.Units.Momentum?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Power>! source) -> Gu.Units.Power
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Power?>! source) -> Gu.Units.Power?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Pressure>! source) -> Gu.Units.Pressure
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Pressure?>! source) -> Gu.Units.Pressure?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Resistance>! source) -> Gu.Units.Resistance
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Resistance?>! source) -> Gu.Units.Resistance?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.SolidAngle>! source) -> Gu.Units.SolidAngle
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.SolidAngle?>! source) -> Gu.Units.SolidAngle?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.SpecificEnergy>! source) -> Gu.Units.SpecificEnergy
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.SpecificEnergy?>! source) -> Gu.Units.SpecificEnergy?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.SpecificVolume>! source) -> Gu.Units.SpecificVolume
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.SpecificVolume?>! source) -> Gu.Units.SpecificVolume?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Speed>! source) -> Gu.Units.Speed
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Speed?>! source) -> Gu.Units.Speed?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Stiffness>! source) -> Gu.Units.Stiffness
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Stiffness?>! source) -> Gu.Units.Stiffness?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Temperature>! source) -> Gu.Units.Temperature
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Temperature?>! source) -> Gu.Units.Temperature?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Time>! source) -> Gu.Units.Time
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Time?>! source) -> Gu.Units.Time?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Torque>! source) -> Gu.Units.Torque
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Torque?>! source) -> Gu.Units.Torque?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Unitless>! source) -> Gu.Units.Unitless
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Unitless?>! source) -> Gu.Units.Unitless?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Voltage>! source) -> Gu.Units.Voltage
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Voltage?>! source) -> Gu.Units.Voltage?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Volume>! source) -> Gu.Units.Volume
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Volume?>! source) -> Gu.Units.Volume?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.VolumetricFlow>! source) -> Gu.Units.VolumetricFlow
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.VolumetricFlow?>! source) -> Gu.Units.VolumetricFlow?
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Wavenumber>! source) -> Gu.Units.Wavenumber
static Gu.Units.EnumerableUnits.Min(this System.Collections.Generic.IEnumerable<Gu.Units.Wavenumber?>! source) -> Gu.Units.Wavenumber?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Acceleration>! source) -> Gu.Units.Acceleration
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Acceleration?>! source) -> Gu.Units.Acceleration?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.AmountOfSubstance>! source) -> Gu.Units.AmountOfSubstance
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.AmountOfSubstance?>! source) -> Gu.Units.AmountOfSubstance?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Angle>! source) -> Gu.Units.Angle
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Angle?>! source) -> Gu.Units.Angle?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.AnglePerUnitless>! source) -> Gu.Units.AnglePerUnitless
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.AnglePerUnitless?>! source) -> Gu.Units.AnglePerUnitless?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.AngularAcceleration>! source) -> Gu.Units.AngularAcceleration
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.AngularAcceleration?>! source) -> Gu.Units.AngularAcceleration?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.AngularJerk>! source) -> Gu.Units.AngularJerk
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.AngularJerk?>! source) -> Gu.Units.AngularJerk?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.AngularSpeed>! source) -> Gu.Units.AngularSpeed
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.AngularSpeed?>! source) -> Gu.Units.AngularSpeed?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Area>! source) -> Gu.Units.Area
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Area?>! source) -> Gu.Units.Area?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.AreaDensity>! source) -> Gu.Units.AreaDensity
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.AreaDensity?>! source) -> Gu.Units.AreaDensity?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Capacitance>! source) -> Gu.Units.Capacitance
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Capacitance?>! source) -> Gu.Units.Capacitance?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.CatalyticActivity>! source) -> Gu.Units.CatalyticActivity
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.CatalyticActivity?>! source) -> Gu.Units.CatalyticActivity?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Conductivity>! source) -> Gu.Units.Conductivity
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Conductivity?>! source) -> Gu.Units.Conductivity?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Current>! source) -> Gu.Units.Current
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Current?>! source) -> Gu.Units.Current?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Data>! source) -> Gu.Units.Data
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Data?>! source) -> Gu.Units.Data?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Density>! source) -> Gu.Units.Density
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Density?>! source) -> Gu.Units.Density?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.ElectricalConductance>! source) -> Gu.Units.ElectricalConductance
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.ElectricalConductance?>! source) -> Gu.Units.ElectricalConductance?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.ElectricCharge>! source) -> Gu.Units.ElectricCharge
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.ElectricCharge?>! source) -> Gu.Units.ElectricCharge?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Energy>! source) -> Gu.Units.Energy
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Energy?>! source) -> Gu.Units.Energy?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Flexibility>! source) -> Gu.Units.Flexibility
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Flexibility?>! source) -> Gu.Units.Flexibility?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Force>! source) -> Gu.Units.Force
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Force?>! source) -> Gu.Units.Force?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.ForcePerUnitless>! source) -> Gu.Units.ForcePerUnitless
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.ForcePerUnitless?>! source) -> Gu.Units.ForcePerUnitless?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Frequency>! source) -> Gu.Units.Frequency
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Frequency?>! source) -> Gu.Units.Frequency?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Illuminance>! source) -> Gu.Units.Illuminance
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Illuminance?>! source) -> Gu.Units.Illuminance?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Inductance>! source) -> Gu.Units.Inductance
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Inductance?>! source) -> Gu.Units.Inductance?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Jerk>! source) -> Gu.Units.Jerk
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Jerk?>! source) -> Gu.Units.Jerk?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.KinematicViscosity>! source) -> Gu.Units.KinematicViscosity
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.KinematicViscosity?>! source) -> Gu.Units.KinematicViscosity?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Length>! source) -> Gu.Units.Length
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Length?>! source) -> Gu.Units.Length?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.LengthPerUnitless>! source) -> Gu.Units.LengthPerUnitless
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.LengthPerUnitless?>! source) -> Gu.Units.LengthPerUnitless?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.LuminousFlux>! source) -> Gu.Units.LuminousFlux
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.LuminousFlux?>! source) -> Gu.Units.LuminousFlux?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.LuminousIntensity>! source) -> Gu.Units.LuminousIntensity
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.LuminousIntensity?>! source) -> Gu.Units.LuminousIntensity?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.MagneticFieldStrength>! source) -> Gu.Units.MagneticFieldStrength
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.MagneticFieldStrength?>! source) -> Gu.Units.MagneticFieldStrength?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.MagneticFlux>! source) -> Gu.Units.MagneticFlux
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.MagneticFlux?>! source) -> Gu.Units.MagneticFlux?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Mass>! source) -> Gu.Units.Mass
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Mass?>! source) -> Gu.Units.Mass?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.MassFlow>! source) -> Gu.Units.MassFlow
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.MassFlow?>! source) -> Gu.Units.MassFlow?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.MolarHeatCapacity>! source) -> Gu.Units.MolarHeatCapacity
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.MolarHeatCapacity?>! source) -> Gu.Units.MolarHeatCapacity?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.MolarMass>! source) -> Gu.Units.MolarMass
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.MolarMass?>! source) -> Gu.Units.MolarMass?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Momentum>! source) -> Gu.Units.Momentum
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Momentum?>! source) -> Gu.Units.Momentum?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Power>! source) -> Gu.Units.Power
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Power?>! source) -> Gu.Units.Power?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Pressure>! source) -> Gu.Units.Pressure
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Pressure?>! source) -> Gu.Units.Pressure?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Resistance>! source) -> Gu.Units.Resistance
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Resistance?>! source) -> Gu.Units.Resistance?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.SolidAngle>! source) -> Gu.Units.SolidAngle
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.SolidAngle?>! source) -> Gu.Units.SolidAngle?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.SpecificEnergy>! source) -> Gu.Units.SpecificEnergy
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.SpecificEnergy?>! source) -> Gu.Units.SpecificEnergy?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.SpecificVolume>! source) -> Gu.Units.SpecificVolume
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.SpecificVolume?>! source) -> Gu.Units.SpecificVolume?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Speed>! source) -> Gu.Units.Speed
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Speed?>! source) -> Gu.Units.Speed?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Stiffness>! source) -> Gu.Units.Stiffness
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Stiffness?>! source) -> Gu.Units.Stiffness?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Temperature>! source) -> Gu.Units.Temperature
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Temperature?>! source) -> Gu.Units.Temperature?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Time>! source) -> Gu.Units.Time
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Time?>! source) -> Gu.Units.Time?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Torque>! source) -> Gu.Units.Torque
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Torque?>! source) -> Gu.Units.Torque?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Unitless>! source) -> Gu.Units.Unitless
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Unitless?>! source) -> Gu.Units.Unitless?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Voltage>! source) -> Gu.Units.Voltage
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Voltage?>! source) -> Gu.Units.Voltage?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Volume>! source) -> Gu.Units.Volume
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Volume?>! source) -> Gu.Units.Volume?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.VolumetricFlow>! source) -> Gu.Units.VolumetricFlow
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.VolumetricFlow?>! source) -> Gu.Units.VolumetricFlow?
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Wavenumber>! source) -> Gu.Units.Wavenumber
static Gu.Units.EnumerableUnits.Sum(this System.Collections.Generic.IEnumerable<Gu.Units.Wavenumber?>! source) -> Gu.Units.Wavenumber?
static Gu.Units.Flexibility.From(double value, Gu.Units.FlexibilityUnit unit) -> Gu.Units.Flexibility
static Gu.Units.Flexibility.FromMetresPerNewton(double metresPerNewton) -> Gu.Units.Flexibility
static Gu.Units.Flexibility.FromMicrometresPerKilonewton(double micrometresPerKilonewton) -> Gu.Units.Flexibility
static Gu.Units.Flexibility.FromMillimetresPerKilonewton(double millimetresPerKilonewton) -> Gu.Units.Flexibility
static Gu.Units.Flexibility.FromMillimetresPerNewton(double millimetresPerNewton) -> Gu.Units.Flexibility
static Gu.Units.Flexibility.operator !=(Gu.Units.Flexibility left, Gu.Units.Flexibility right) -> bool
static Gu.Units.Flexibility.operator *(double left, Gu.Units.Flexibility right) -> Gu.Units.Flexibility
static Gu.Units.Flexibility.operator *(Gu.Units.Flexibility left, double right) -> Gu.Units.Flexibility
static Gu.Units.Flexibility.operator *(Gu.Units.Flexibility left, Gu.Units.Energy right) -> Gu.Units.Area
static Gu.Units.Flexibility.operator *(Gu.Units.Flexibility left, Gu.Units.Force right) -> Gu.Units.Length
static Gu.Units.Flexibility.operator *(Gu.Units.Flexibility left, Gu.Units.ForcePerUnitless right) -> Gu.Units.LengthPerUnitless
static Gu.Units.Flexibility.operator *(Gu.Units.Flexibility left, Gu.Units.MassFlow right) -> Gu.Units.Time
static Gu.Units.Flexibility.operator *(Gu.Units.Flexibility left, Gu.Units.Power right) -> Gu.Units.KinematicViscosity
static Gu.Units.Flexibility.operator *(Gu.Units.Flexibility left, Gu.Units.Pressure right) -> Gu.Units.Wavenumber
static Gu.Units.Flexibility.operator +(Gu.Units.Flexibility flexibility) -> Gu.Units.Flexibility
static Gu.Units.Flexibility.operator +(Gu.Units.Flexibility left, Gu.Units.Flexibility right) -> Gu.Units.Flexibility
static Gu.Units.Flexibility.operator -(Gu.Units.Flexibility flexibility) -> Gu.Units.Flexibility
static Gu.Units.Flexibility.operator -(Gu.Units.Flexibility left, Gu.Units.Flexibility right) -> Gu.Units.Flexibility
static Gu.Units.Flexibility.operator /(double left, Gu.Units.Flexibility right) -> Gu.Units.Stiffness
static Gu.Units.Flexibility.operator /(Gu.Units.Flexibility left, double right) -> Gu.Units.Flexibility
static Gu.Units.Flexibility.operator /(Gu.Units.Flexibility left, Gu.Units.Flexibility right) -> double
static Gu.Units.Flexibility.operator <(Gu.Units.Flexibility left, Gu.Units.Flexibility right) -> bool
static Gu.Units.Flexibility.operator <=(Gu.Units.Flexibility left, Gu.Units.Flexibility right) -> bool
static Gu.Units.Flexibility.operator ==(Gu.Units.Flexibility left, Gu.Units.Flexibility right) -> bool
static Gu.Units.Flexibility.operator >(Gu.Units.Flexibility left, Gu.Units.Flexibility right) -> bool
static Gu.Units.Flexibility.operator >=(Gu.Units.Flexibility left, Gu.Units.Flexibility right) -> bool
static Gu.Units.Flexibility.Parse(string! text) -> Gu.Units.Flexibility
static Gu.Units.Flexibility.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Flexibility
static Gu.Units.Flexibility.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Flexibility
static Gu.Units.Flexibility.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Flexibility
static Gu.Units.Flexibility.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Flexibility
static Gu.Units.Flexibility.TryParse(string! text, out Gu.Units.Flexibility result) -> bool
static Gu.Units.Flexibility.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Flexibility result) -> bool
static Gu.Units.Flexibility.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Flexibility result) -> bool
static Gu.Units.Flexibility.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Flexibility result) -> bool
static Gu.Units.FlexibilityUnit.operator !=(Gu.Units.FlexibilityUnit left, Gu.Units.FlexibilityUnit right) -> bool
static Gu.Units.FlexibilityUnit.operator *(double left, Gu.Units.FlexibilityUnit right) -> Gu.Units.Flexibility
static Gu.Units.FlexibilityUnit.operator ==(Gu.Units.FlexibilityUnit left, Gu.Units.FlexibilityUnit right) -> bool
static Gu.Units.FlexibilityUnit.Parse(string! text) -> Gu.Units.FlexibilityUnit
static Gu.Units.FlexibilityUnit.TryParse(string! text, out Gu.Units.FlexibilityUnit result) -> bool
static Gu.Units.Force.From(double value, Gu.Units.ForceUnit unit) -> Gu.Units.Force
static Gu.Units.Force.FromGiganewtons(double giganewtons) -> Gu.Units.Force
static Gu.Units.Force.FromKilonewtons(double kilonewtons) -> Gu.Units.Force
static Gu.Units.Force.FromMeganewtons(double meganewtons) -> Gu.Units.Force
static Gu.Units.Force.FromMicronewtons(double micronewtons) -> Gu.Units.Force
static Gu.Units.Force.FromMillinewtons(double millinewtons) -> Gu.Units.Force
static Gu.Units.Force.FromNanonewtons(double nanonewtons) -> Gu.Units.Force
static Gu.Units.Force.FromNewtons(double newtons) -> Gu.Units.Force
static Gu.Units.Force.operator !=(Gu.Units.Force left, Gu.Units.Force right) -> bool
static Gu.Units.Force.operator *(double left, Gu.Units.Force right) -> Gu.Units.Force
static Gu.Units.Force.operator *(Gu.Units.Force left, double right) -> Gu.Units.Force
static Gu.Units.Force.operator *(Gu.Units.Force left, Gu.Units.Flexibility right) -> Gu.Units.Length
static Gu.Units.Force.operator *(Gu.Units.Force left, Gu.Units.Length right) -> Gu.Units.Energy
static Gu.Units.Force.operator *(Gu.Units.Force left, Gu.Units.Speed right) -> Gu.Units.Power
static Gu.Units.Force.operator *(Gu.Units.Force left, Gu.Units.Time right) -> Gu.Units.Momentum
static Gu.Units.Force.operator *(Gu.Units.Force left, Gu.Units.Wavenumber right) -> Gu.Units.Stiffness
static Gu.Units.Force.operator +(Gu.Units.Force force) -> Gu.Units.Force
static Gu.Units.Force.operator +(Gu.Units.Force left, Gu.Units.Force right) -> Gu.Units.Force
static Gu.Units.Force.operator -(Gu.Units.Force force) -> Gu.Units.Force
static Gu.Units.Force.operator -(Gu.Units.Force left, Gu.Units.Force right) -> Gu.Units.Force
static Gu.Units.Force.operator /(Gu.Units.Force left, double right) -> Gu.Units.Force
static Gu.Units.Force.operator /(Gu.Units.Force left, Gu.Units.Acceleration right) -> Gu.Units.Mass
static Gu.Units.Force.operator /(Gu.Units.Force left, Gu.Units.Area right) -> Gu.Units.Pressure
static Gu.Units.Force.operator /(Gu.Units.Force left, Gu.Units.Energy right) -> Gu.Units.Wavenumber
static Gu.Units.Force.operator /(Gu.Units.Force left, Gu.Units.Force right) -> double
static Gu.Units.Force.operator /(Gu.Units.Force left, Gu.Units.ForcePerUnitless right) -> Gu.Units.Unitless
static Gu.Units.Force.operator /(Gu.Units.Force left, Gu.Units.Frequency right) -> Gu.Units.Momentum
static Gu.Units.Force.operator /(Gu.Units.Force left, Gu.Units.Length right) -> Gu.Units.Stiffness
static Gu.Units.Force.operator /(Gu.Units.Force left, Gu.Units.Mass right) -> Gu.Units.Acceleration
static Gu.Units.Force.operator /(Gu.Units.Force left, Gu.Units.MassFlow right) -> Gu.Units.Speed
static Gu.Units.Force.operator /(Gu.Units.Force left, Gu.Units.Momentum right) -> Gu.Units.Frequency
static Gu.Units.Force.operator /(Gu.Units.Force left, Gu.Units.Pressure right) -> Gu.Units.Area
static Gu.Units.Force.operator /(Gu.Units.Force left, Gu.Units.Speed right) -> Gu.Units.MassFlow
static Gu.Units.Force.operator /(Gu.Units.Force left, Gu.Units.Stiffness right) -> Gu.Units.Length
static Gu.Units.Force.operator /(Gu.Units.Force left, Gu.Units.Unitless right) -> Gu.Units.ForcePerUnitless
static Gu.Units.Force.operator /(Gu.Units.Force left, Gu.Units.Wavenumber right) -> Gu.Units.Energy
static Gu.Units.Force.operator <(Gu.Units.Force left, Gu.Units.Force right) -> bool
static Gu.Units.Force.operator <=(Gu.Units.Force left, Gu.Units.Force right) -> bool
static Gu.Units.Force.operator ==(Gu.Units.Force left, Gu.Units.Force right) -> bool
static Gu.Units.Force.operator >(Gu.Units.Force left, Gu.Units.Force right) -> bool
static Gu.Units.Force.operator >=(Gu.Units.Force left, Gu.Units.Force right) -> bool
static Gu.Units.Force.Parse(string! text) -> Gu.Units.Force
static Gu.Units.Force.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Force
static Gu.Units.Force.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Force
static Gu.Units.Force.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Force
static Gu.Units.Force.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Force
static Gu.Units.Force.TryParse(string! text, out Gu.Units.Force result) -> bool
static Gu.Units.Force.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Force result) -> bool
static Gu.Units.Force.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Force result) -> bool
static Gu.Units.Force.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Force result) -> bool
static Gu.Units.ForcePerUnitless.From(double value, Gu.Units.ForcePerUnitlessUnit unit) -> Gu.Units.ForcePerUnitless
static Gu.Units.ForcePerUnitless.FromGiganewtonsPerPercent(double giganewtonsPerPercent) -> Gu.Units.ForcePerUnitless
static Gu.Units.ForcePerUnitless.FromKilonewtonsPerPercent(double kilonewtonsPerPercent) -> Gu.Units.ForcePerUnitless
static Gu.Units.ForcePerUnitless.FromMeganewtonsPerPercent(double meganewtonsPerPercent) -> Gu.Units.ForcePerUnitless
static Gu.Units.ForcePerUnitless.FromNewtonsPerPercent(double newtonsPerPercent) -> Gu.Units.ForcePerUnitless
static Gu.Units.ForcePerUnitless.FromNewtonsPerUnitless(double newtonsPerUnitless) -> Gu.Units.ForcePerUnitless
static Gu.Units.ForcePerUnitless.operator !=(Gu.Units.ForcePerUnitless left, Gu.Units.ForcePerUnitless right) -> bool
static Gu.Units.ForcePerUnitless.operator *(double left, Gu.Units.ForcePerUnitless right) -> Gu.Units.ForcePerUnitless
static Gu.Units.ForcePerUnitless.operator *(Gu.Units.ForcePerUnitless left, double right) -> Gu.Units.ForcePerUnitless
static Gu.Units.ForcePerUnitless.operator *(Gu.Units.ForcePerUnitless left, Gu.Units.Flexibility right) -> Gu.Units.LengthPerUnitless
static Gu.Units.ForcePerUnitless.operator *(Gu.Units.ForcePerUnitless left, Gu.Units.Unitless right) -> Gu.Units.Force
static Gu.Units.ForcePerUnitless.operator +(Gu.Units.ForcePerUnitless forcePerUnitless) -> Gu.Units.ForcePerUnitless
static Gu.Units.ForcePerUnitless.operator +(Gu.Units.ForcePerUnitless left, Gu.Units.ForcePerUnitless right) -> Gu.Units.ForcePerUnitless
static Gu.Units.ForcePerUnitless.operator -(Gu.Units.ForcePerUnitless forcePerUnitless) -> Gu.Units.ForcePerUnitless
static Gu.Units.ForcePerUnitless.operator -(Gu.Units.ForcePerUnitless left, Gu.Units.ForcePerUnitless right) -> Gu.Units.ForcePerUnitless
static Gu.Units.ForcePerUnitless.operator /(Gu.Units.ForcePerUnitless left, double right) -> Gu.Units.ForcePerUnitless
static Gu.Units.ForcePerUnitless.operator /(Gu.Units.ForcePerUnitless left, Gu.Units.ForcePerUnitless right) -> double
static Gu.Units.ForcePerUnitless.operator /(Gu.Units.ForcePerUnitless left, Gu.Units.LengthPerUnitless right) -> Gu.Units.Stiffness
static Gu.Units.ForcePerUnitless.operator /(Gu.Units.ForcePerUnitless left, Gu.Units.Stiffness right) -> Gu.Units.LengthPerUnitless
static Gu.Units.ForcePerUnitless.operator <(Gu.Units.ForcePerUnitless left, Gu.Units.ForcePerUnitless right) -> bool
static Gu.Units.ForcePerUnitless.operator <=(Gu.Units.ForcePerUnitless left, Gu.Units.ForcePerUnitless right) -> bool
static Gu.Units.ForcePerUnitless.operator ==(Gu.Units.ForcePerUnitless left, Gu.Units.ForcePerUnitless right) -> bool
static Gu.Units.ForcePerUnitless.operator >(Gu.Units.ForcePerUnitless left, Gu.Units.ForcePerUnitless right) -> bool
static Gu.Units.ForcePerUnitless.operator >=(Gu.Units.ForcePerUnitless left, Gu.Units.ForcePerUnitless right) -> bool
static Gu.Units.ForcePerUnitless.Parse(string! text) -> Gu.Units.ForcePerUnitless
static Gu.Units.ForcePerUnitless.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.ForcePerUnitless
static Gu.Units.ForcePerUnitless.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.ForcePerUnitless
static Gu.Units.ForcePerUnitless.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.ForcePerUnitless
static Gu.Units.ForcePerUnitless.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.ForcePerUnitless
static Gu.Units.ForcePerUnitless.TryParse(string! text, out Gu.Units.ForcePerUnitless result) -> bool
static Gu.Units.ForcePerUnitless.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.ForcePerUnitless result) -> bool
static Gu.Units.ForcePerUnitless.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.ForcePerUnitless result) -> bool
static Gu.Units.ForcePerUnitless.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.ForcePerUnitless result) -> bool
static Gu.Units.ForcePerUnitlessUnit.operator !=(Gu.Units.ForcePerUnitlessUnit left, Gu.Units.ForcePerUnitlessUnit right) -> bool
static Gu.Units.ForcePerUnitlessUnit.operator *(double left, Gu.Units.ForcePerUnitlessUnit right) -> Gu.Units.ForcePerUnitless
static Gu.Units.ForcePerUnitlessUnit.operator ==(Gu.Units.ForcePerUnitlessUnit left, Gu.Units.ForcePerUnitlessUnit right) -> bool
static Gu.Units.ForcePerUnitlessUnit.Parse(string! text) -> Gu.Units.ForcePerUnitlessUnit
static Gu.Units.ForcePerUnitlessUnit.TryParse(string! text, out Gu.Units.ForcePerUnitlessUnit result) -> bool
static Gu.Units.ForceUnit.operator !=(Gu.Units.ForceUnit left, Gu.Units.ForceUnit right) -> bool
static Gu.Units.ForceUnit.operator *(double left, Gu.Units.ForceUnit right) -> Gu.Units.Force
static Gu.Units.ForceUnit.operator ==(Gu.Units.ForceUnit left, Gu.Units.ForceUnit right) -> bool
static Gu.Units.ForceUnit.Parse(string! text) -> Gu.Units.ForceUnit
static Gu.Units.ForceUnit.TryParse(string! text, out Gu.Units.ForceUnit result) -> bool
static Gu.Units.Frequency.From(double value, Gu.Units.FrequencyUnit unit) -> Gu.Units.Frequency
static Gu.Units.Frequency.FromGigahertz(double gigahertz) -> Gu.Units.Frequency
static Gu.Units.Frequency.FromHertz(double hertz) -> Gu.Units.Frequency
static Gu.Units.Frequency.FromKilohertz(double kilohertz) -> Gu.Units.Frequency
static Gu.Units.Frequency.FromMegahertz(double megahertz) -> Gu.Units.Frequency
static Gu.Units.Frequency.FromMillihertz(double millihertz) -> Gu.Units.Frequency
static Gu.Units.Frequency.operator !=(Gu.Units.Frequency left, Gu.Units.Frequency right) -> bool
static Gu.Units.Frequency.operator *(double left, Gu.Units.Frequency right) -> Gu.Units.Frequency
static Gu.Units.Frequency.operator *(Gu.Units.Frequency left, double right) -> Gu.Units.Frequency
static Gu.Units.Frequency.operator *(Gu.Units.Frequency left, Gu.Units.Acceleration right) -> Gu.Units.Jerk
static Gu.Units.Frequency.operator *(Gu.Units.Frequency left, Gu.Units.AmountOfSubstance right) -> Gu.Units.CatalyticActivity
static Gu.Units.Frequency.operator *(Gu.Units.Frequency left, Gu.Units.Angle right) -> Gu.Units.AngularSpeed
static Gu.Units.Frequency.operator *(Gu.Units.Frequency left, Gu.Units.AngularAcceleration right) -> Gu.Units.AngularJerk
static Gu.Units.Frequency.operator *(Gu.Units.Frequency left, Gu.Units.AngularSpeed right) -> Gu.Units.AngularAcceleration
static Gu.Units.Frequency.operator *(Gu.Units.Frequency left, Gu.Units.Area right) -> Gu.Units.KinematicViscosity
static Gu.Units.Frequency.operator *(Gu.Units.Frequency left, Gu.Units.Capacitance right) -> Gu.Units.ElectricalConductance
static Gu.Units.Frequency.operator *(Gu.Units.Frequency left, Gu.Units.ElectricCharge right) -> Gu.Units.Current
static Gu.Units.Frequency.operator *(Gu.Units.Frequency left, Gu.Units.Energy right) -> Gu.Units.Power
static Gu.Units.Frequency.operator *(Gu.Units.Frequency left, Gu.Units.Inductance right) -> Gu.Units.Resistance
static Gu.Units.Frequency.operator *(Gu.Units.Frequency left, Gu.Units.KinematicViscosity right) -> Gu.Units.SpecificEnergy
static Gu.Units.Frequency.operator *(Gu.Units.Frequency left, Gu.Units.Length right) -> Gu.Units.Speed
static Gu.Units.Frequency.operator *(Gu.Units.Frequency left, Gu.Units.MagneticFlux right) -> Gu.Units.Voltage
static Gu.Units.Frequency.operator *(Gu.Units.Frequency left, Gu.Units.Mass right) -> Gu.Units.MassFlow
static Gu.Units.Frequency.operator *(Gu.Units.Frequency left, Gu.Units.MassFlow right) -> Gu.Units.Stiffness
static Gu.Units.Frequency.operator *(Gu.Units.Frequency left, Gu.Units.Momentum right) -> Gu.Units.Force
static Gu.Units.Frequency.operator *(Gu.Units.Frequency left, Gu.Units.Speed right) -> Gu.Units.Acceleration
static Gu.Units.Frequency.operator *(Gu.Units.Frequency left, Gu.Units.Volume right) -> Gu.Units.VolumetricFlow
static Gu.Units.Frequency.operator +(Gu.Units.Frequency frequency) -> Gu.Units.Frequency
static Gu.Units.Frequency.operator +(Gu.Units.Frequency left, Gu.Units.Frequency right) -> Gu.Units.Frequency
static Gu.Units.Frequency.operator -(Gu.Units.Frequency frequency) -> Gu.Units.Frequency
static Gu.Units.Frequency.operator -(Gu.Units.Frequency left, Gu.Units.Frequency right) -> Gu.Units.Frequency
static Gu.Units.Frequency.operator /(double left, Gu.Units.Frequency right) -> Gu.Units.Time
static Gu.Units.Frequency.operator /(Gu.Units.Frequency left, double right) -> Gu.Units.Frequency
static Gu.Units.Frequency.operator /(Gu.Units.Frequency left, Gu.Units.Frequency right) -> double
static Gu.Units.Frequency.operator /(Gu.Units.Frequency left, Gu.Units.Speed right) -> Gu.Units.Wavenumber
static Gu.Units.Frequency.operator /(Gu.Units.Frequency left, Gu.Units.Wavenumber right) -> Gu.Units.Speed
static Gu.Units.Frequency.operator <(Gu.Units.Frequency left, Gu.Units.Frequency right) -> bool
static Gu.Units.Frequency.operator <=(Gu.Units.Frequency left, Gu.Units.Frequency right) -> bool
static Gu.Units.Frequency.operator ==(Gu.Units.Frequency left, Gu.Units.Frequency right) -> bool
static Gu.Units.Frequency.operator >(Gu.Units.Frequency left, Gu.Units.Frequency right) -> bool
static Gu.Units.Frequency.operator >=(Gu.Units.Frequency left, Gu.Units.Frequency right) -> bool
static Gu.Units.Frequency.Parse(string! text) -> Gu.Units.Frequency
static Gu.Units.Frequency.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Frequency
static Gu.Units.Frequency.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Frequency
static Gu.Units.Frequency.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Frequency
static Gu.Units.Frequency.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Frequency
static Gu.Units.Frequency.TryParse(string! text, out Gu.Units.Frequency result) -> bool
static Gu.Units.Frequency.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Frequency result) -> bool
static Gu.Units.Frequency.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Frequency result) -> bool
static Gu.Units.Frequency.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Frequency result) -> bool
static Gu.Units.FrequencyUnit.operator !=(Gu.Units.FrequencyUnit left, Gu.Units.FrequencyUnit right) -> bool
static Gu.Units.FrequencyUnit.operator *(double left, Gu.Units.FrequencyUnit right) -> Gu.Units.Frequency
static Gu.Units.FrequencyUnit.operator ==(Gu.Units.FrequencyUnit left, Gu.Units.FrequencyUnit right) -> bool
static Gu.Units.FrequencyUnit.Parse(string! text) -> Gu.Units.FrequencyUnit
static Gu.Units.FrequencyUnit.TryParse(string! text, out Gu.Units.FrequencyUnit result) -> bool
static Gu.Units.Illuminance.From(double value, Gu.Units.IlluminanceUnit unit) -> Gu.Units.Illuminance
static Gu.Units.Illuminance.FromLux(double lux) -> Gu.Units.Illuminance
static Gu.Units.Illuminance.operator !=(Gu.Units.Illuminance left, Gu.Units.Illuminance right) -> bool
static Gu.Units.Illuminance.operator *(double left, Gu.Units.Illuminance right) -> Gu.Units.Illuminance
static Gu.Units.Illuminance.operator *(Gu.Units.Illuminance left, double right) -> Gu.Units.Illuminance
static Gu.Units.Illuminance.operator *(Gu.Units.Illuminance left, Gu.Units.Area right) -> Gu.Units.LuminousFlux
static Gu.Units.Illuminance.operator +(Gu.Units.Illuminance illuminance) -> Gu.Units.Illuminance
static Gu.Units.Illuminance.operator +(Gu.Units.Illuminance left, Gu.Units.Illuminance right) -> Gu.Units.Illuminance
static Gu.Units.Illuminance.operator -(Gu.Units.Illuminance illuminance) -> Gu.Units.Illuminance
static Gu.Units.Illuminance.operator -(Gu.Units.Illuminance left, Gu.Units.Illuminance right) -> Gu.Units.Illuminance
static Gu.Units.Illuminance.operator /(Gu.Units.Illuminance left, double right) -> Gu.Units.Illuminance
static Gu.Units.Illuminance.operator /(Gu.Units.Illuminance left, Gu.Units.Illuminance right) -> double
static Gu.Units.Illuminance.operator <(Gu.Units.Illuminance left, Gu.Units.Illuminance right) -> bool
static Gu.Units.Illuminance.operator <=(Gu.Units.Illuminance left, Gu.Units.Illuminance right) -> bool
static Gu.Units.Illuminance.operator ==(Gu.Units.Illuminance left, Gu.Units.Illuminance right) -> bool
static Gu.Units.Illuminance.operator >(Gu.Units.Illuminance left, Gu.Units.Illuminance right) -> bool
static Gu.Units.Illuminance.operator >=(Gu.Units.Illuminance left, Gu.Units.Illuminance right) -> bool
static Gu.Units.Illuminance.Parse(string! text) -> Gu.Units.Illuminance
static Gu.Units.Illuminance.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Illuminance
static Gu.Units.Illuminance.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Illuminance
static Gu.Units.Illuminance.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Illuminance
static Gu.Units.Illuminance.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Illuminance
static Gu.Units.Illuminance.TryParse(string! text, out Gu.Units.Illuminance result) -> bool
static Gu.Units.Illuminance.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Illuminance result) -> bool
static Gu.Units.Illuminance.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Illuminance result) -> bool
static Gu.Units.Illuminance.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Illuminance result) -> bool
static Gu.Units.IlluminanceUnit.operator !=(Gu.Units.IlluminanceUnit left, Gu.Units.IlluminanceUnit right) -> bool
static Gu.Units.IlluminanceUnit.operator *(double left, Gu.Units.IlluminanceUnit right) -> Gu.Units.Illuminance
static Gu.Units.IlluminanceUnit.operator ==(Gu.Units.IlluminanceUnit left, Gu.Units.IlluminanceUnit right) -> bool
static Gu.Units.IlluminanceUnit.Parse(string! text) -> Gu.Units.IlluminanceUnit
static Gu.Units.IlluminanceUnit.TryParse(string! text, out Gu.Units.IlluminanceUnit result) -> bool
static Gu.Units.Inductance.From(double value, Gu.Units.InductanceUnit unit) -> Gu.Units.Inductance
static Gu.Units.Inductance.FromGigahenrys(double gigahenrys) -> Gu.Units.Inductance
static Gu.Units.Inductance.FromHenrys(double henrys) -> Gu.Units.Inductance
static Gu.Units.Inductance.FromKilohenrys(double kilohenrys) -> Gu.Units.Inductance
static Gu.Units.Inductance.FromMegahenrys(double megahenrys) -> Gu.Units.Inductance
static Gu.Units.Inductance.FromMicrohenrys(double microhenrys) -> Gu.Units.Inductance
static Gu.Units.Inductance.FromMillihenrys(double millihenrys) -> Gu.Units.Inductance
static Gu.Units.Inductance.FromNanohenrys(double nanohenrys) -> Gu.Units.Inductance
static Gu.Units.Inductance.operator !=(Gu.Units.Inductance left, Gu.Units.Inductance right) -> bool
static Gu.Units.Inductance.operator *(double left, Gu.Units.Inductance right) -> Gu.Units.Inductance
static Gu.Units.Inductance.operator *(Gu.Units.Inductance left, double right) -> Gu.Units.Inductance
static Gu.Units.Inductance.operator *(Gu.Units.Inductance left, Gu.Units.Current right) -> Gu.Units.MagneticFlux
static Gu.Units.Inductance.operator *(Gu.Units.Inductance left, Gu.Units.ElectricalConductance right) -> Gu.Units.Time
static Gu.Units.Inductance.operator *(Gu.Units.Inductance left, Gu.Units.Frequency right) -> Gu.Units.Resistance
static Gu.Units.Inductance.operator +(Gu.Units.Inductance inductance) -> Gu.Units.Inductance
static Gu.Units.Inductance.operator +(Gu.Units.Inductance left, Gu.Units.Inductance right) -> Gu.Units.Inductance
static Gu.Units.Inductance.operator -(Gu.Units.Inductance inductance) -> Gu.Units.Inductance
static Gu.Units.Inductance.operator -(Gu.Units.Inductance left, Gu.Units.Inductance right) -> Gu.Units.Inductance
static Gu.Units.Inductance.operator /(Gu.Units.Inductance left, double right) -> Gu.Units.Inductance
static Gu.Units.Inductance.operator /(Gu.Units.Inductance left, Gu.Units.Inductance right) -> double
static Gu.Units.Inductance.operator /(Gu.Units.Inductance left, Gu.Units.Resistance right) -> Gu.Units.Time
static Gu.Units.Inductance.operator /(Gu.Units.Inductance left, Gu.Units.Time right) -> Gu.Units.Resistance
static Gu.Units.Inductance.operator <(Gu.Units.Inductance left, Gu.Units.Inductance right) -> bool
static Gu.Units.Inductance.operator <=(Gu.Units.Inductance left, Gu.Units.Inductance right) -> bool
static Gu.Units.Inductance.operator ==(Gu.Units.Inductance left, Gu.Units.Inductance right) -> bool
static Gu.Units.Inductance.operator >(Gu.Units.Inductance left, Gu.Units.Inductance right) -> bool
static Gu.Units.Inductance.operator >=(Gu.Units.Inductance left, Gu.Units.Inductance right) -> bool
static Gu.Units.Inductance.Parse(string! text) -> Gu.Units.Inductance
static Gu.Units.Inductance.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Inductance
static Gu.Units.Inductance.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Inductance
static Gu.Units.Inductance.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Inductance
static Gu.Units.Inductance.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Inductance
static Gu.Units.Inductance.TryParse(string! text, out Gu.Units.Inductance result) -> bool
static Gu.Units.Inductance.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Inductance result) -> bool
static Gu.Units.Inductance.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Inductance result) -> bool
static Gu.Units.Inductance.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Inductance result) -> bool
static Gu.Units.InductanceUnit.operator !=(Gu.Units.InductanceUnit left, Gu.Units.InductanceUnit right) -> bool
static Gu.Units.InductanceUnit.operator *(double left, Gu.Units.InductanceUnit right) -> Gu.Units.Inductance
static Gu.Units.InductanceUnit.operator ==(Gu.Units.InductanceUnit left, Gu.Units.InductanceUnit right) -> bool
static Gu.Units.InductanceUnit.Parse(string! text) -> Gu.Units.InductanceUnit
static Gu.Units.InductanceUnit.TryParse(string! text, out Gu.Units.InductanceUnit result) -> bool
static Gu.Units.Jerk.From(double value, Gu.Units.JerkUnit unit) -> Gu.Units.Jerk
static Gu.Units.Jerk.FromCentimetresPerHourCubed(double centimetresPerHourCubed) -> Gu.Units.Jerk
static Gu.Units.Jerk.FromCentimetresPerMinuteCubed(double centimetresPerMinuteCubed) -> Gu.Units.Jerk
static Gu.Units.Jerk.FromCentimetresPerSecondCubed(double centimetresPerSecondCubed) -> Gu.Units.Jerk
static Gu.Units.Jerk.FromMetresPerHourCubed(double metresPerHourCubed) -> Gu.Units.Jerk
static Gu.Units.Jerk.FromMetresPerMinuteCubed(double metresPerMinuteCubed) -> Gu.Units.Jerk
static Gu.Units.Jerk.FromMetresPerSecondCubed(double metresPerSecondCubed) -> Gu.Units.Jerk
static Gu.Units.Jerk.FromMillimetresPerHourCubed(double millimetresPerHourCubed) -> Gu.Units.Jerk
static Gu.Units.Jerk.FromMillimetresPerMinuteCubed(double millimetresPerMinuteCubed) -> Gu.Units.Jerk
static Gu.Units.Jerk.FromMillimetresPerSecondCubed(double millimetresPerSecondCubed) -> Gu.Units.Jerk
static Gu.Units.Jerk.operator !=(Gu.Units.Jerk left, Gu.Units.Jerk right) -> bool
static Gu.Units.Jerk.operator *(double left, Gu.Units.Jerk right) -> Gu.Units.Jerk
static Gu.Units.Jerk.operator *(Gu.Units.Jerk left, double right) -> Gu.Units.Jerk
static Gu.Units.Jerk.operator *(Gu.Units.Jerk left, Gu.Units.Time right) -> Gu.Units.Acceleration
static Gu.Units.Jerk.operator +(Gu.Units.Jerk jerk) -> Gu.Units.Jerk
static Gu.Units.Jerk.operator +(Gu.Units.Jerk left, Gu.Units.Jerk right) -> Gu.Units.Jerk
static Gu.Units.Jerk.operator -(Gu.Units.Jerk jerk) -> Gu.Units.Jerk
static Gu.Units.Jerk.operator -(Gu.Units.Jerk left, Gu.Units.Jerk right) -> Gu.Units.Jerk
static Gu.Units.Jerk.operator /(Gu.Units.Jerk left, double right) -> Gu.Units.Jerk
static Gu.Units.Jerk.operator /(Gu.Units.Jerk left, Gu.Units.Acceleration right) -> Gu.Units.Frequency
static Gu.Units.Jerk.operator /(Gu.Units.Jerk left, Gu.Units.Frequency right) -> Gu.Units.Acceleration
static Gu.Units.Jerk.operator /(Gu.Units.Jerk left, Gu.Units.Jerk right) -> double
static Gu.Units.Jerk.operator <(Gu.Units.Jerk left, Gu.Units.Jerk right) -> bool
static Gu.Units.Jerk.operator <=(Gu.Units.Jerk left, Gu.Units.Jerk right) -> bool
static Gu.Units.Jerk.operator ==(Gu.Units.Jerk left, Gu.Units.Jerk right) -> bool
static Gu.Units.Jerk.operator >(Gu.Units.Jerk left, Gu.Units.Jerk right) -> bool
static Gu.Units.Jerk.operator >=(Gu.Units.Jerk left, Gu.Units.Jerk right) -> bool
static Gu.Units.Jerk.Parse(string! text) -> Gu.Units.Jerk
static Gu.Units.Jerk.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Jerk
static Gu.Units.Jerk.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Jerk
static Gu.Units.Jerk.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Jerk
static Gu.Units.Jerk.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Jerk
static Gu.Units.Jerk.TryParse(string! text, out Gu.Units.Jerk result) -> bool
static Gu.Units.Jerk.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Jerk result) -> bool
static Gu.Units.Jerk.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Jerk result) -> bool
static Gu.Units.Jerk.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Jerk result) -> bool
static Gu.Units.JerkUnit.operator !=(Gu.Units.JerkUnit left, Gu.Units.JerkUnit right) -> bool
static Gu.Units.JerkUnit.operator *(double left, Gu.Units.JerkUnit right) -> Gu.Units.Jerk
static Gu.Units.JerkUnit.operator ==(Gu.Units.JerkUnit left, Gu.Units.JerkUnit right) -> bool
static Gu.Units.JerkUnit.Parse(string! text) -> Gu.Units.JerkUnit
static Gu.Units.JerkUnit.TryParse(string! text, out Gu.Units.JerkUnit result) -> bool
static Gu.Units.KinematicViscosity.From(double value, Gu.Units.KinematicViscosityUnit unit) -> Gu.Units.KinematicViscosity
static Gu.Units.KinematicViscosity.FromSquareMetresPerSecond(double squareMetresPerSecond) -> Gu.Units.KinematicViscosity
static Gu.Units.KinematicViscosity.operator !=(Gu.Units.KinematicViscosity left, Gu.Units.KinematicViscosity right) -> bool
static Gu.Units.KinematicViscosity.operator *(double left, Gu.Units.KinematicViscosity right) -> Gu.Units.KinematicViscosity
static Gu.Units.KinematicViscosity.operator *(Gu.Units.KinematicViscosity left, double right) -> Gu.Units.KinematicViscosity
static Gu.Units.KinematicViscosity.operator *(Gu.Units.KinematicViscosity left, Gu.Units.AreaDensity right) -> Gu.Units.MassFlow
static Gu.Units.KinematicViscosity.operator *(Gu.Units.KinematicViscosity left, Gu.Units.Frequency right) -> Gu.Units.SpecificEnergy
static Gu.Units.KinematicViscosity.operator *(Gu.Units.KinematicViscosity left, Gu.Units.Length right) -> Gu.Units.VolumetricFlow
static Gu.Units.KinematicViscosity.operator *(Gu.Units.KinematicViscosity left, Gu.Units.MagneticFieldStrength right) -> Gu.Units.Voltage
static Gu.Units.KinematicViscosity.operator *(Gu.Units.KinematicViscosity left, Gu.Units.MassFlow right) -> Gu.Units.Energy
static Gu.Units.KinematicViscosity.operator *(Gu.Units.KinematicViscosity left, Gu.Units.Stiffness right) -> Gu.Units.Power
static Gu.Units.KinematicViscosity.operator *(Gu.Units.KinematicViscosity left, Gu.Units.Time right) -> Gu.Units.Area
static Gu.Units.KinematicViscosity.operator *(Gu.Units.KinematicViscosity left, Gu.Units.Wavenumber right) -> Gu.Units.Speed
static Gu.Units.KinematicViscosity.operator +(Gu.Units.KinematicViscosity kinematicViscosity) -> Gu.Units.KinematicViscosity
static Gu.Units.KinematicViscosity.operator +(Gu.Units.KinematicViscosity left, Gu.Units.KinematicViscosity right) -> Gu.Units.KinematicViscosity
static Gu.Units.KinematicViscosity.operator -(Gu.Units.KinematicViscosity kinematicViscosity) -> Gu.Units.KinematicViscosity
static Gu.Units.KinematicViscosity.operator -(Gu.Units.KinematicViscosity left, Gu.Units.KinematicViscosity right) -> Gu.Units.KinematicViscosity
static Gu.Units.KinematicViscosity.operator /(Gu.Units.KinematicViscosity left, double right) -> Gu.Units.KinematicViscosity
static Gu.Units.KinematicViscosity.operator /(Gu.Units.KinematicViscosity left, Gu.Units.Area right) -> Gu.Units.Frequency
static Gu.Units.KinematicViscosity.operator /(Gu.Units.KinematicViscosity left, Gu.Units.Flexibility right) -> Gu.Units.Power
static Gu.Units.KinematicViscosity.operator /(Gu.Units.KinematicViscosity left, Gu.Units.Frequency right) -> Gu.Units.Area
static Gu.Units.KinematicViscosity.operator /(Gu.Units.KinematicViscosity left, Gu.Units.KinematicViscosity right) -> double
static Gu.Units.KinematicViscosity.operator /(Gu.Units.KinematicViscosity left, Gu.Units.Length right) -> Gu.Units.Speed
static Gu.Units.KinematicViscosity.operator /(Gu.Units.KinematicViscosity left, Gu.Units.Power right) -> Gu.Units.Flexibility
static Gu.Units.KinematicViscosity.operator /(Gu.Units.KinematicViscosity left, Gu.Units.SpecificEnergy right) -> Gu.Units.Time
static Gu.Units.KinematicViscosity.operator /(Gu.Units.KinematicViscosity left, Gu.Units.Speed right) -> Gu.Units.Length
static Gu.Units.KinematicViscosity.operator /(Gu.Units.KinematicViscosity left, Gu.Units.Time right) -> Gu.Units.SpecificEnergy
static Gu.Units.KinematicViscosity.operator /(Gu.Units.KinematicViscosity left, Gu.Units.VolumetricFlow right) -> Gu.Units.Wavenumber
static Gu.Units.KinematicViscosity.operator /(Gu.Units.KinematicViscosity left, Gu.Units.Wavenumber right) -> Gu.Units.VolumetricFlow
static Gu.Units.KinematicViscosity.operator <(Gu.Units.KinematicViscosity left, Gu.Units.KinematicViscosity right) -> bool
static Gu.Units.KinematicViscosity.operator <=(Gu.Units.KinematicViscosity left, Gu.Units.KinematicViscosity right) -> bool
static Gu.Units.KinematicViscosity.operator ==(Gu.Units.KinematicViscosity left, Gu.Units.KinematicViscosity right) -> bool
static Gu.Units.KinematicViscosity.operator >(Gu.Units.KinematicViscosity left, Gu.Units.KinematicViscosity right) -> bool
static Gu.Units.KinematicViscosity.operator >=(Gu.Units.KinematicViscosity left, Gu.Units.KinematicViscosity right) -> bool
static Gu.Units.KinematicViscosity.Parse(string! text) -> Gu.Units.KinematicViscosity
static Gu.Units.KinematicViscosity.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.KinematicViscosity
static Gu.Units.KinematicViscosity.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.KinematicViscosity
static Gu.Units.KinematicViscosity.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.KinematicViscosity
static Gu.Units.KinematicViscosity.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.KinematicViscosity
static Gu.Units.KinematicViscosity.TryParse(string! text, out Gu.Units.KinematicViscosity result) -> bool
static Gu.Units.KinematicViscosity.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.KinematicViscosity result) -> bool
static Gu.Units.KinematicViscosity.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.KinematicViscosity result) -> bool
static Gu.Units.KinematicViscosity.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.KinematicViscosity result) -> bool
static Gu.Units.KinematicViscosityUnit.operator !=(Gu.Units.KinematicViscosityUnit left, Gu.Units.KinematicViscosityUnit right) -> bool
static Gu.Units.KinematicViscosityUnit.operator *(double left, Gu.Units.KinematicViscosityUnit right) -> Gu.Units.KinematicViscosity
static Gu.Units.KinematicViscosityUnit.operator ==(Gu.Units.KinematicViscosityUnit left, Gu.Units.KinematicViscosityUnit right) -> bool
static Gu.Units.KinematicViscosityUnit.Parse(string! text) -> Gu.Units.KinematicViscosityUnit
static Gu.Units.KinematicViscosityUnit.TryParse(string! text, out Gu.Units.KinematicViscosityUnit result) -> bool
static Gu.Units.Length.From(double value, Gu.Units.LengthUnit unit) -> Gu.Units.Length
static Gu.Units.Length.FromCentimetres(double centimetres) -> Gu.Units.Length
static Gu.Units.Length.FromDecimetres(double decimetres) -> Gu.Units.Length
static Gu.Units.Length.FromFeet(double feet) -> Gu.Units.Length
static Gu.Units.Length.FromInches(double inches) -> Gu.Units.Length
static Gu.Units.Length.FromKilometres(double kilometres) -> Gu.Units.Length
static Gu.Units.Length.FromMetres(double metres) -> Gu.Units.Length
static Gu.Units.Length.FromMicrometres(double micrometres) -> Gu.Units.Length
static Gu.Units.Length.FromMiles(double miles) -> Gu.Units.Length
static Gu.Units.Length.FromMillimetres(double millimetres) -> Gu.Units.Length
static Gu.Units.Length.FromNanometres(double nanometres) -> Gu.Units.Length
static Gu.Units.Length.FromNauticalMiles(double nauticalMiles) -> Gu.Units.Length
static Gu.Units.Length.FromYards(double yards) -> Gu.Units.Length
static Gu.Units.Length.operator !=(Gu.Units.Length left, Gu.Units.Length right) -> bool
static Gu.Units.Length.operator *(double left, Gu.Units.Length right) -> Gu.Units.Length
static Gu.Units.Length.operator *(Gu.Units.Length left, double right) -> Gu.Units.Length
static Gu.Units.Length.operator *(Gu.Units.Length left, Gu.Units.Acceleration right) -> Gu.Units.SpecificEnergy
static Gu.Units.Length.operator *(Gu.Units.Length left, Gu.Units.Area right) -> Gu.Units.Volume
static Gu.Units.Length.operator *(Gu.Units.Length left, Gu.Units.Conductivity right) -> Gu.Units.ElectricalConductance
static Gu.Units.Length.operator *(Gu.Units.Length left, Gu.Units.Density right) -> Gu.Units.AreaDensity
static Gu.Units.Length.operator *(Gu.Units.Length left, Gu.Units.Force right) -> Gu.Units.Energy
static Gu.Units.Length.operator *(Gu.Units.Length left, Gu.Units.Frequency right) -> Gu.Units.Speed
static Gu.Units.Length.operator *(Gu.Units.Length left, Gu.Units.KinematicViscosity right) -> Gu.Units.VolumetricFlow
static Gu.Units.Length.operator *(Gu.Units.Length left, Gu.Units.Length right) -> Gu.Units.Area
static Gu.Units.Length.operator *(Gu.Units.Length left, Gu.Units.MassFlow right) -> Gu.Units.Momentum
static Gu.Units.Length.operator *(Gu.Units.Length left, Gu.Units.Pressure right) -> Gu.Units.Stiffness
static Gu.Units.Length.operator *(Gu.Units.Length left, Gu.Units.Speed right) -> Gu.Units.KinematicViscosity
static Gu.Units.Length.operator *(Gu.Units.Length left, Gu.Units.Stiffness right) -> Gu.Units.Force
static Gu.Units.Length.operator +(Gu.Units.Length left, Gu.Units.Length right) -> Gu.Units.Length
static Gu.Units.Length.operator +(Gu.Units.Length length) -> Gu.Units.Length
static Gu.Units.Length.operator -(Gu.Units.Length left, Gu.Units.Length right) -> Gu.Units.Length
static Gu.Units.Length.operator -(Gu.Units.Length length) -> Gu.Units.Length
static Gu.Units.Length.operator /(double left, Gu.Units.Length right) -> Gu.Units.Wavenumber
static Gu.Units.Length.operator /(Gu.Units.Length left, double right) -> Gu.Units.Length
static Gu.Units.Length.operator /(Gu.Units.Length left, Gu.Units.Area right) -> Gu.Units.Wavenumber
static Gu.Units.Length.operator /(Gu.Units.Length left, Gu.Units.AreaDensity right) -> Gu.Units.SpecificVolume
static Gu.Units.Length.operator /(Gu.Units.Length left, Gu.Units.Flexibility right) -> Gu.Units.Force
static Gu.Units.Length.operator /(Gu.Units.Length left, Gu.Units.Force right) -> Gu.Units.Flexibility
static Gu.Units.Length.operator /(Gu.Units.Length left, Gu.Units.Length right) -> double
static Gu.Units.Length.operator /(Gu.Units.Length left, Gu.Units.LengthPerUnitless right) -> Gu.Units.Unitless
static Gu.Units.Length.operator /(Gu.Units.Length left, Gu.Units.SpecificVolume right) -> Gu.Units.AreaDensity
static Gu.Units.Length.operator /(Gu.Units.Length left, Gu.Units.Speed right) -> Gu.Units.Time
static Gu.Units.Length.operator /(Gu.Units.Length left, Gu.Units.Time right) -> Gu.Units.Speed
static Gu.Units.Length.operator /(Gu.Units.Length left, Gu.Units.Unitless right) -> Gu.Units.LengthPerUnitless
static Gu.Units.Length.operator <(Gu.Units.Length left, Gu.Units.Length right) -> bool
static Gu.Units.Length.operator <=(Gu.Units.Length left, Gu.Units.Length right) -> bool
static Gu.Units.Length.operator ==(Gu.Units.Length left, Gu.Units.Length right) -> bool
static Gu.Units.Length.operator >(Gu.Units.Length left, Gu.Units.Length right) -> bool
static Gu.Units.Length.operator >=(Gu.Units.Length left, Gu.Units.Length right) -> bool
static Gu.Units.Length.Parse(string! text) -> Gu.Units.Length
static Gu.Units.Length.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Length
static Gu.Units.Length.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Length
static Gu.Units.Length.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Length
static Gu.Units.Length.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Length
static Gu.Units.Length.TryParse(string! text, out Gu.Units.Length result) -> bool
static Gu.Units.Length.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Length result) -> bool
static Gu.Units.Length.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Length result) -> bool
static Gu.Units.Length.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Length result) -> bool
static Gu.Units.LengthPerUnitless.From(double value, Gu.Units.LengthPerUnitlessUnit unit) -> Gu.Units.LengthPerUnitless
static Gu.Units.LengthPerUnitless.FromMetresPerPercent(double metresPerPercent) -> Gu.Units.LengthPerUnitless
static Gu.Units.LengthPerUnitless.FromMetresPerUnitless(double metresPerUnitless) -> Gu.Units.LengthPerUnitless
static Gu.Units.LengthPerUnitless.FromMicrometresPerPercent(double micrometresPerPercent) -> Gu.Units.LengthPerUnitless
static Gu.Units.LengthPerUnitless.FromMillimetresPerPercent(double millimetresPerPercent) -> Gu.Units.LengthPerUnitless
static Gu.Units.LengthPerUnitless.operator !=(Gu.Units.LengthPerUnitless left, Gu.Units.LengthPerUnitless right) -> bool
static Gu.Units.LengthPerUnitless.operator *(double left, Gu.Units.LengthPerUnitless right) -> Gu.Units.LengthPerUnitless
static Gu.Units.LengthPerUnitless.operator *(Gu.Units.LengthPerUnitless left, double right) -> Gu.Units.LengthPerUnitless
static Gu.Units.LengthPerUnitless.operator *(Gu.Units.LengthPerUnitless left, Gu.Units.Stiffness right) -> Gu.Units.ForcePerUnitless
static Gu.Units.LengthPerUnitless.operator *(Gu.Units.LengthPerUnitless left, Gu.Units.Unitless right) -> Gu.Units.Length
static Gu.Units.LengthPerUnitless.operator +(Gu.Units.LengthPerUnitless left, Gu.Units.LengthPerUnitless right) -> Gu.Units.LengthPerUnitless
static Gu.Units.LengthPerUnitless.operator +(Gu.Units.LengthPerUnitless lengthPerUnitless) -> Gu.Units.LengthPerUnitless
static Gu.Units.LengthPerUnitless.operator -(Gu.Units.LengthPerUnitless left, Gu.Units.LengthPerUnitless right) -> Gu.Units.LengthPerUnitless
static Gu.Units.LengthPerUnitless.operator -(Gu.Units.LengthPerUnitless lengthPerUnitless) -> Gu.Units.LengthPerUnitless
static Gu.Units.LengthPerUnitless.operator /(Gu.Units.LengthPerUnitless left, double right) -> Gu.Units.LengthPerUnitless
static Gu.Units.LengthPerUnitless.operator /(Gu.Units.LengthPerUnitless left, Gu.Units.Flexibility right) -> Gu.Units.ForcePerUnitless
static Gu.Units.LengthPerUnitless.operator /(Gu.Units.LengthPerUnitless left, Gu.Units.ForcePerUnitless right) -> Gu.Units.Flexibility
static Gu.Units.LengthPerUnitless.operator /(Gu.Units.LengthPerUnitless left, Gu.Units.LengthPerUnitless right) -> double
static Gu.Units.LengthPerUnitless.operator <(Gu.Units.LengthPerUnitless left, Gu.Units.LengthPerUnitless right) -> bool
static Gu.Units.LengthPerUnitless.operator <=(Gu.Units.LengthPerUnitless left, Gu.Units.LengthPerUnitless right) -> bool
static Gu.Units.LengthPerUnitless.operator ==(Gu.Units.LengthPerUnitless left, Gu.Units.LengthPerUnitless right) -> bool
static Gu.Units.LengthPerUnitless.operator >(Gu.Units.LengthPerUnitless left, Gu.Units.LengthPerUnitless right) -> bool
static Gu.Units.LengthPerUnitless.operator >=(Gu.Units.LengthPerUnitless left, Gu.Units.LengthPerUnitless right) -> bool
static Gu.Units.LengthPerUnitless.Parse(string! text) -> Gu.Units.LengthPerUnitless
static Gu.Units.LengthPerUnitless.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.LengthPerUnitless
static Gu.Units.LengthPerUnitless.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.LengthPerUnitless
static Gu.Units.LengthPerUnitless.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.LengthPerUnitless
static Gu.Units.LengthPerUnitless.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.LengthPerUnitless
static Gu.Units.LengthPerUnitless.TryParse(string! text, out Gu.Units.LengthPerUnitless result) -> bool
static Gu.Units.LengthPerUnitless.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.LengthPerUnitless result) -> bool
static Gu.Units.LengthPerUnitless.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.LengthPerUnitless result) -> bool
static Gu.Units.LengthPerUnitless.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.LengthPerUnitless result) -> bool
static Gu.Units.LengthPerUnitlessUnit.operator !=(Gu.Units.LengthPerUnitlessUnit left, Gu.Units.LengthPerUnitlessUnit right) -> bool
static Gu.Units.LengthPerUnitlessUnit.operator *(double left, Gu.Units.LengthPerUnitlessUnit right) -> Gu.Units.LengthPerUnitless
static Gu.Units.LengthPerUnitlessUnit.operator ==(Gu.Units.LengthPerUnitlessUnit left, Gu.Units.LengthPerUnitlessUnit right) -> bool
static Gu.Units.LengthPerUnitlessUnit.Parse(string! text) -> Gu.Units.LengthPerUnitlessUnit
static Gu.Units.LengthPerUnitlessUnit.TryParse(string! text, out Gu.Units.LengthPerUnitlessUnit result) -> bool
static Gu.Units.LengthUnit.operator !=(Gu.Units.LengthUnit left, Gu.Units.LengthUnit right) -> bool
static Gu.Units.LengthUnit.operator *(double left, Gu.Units.LengthUnit right) -> Gu.Units.Length
static Gu.Units.LengthUnit.operator ==(Gu.Units.LengthUnit left, Gu.Units.LengthUnit right) -> bool
static Gu.Units.LengthUnit.Parse(string! text) -> Gu.Units.LengthUnit
static Gu.Units.LengthUnit.TryParse(string! text, out Gu.Units.LengthUnit result) -> bool
static Gu.Units.LuminousFlux.From(double value, Gu.Units.LuminousFluxUnit unit) -> Gu.Units.LuminousFlux
static Gu.Units.LuminousFlux.FromLumens(double lumens) -> Gu.Units.LuminousFlux
static Gu.Units.LuminousFlux.operator !=(Gu.Units.LuminousFlux left, Gu.Units.LuminousFlux right) -> bool
static Gu.Units.LuminousFlux.operator *(double left, Gu.Units.LuminousFlux right) -> Gu.Units.LuminousFlux
static Gu.Units.LuminousFlux.operator *(Gu.Units.LuminousFlux left, double right) -> Gu.Units.LuminousFlux
static Gu.Units.LuminousFlux.operator +(Gu.Units.LuminousFlux left, Gu.Units.LuminousFlux right) -> Gu.Units.LuminousFlux
static Gu.Units.LuminousFlux.operator +(Gu.Units.LuminousFlux luminousFlux) -> Gu.Units.LuminousFlux
static Gu.Units.LuminousFlux.operator -(Gu.Units.LuminousFlux left, Gu.Units.LuminousFlux right) -> Gu.Units.LuminousFlux
static Gu.Units.LuminousFlux.operator -(Gu.Units.LuminousFlux luminousFlux) -> Gu.Units.LuminousFlux
static Gu.Units.LuminousFlux.operator /(Gu.Units.LuminousFlux left, double right) -> Gu.Units.LuminousFlux
static Gu.Units.LuminousFlux.operator /(Gu.Units.LuminousFlux left, Gu.Units.Area right) -> Gu.Units.Illuminance
static Gu.Units.LuminousFlux.operator /(Gu.Units.LuminousFlux left, Gu.Units.Illuminance right) -> Gu.Units.Area
static Gu.Units.LuminousFlux.operator /(Gu.Units.LuminousFlux left, Gu.Units.LuminousFlux right) -> double
static Gu.Units.LuminousFlux.operator /(Gu.Units.LuminousFlux left, Gu.Units.LuminousIntensity right) -> Gu.Units.SolidAngle
static Gu.Units.LuminousFlux.operator /(Gu.Units.LuminousFlux left, Gu.Units.SolidAngle right) -> Gu.Units.LuminousIntensity
static Gu.Units.LuminousFlux.operator <(Gu.Units.LuminousFlux left, Gu.Units.LuminousFlux right) -> bool
static Gu.Units.LuminousFlux.operator <=(Gu.Units.LuminousFlux left, Gu.Units.LuminousFlux right) -> bool
static Gu.Units.LuminousFlux.operator ==(Gu.Units.LuminousFlux left, Gu.Units.LuminousFlux right) -> bool
static Gu.Units.LuminousFlux.operator >(Gu.Units.LuminousFlux left, Gu.Units.LuminousFlux right) -> bool
static Gu.Units.LuminousFlux.operator >=(Gu.Units.LuminousFlux left, Gu.Units.LuminousFlux right) -> bool
static Gu.Units.LuminousFlux.Parse(string! text) -> Gu.Units.LuminousFlux
static Gu.Units.LuminousFlux.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.LuminousFlux
static Gu.Units.LuminousFlux.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.LuminousFlux
static Gu.Units.LuminousFlux.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.LuminousFlux
static Gu.Units.LuminousFlux.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.LuminousFlux
static Gu.Units.LuminousFlux.TryParse(string! text, out Gu.Units.LuminousFlux result) -> bool
static Gu.Units.LuminousFlux.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.LuminousFlux result) -> bool
static Gu.Units.LuminousFlux.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.LuminousFlux result) -> bool
static Gu.Units.LuminousFlux.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.LuminousFlux result) -> bool
static Gu.Units.LuminousFluxUnit.operator !=(Gu.Units.LuminousFluxUnit left, Gu.Units.LuminousFluxUnit right) -> bool
static Gu.Units.LuminousFluxUnit.operator *(double left, Gu.Units.LuminousFluxUnit right) -> Gu.Units.LuminousFlux
static Gu.Units.LuminousFluxUnit.operator ==(Gu.Units.LuminousFluxUnit left, Gu.Units.LuminousFluxUnit right) -> bool
static Gu.Units.LuminousFluxUnit.Parse(string! text) -> Gu.Units.LuminousFluxUnit
static Gu.Units.LuminousFluxUnit.TryParse(string! text, out Gu.Units.LuminousFluxUnit result) -> bool
static Gu.Units.LuminousIntensity.From(double value, Gu.Units.LuminousIntensityUnit unit) -> Gu.Units.LuminousIntensity
static Gu.Units.LuminousIntensity.FromCandelas(double candelas) -> Gu.Units.LuminousIntensity
static Gu.Units.LuminousIntensity.operator !=(Gu.Units.LuminousIntensity left, Gu.Units.LuminousIntensity right) -> bool
static Gu.Units.LuminousIntensity.operator *(double left, Gu.Units.LuminousIntensity right) -> Gu.Units.LuminousIntensity
static Gu.Units.LuminousIntensity.operator *(Gu.Units.LuminousIntensity left, double right) -> Gu.Units.LuminousIntensity
static Gu.Units.LuminousIntensity.operator *(Gu.Units.LuminousIntensity left, Gu.Units.SolidAngle right) -> Gu.Units.LuminousFlux
static Gu.Units.LuminousIntensity.operator +(Gu.Units.LuminousIntensity left, Gu.Units.LuminousIntensity right) -> Gu.Units.LuminousIntensity
static Gu.Units.LuminousIntensity.operator +(Gu.Units.LuminousIntensity luminousIntensity) -> Gu.Units.LuminousIntensity
static Gu.Units.LuminousIntensity.operator -(Gu.Units.LuminousIntensity left, Gu.Units.LuminousIntensity right) -> Gu.Units.LuminousIntensity
static Gu.Units.LuminousIntensity.operator -(Gu.Units.LuminousIntensity luminousIntensity) -> Gu.Units.LuminousIntensity
static Gu.Units.LuminousIntensity.operator /(Gu.Units.LuminousIntensity left, double right) -> Gu.Units.LuminousIntensity
static Gu.Units.LuminousIntensity.operator /(Gu.Units.LuminousIntensity left, Gu.Units.LuminousIntensity right) -> double
static Gu.Units.LuminousIntensity.operator <(Gu.Units.LuminousIntensity left, Gu.Units.LuminousIntensity right) -> bool
static Gu.Units.LuminousIntensity.operator <=(Gu.Units.LuminousIntensity left, Gu.Units.LuminousIntensity right) -> bool
static Gu.Units.LuminousIntensity.operator ==(Gu.Units.LuminousIntensity left, Gu.Units.LuminousIntensity right) -> bool
static Gu.Units.LuminousIntensity.operator >(Gu.Units.LuminousIntensity left, Gu.Units.LuminousIntensity right) -> bool
static Gu.Units.LuminousIntensity.operator >=(Gu.Units.LuminousIntensity left, Gu.Units.LuminousIntensity right) -> bool
static Gu.Units.LuminousIntensity.Parse(string! text) -> Gu.Units.LuminousIntensity
static Gu.Units.LuminousIntensity.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.LuminousIntensity
static Gu.Units.LuminousIntensity.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.LuminousIntensity
static Gu.Units.LuminousIntensity.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.LuminousIntensity
static Gu.Units.LuminousIntensity.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.LuminousIntensity
static Gu.Units.LuminousIntensity.TryParse(string! text, out Gu.Units.LuminousIntensity result) -> bool
static Gu.Units.LuminousIntensity.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.LuminousIntensity result) -> bool
static Gu.Units.LuminousIntensity.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.LuminousIntensity result) -> bool
static Gu.Units.LuminousIntensity.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.LuminousIntensity result) -> bool
static Gu.Units.LuminousIntensityUnit.operator !=(Gu.Units.LuminousIntensityUnit left, Gu.Units.LuminousIntensityUnit right) -> bool
static Gu.Units.LuminousIntensityUnit.operator *(double left, Gu.Units.LuminousIntensityUnit right) -> Gu.Units.LuminousIntensity
static Gu.Units.LuminousIntensityUnit.operator ==(Gu.Units.LuminousIntensityUnit left, Gu.Units.LuminousIntensityUnit right) -> bool
static Gu.Units.LuminousIntensityUnit.Parse(string! text) -> Gu.Units.LuminousIntensityUnit
static Gu.Units.LuminousIntensityUnit.TryParse(string! text, out Gu.Units.LuminousIntensityUnit result) -> bool
static Gu.Units.MagneticFieldStrength.From(double value, Gu.Units.MagneticFieldStrengthUnit unit) -> Gu.Units.MagneticFieldStrength
static Gu.Units.MagneticFieldStrength.FromTeslas(double teslas) -> Gu.Units.MagneticFieldStrength
static Gu.Units.MagneticFieldStrength.operator !=(Gu.Units.MagneticFieldStrength left, Gu.Units.MagneticFieldStrength right) -> bool
static Gu.Units.MagneticFieldStrength.operator *(double left, Gu.Units.MagneticFieldStrength right) -> Gu.Units.MagneticFieldStrength
static Gu.Units.MagneticFieldStrength.operator *(Gu.Units.MagneticFieldStrength left, double right) -> Gu.Units.MagneticFieldStrength
static Gu.Units.MagneticFieldStrength.operator *(Gu.Units.MagneticFieldStrength left, Gu.Units.Area right) -> Gu.Units.MagneticFlux
static Gu.Units.MagneticFieldStrength.operator *(Gu.Units.MagneticFieldStrength left, Gu.Units.Current right) -> Gu.Units.Stiffness
static Gu.Units.MagneticFieldStrength.operator *(Gu.Units.MagneticFieldStrength left, Gu.Units.ElectricCharge right) -> Gu.Units.MassFlow
static Gu.Units.MagneticFieldStrength.operator *(Gu.Units.MagneticFieldStrength left, Gu.Units.KinematicViscosity right) -> Gu.Units.Voltage
static Gu.Units.MagneticFieldStrength.operator +(Gu.Units.MagneticFieldStrength left, Gu.Units.MagneticFieldStrength right) -> Gu.Units.MagneticFieldStrength
static Gu.Units.MagneticFieldStrength.operator +(Gu.Units.MagneticFieldStrength magneticFieldStrength) -> Gu.Units.MagneticFieldStrength
static Gu.Units.MagneticFieldStrength.operator -(Gu.Units.MagneticFieldStrength left, Gu.Units.MagneticFieldStrength right) -> Gu.Units.MagneticFieldStrength
static Gu.Units.MagneticFieldStrength.operator -(Gu.Units.MagneticFieldStrength magneticFieldStrength) -> Gu.Units.MagneticFieldStrength
static Gu.Units.MagneticFieldStrength.operator /(Gu.Units.MagneticFieldStrength left, double right) -> Gu.Units.MagneticFieldStrength
static Gu.Units.MagneticFieldStrength.operator /(Gu.Units.MagneticFieldStrength left, Gu.Units.MagneticFieldStrength right) -> double
static Gu.Units.MagneticFieldStrength.operator <(Gu.Units.MagneticFieldStrength left, Gu.Units.MagneticFieldStrength right) -> bool
static Gu.Units.MagneticFieldStrength.operator <=(Gu.Units.MagneticFieldStrength left, Gu.Units.MagneticFieldStrength right) -> bool
static Gu.Units.MagneticFieldStrength.operator ==(Gu.Units.MagneticFieldStrength left, Gu.Units.MagneticFieldStrength right) -> bool
static Gu.Units.MagneticFieldStrength.operator >(Gu.Units.MagneticFieldStrength left, Gu.Units.MagneticFieldStrength right) -> bool
static Gu.Units.MagneticFieldStrength.operator >=(Gu.Units.MagneticFieldStrength left, Gu.Units.MagneticFieldStrength right) -> bool
static Gu.Units.MagneticFieldStrength.Parse(string! text) -> Gu.Units.MagneticFieldStrength
static Gu.Units.MagneticFieldStrength.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.MagneticFieldStrength
static Gu.Units.MagneticFieldStrength.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.MagneticFieldStrength
static Gu.Units.MagneticFieldStrength.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.MagneticFieldStrength
static Gu.Units.MagneticFieldStrength.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.MagneticFieldStrength
static Gu.Units.MagneticFieldStrength.TryParse(string! text, out Gu.Units.MagneticFieldStrength result) -> bool
static Gu.Units.MagneticFieldStrength.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.MagneticFieldStrength result) -> bool
static Gu.Units.MagneticFieldStrength.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.MagneticFieldStrength result) -> bool
static Gu.Units.MagneticFieldStrength.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.MagneticFieldStrength result) -> bool
static Gu.Units.MagneticFieldStrengthUnit.operator !=(Gu.Units.MagneticFieldStrengthUnit left, Gu.Units.MagneticFieldStrengthUnit right) -> bool
static Gu.Units.MagneticFieldStrengthUnit.operator *(double left, Gu.Units.MagneticFieldStrengthUnit right) -> Gu.Units.MagneticFieldStrength
static Gu.Units.MagneticFieldStrengthUnit.operator ==(Gu.Units.MagneticFieldStrengthUnit left, Gu.Units.MagneticFieldStrengthUnit right) -> bool
static Gu.Units.MagneticFieldStrengthUnit.Parse(string! text) -> Gu.Units.MagneticFieldStrengthUnit
static Gu.Units.MagneticFieldStrengthUnit.TryParse(string! text, out Gu.Units.MagneticFieldStrengthUnit result) -> bool
static Gu.Units.MagneticFlux.From(double value, Gu.Units.MagneticFluxUnit unit) -> Gu.Units.MagneticFlux
static Gu.Units.MagneticFlux.FromWebers(double webers) -> Gu.Units.MagneticFlux
static Gu.Units.MagneticFlux.operator !=(Gu.Units.MagneticFlux left, Gu.Units.MagneticFlux right) -> bool
static Gu.Units.MagneticFlux.operator *(double left, Gu.Units.MagneticFlux right) -> Gu.Units.MagneticFlux
static Gu.Units.MagneticFlux.operator *(Gu.Units.MagneticFlux left, double right) -> Gu.Units.MagneticFlux
static Gu.Units.MagneticFlux.operator *(Gu.Units.MagneticFlux left, Gu.Units.Current right) -> Gu.Units.Energy
static Gu.Units.MagneticFlux.operator *(Gu.Units.MagneticFlux left, Gu.Units.ElectricalConductance right) -> Gu.Units.ElectricCharge
static Gu.Units.MagneticFlux.operator *(Gu.Units.MagneticFlux left, Gu.Units.Frequency right) -> Gu.Units.Voltage
static Gu.Units.MagneticFlux.operator +(Gu.Units.MagneticFlux left, Gu.Units.MagneticFlux right) -> Gu.Units.MagneticFlux
static Gu.Units.MagneticFlux.operator +(Gu.Units.MagneticFlux magneticFlux) -> Gu.Units.MagneticFlux
static Gu.Units.MagneticFlux.operator -(Gu.Units.MagneticFlux left, Gu.Units.MagneticFlux right) -> Gu.Units.MagneticFlux
static Gu.Units.MagneticFlux.operator -(Gu.Units.MagneticFlux magneticFlux) -> Gu.Units.MagneticFlux
static Gu.Units.MagneticFlux.operator /(Gu.Units.MagneticFlux left, double right) -> Gu.Units.MagneticFlux
static Gu.Units.MagneticFlux.operator /(Gu.Units.MagneticFlux left, Gu.Units.Area right) -> Gu.Units.MagneticFieldStrength
static Gu.Units.MagneticFlux.operator /(Gu.Units.MagneticFlux left, Gu.Units.Current right) -> Gu.Units.Inductance
static Gu.Units.MagneticFlux.operator /(Gu.Units.MagneticFlux left, Gu.Units.ElectricCharge right) -> Gu.Units.Resistance
static Gu.Units.MagneticFlux.operator /(Gu.Units.MagneticFlux left, Gu.Units.Inductance right) -> Gu.Units.Current
static Gu.Units.MagneticFlux.operator /(Gu.Units.MagneticFlux left, Gu.Units.MagneticFieldStrength right) -> Gu.Units.Area
static Gu.Units.MagneticFlux.operator /(Gu.Units.MagneticFlux left, Gu.Units.MagneticFlux right) -> double
static Gu.Units.MagneticFlux.operator /(Gu.Units.MagneticFlux left, Gu.Units.Resistance right) -> Gu.Units.ElectricCharge
static Gu.Units.MagneticFlux.operator /(Gu.Units.MagneticFlux left, Gu.Units.Time right) -> Gu.Units.Voltage
static Gu.Units.MagneticFlux.operator /(Gu.Units.MagneticFlux left, Gu.Units.Voltage right) -> Gu.Units.Time
static Gu.Units.MagneticFlux.operator <(Gu.Units.MagneticFlux left, Gu.Units.MagneticFlux right) -> bool
static Gu.Units.MagneticFlux.operator <=(Gu.Units.MagneticFlux left, Gu.Units.MagneticFlux right) -> bool
static Gu.Units.MagneticFlux.operator ==(Gu.Units.MagneticFlux left, Gu.Units.MagneticFlux right) -> bool
static Gu.Units.MagneticFlux.operator >(Gu.Units.MagneticFlux left, Gu.Units.MagneticFlux right) -> bool
static Gu.Units.MagneticFlux.operator >=(Gu.Units.MagneticFlux left, Gu.Units.MagneticFlux right) -> bool
static Gu.Units.MagneticFlux.Parse(string! text) -> Gu.Units.MagneticFlux
static Gu.Units.MagneticFlux.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.MagneticFlux
static Gu.Units.MagneticFlux.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.MagneticFlux
static Gu.Units.MagneticFlux.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.MagneticFlux
static Gu.Units.MagneticFlux.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.MagneticFlux
static Gu.Units.MagneticFlux.TryParse(string! text, out Gu.Units.MagneticFlux result) -> bool
static Gu.Units.MagneticFlux.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.MagneticFlux result) -> bool
static Gu.Units.MagneticFlux.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.MagneticFlux result) -> bool
static Gu.Units.MagneticFlux.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.MagneticFlux result) -> bool
static Gu.Units.MagneticFluxUnit.operator !=(Gu.Units.MagneticFluxUnit left, Gu.Units.MagneticFluxUnit right) -> bool
static Gu.Units.MagneticFluxUnit.operator *(double left, Gu.Units.MagneticFluxUnit right) -> Gu.Units.MagneticFlux
static Gu.Units.MagneticFluxUnit.operator ==(Gu.Units.MagneticFluxUnit left, Gu.Units.MagneticFluxUnit right) -> bool
static Gu.Units.MagneticFluxUnit.Parse(string! text) -> Gu.Units.MagneticFluxUnit
static Gu.Units.MagneticFluxUnit.TryParse(string! text, out Gu.Units.MagneticFluxUnit result) -> bool
static Gu.Units.Mass.From(double value, Gu.Units.MassUnit unit) -> Gu.Units.Mass
static Gu.Units.Mass.FromAvoirdupoisOunces(double avoirdupoisOunces) -> Gu.Units.Mass
static Gu.Units.Mass.FromAvoirdupoisPounds(double avoirdupoisPounds) -> Gu.Units.Mass
static Gu.Units.Mass.FromGrams(double grams) -> Gu.Units.Mass
static Gu.Units.Mass.FromKilograms(double kilograms) -> Gu.Units.Mass
static Gu.Units.Mass.FromMicrograms(double micrograms) -> Gu.Units.Mass
static Gu.Units.Mass.FromMilligrams(double milligrams) -> Gu.Units.Mass
static Gu.Units.Mass.FromTroyGrains(double troyGrains) -> Gu.Units.Mass
static Gu.Units.Mass.FromTroyOunces(double troyOunces) -> Gu.Units.Mass
static Gu.Units.Mass.operator !=(Gu.Units.Mass left, Gu.Units.Mass right) -> bool
static Gu.Units.Mass.operator *(double left, Gu.Units.Mass right) -> Gu.Units.Mass
static Gu.Units.Mass.operator *(Gu.Units.Mass left, double right) -> Gu.Units.Mass
static Gu.Units.Mass.operator *(Gu.Units.Mass left, Gu.Units.Acceleration right) -> Gu.Units.Force
static Gu.Units.Mass.operator *(Gu.Units.Mass left, Gu.Units.Frequency right) -> Gu.Units.MassFlow
static Gu.Units.Mass.operator *(Gu.Units.Mass left, Gu.Units.SpecificEnergy right) -> Gu.Units.Energy
static Gu.Units.Mass.operator *(Gu.Units.Mass left, Gu.Units.SpecificVolume right) -> Gu.Units.Volume
static Gu.Units.Mass.operator *(Gu.Units.Mass left, Gu.Units.Speed right) -> Gu.Units.Momentum
static Gu.Units.Mass.operator +(Gu.Units.Mass left, Gu.Units.Mass right) -> Gu.Units.Mass
static Gu.Units.Mass.operator +(Gu.Units.Mass mass) -> Gu.Units.Mass
static Gu.Units.Mass.operator -(Gu.Units.Mass left, Gu.Units.Mass right) -> Gu.Units.Mass
static Gu.Units.Mass.operator -(Gu.Units.Mass mass) -> Gu.Units.Mass
static Gu.Units.Mass.operator /(Gu.Units.Mass left, double right) -> Gu.Units.Mass
static Gu.Units.Mass.operator /(Gu.Units.Mass left, Gu.Units.AmountOfSubstance right) -> Gu.Units.MolarMass
static Gu.Units.Mass.operator /(Gu.Units.Mass left, Gu.Units.Area right) -> Gu.Units.AreaDensity
static Gu.Units.Mass.operator /(Gu.Units.Mass left, Gu.Units.AreaDensity right) -> Gu.Units.Area
static Gu.Units.Mass.operator /(Gu.Units.Mass left, Gu.Units.Density right) -> Gu.Units.Volume
static Gu.Units.Mass.operator /(Gu.Units.Mass left, Gu.Units.Mass right) -> double
static Gu.Units.Mass.operator /(Gu.Units.Mass left, Gu.Units.MassFlow right) -> Gu.Units.Time
static Gu.Units.Mass.operator /(Gu.Units.Mass left, Gu.Units.MolarMass right) -> Gu.Units.AmountOfSubstance
static Gu.Units.Mass.operator /(Gu.Units.Mass left, Gu.Units.Time right) -> Gu.Units.MassFlow
static Gu.Units.Mass.operator /(Gu.Units.Mass left, Gu.Units.Volume right) -> Gu.Units.Density
static Gu.Units.Mass.operator <(Gu.Units.Mass left, Gu.Units.Mass right) -> bool
static Gu.Units.Mass.operator <=(Gu.Units.Mass left, Gu.Units.Mass right) -> bool
static Gu.Units.Mass.operator ==(Gu.Units.Mass left, Gu.Units.Mass right) -> bool
static Gu.Units.Mass.operator >(Gu.Units.Mass left, Gu.Units.Mass right) -> bool
static Gu.Units.Mass.operator >=(Gu.Units.Mass left, Gu.Units.Mass right) -> bool
static Gu.Units.Mass.Parse(string! text) -> Gu.Units.Mass
static Gu.Units.Mass.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Mass
static Gu.Units.Mass.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Mass
static Gu.Units.Mass.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Mass
static Gu.Units.Mass.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Mass
static Gu.Units.Mass.TryParse(string! text, out Gu.Units.Mass result) -> bool
static Gu.Units.Mass.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Mass result) -> bool
static Gu.Units.Mass.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Mass result) -> bool
static Gu.Units.Mass.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Mass result) -> bool
static Gu.Units.MassFlow.From(double value, Gu.Units.MassFlowUnit unit) -> Gu.Units.MassFlow
static Gu.Units.MassFlow.FromKilogramsPerSecond(double kilogramsPerSecond) -> Gu.Units.MassFlow
static Gu.Units.MassFlow.operator !=(Gu.Units.MassFlow left, Gu.Units.MassFlow right) -> bool
static Gu.Units.MassFlow.operator *(double left, Gu.Units.MassFlow right) -> Gu.Units.MassFlow
static Gu.Units.MassFlow.operator *(Gu.Units.MassFlow left, double right) -> Gu.Units.MassFlow
static Gu.Units.MassFlow.operator *(Gu.Units.MassFlow left, Gu.Units.Flexibility right) -> Gu.Units.Time
static Gu.Units.MassFlow.operator *(Gu.Units.MassFlow left, Gu.Units.Frequency right) -> Gu.Units.Stiffness
static Gu.Units.MassFlow.operator *(Gu.Units.MassFlow left, Gu.Units.KinematicViscosity right) -> Gu.Units.Energy
static Gu.Units.MassFlow.operator *(Gu.Units.MassFlow left, Gu.Units.Length right) -> Gu.Units.Momentum
static Gu.Units.MassFlow.operator *(Gu.Units.MassFlow left, Gu.Units.SpecificEnergy right) -> Gu.Units.Power
static Gu.Units.MassFlow.operator *(Gu.Units.MassFlow left, Gu.Units.SpecificVolume right) -> Gu.Units.VolumetricFlow
static Gu.Units.MassFlow.operator *(Gu.Units.MassFlow left, Gu.Units.Speed right) -> Gu.Units.Force
static Gu.Units.MassFlow.operator *(Gu.Units.MassFlow left, Gu.Units.Time right) -> Gu.Units.Mass
static Gu.Units.MassFlow.operator +(Gu.Units.MassFlow left, Gu.Units.MassFlow right) -> Gu.Units.MassFlow
static Gu.Units.MassFlow.operator +(Gu.Units.MassFlow massFlow) -> Gu.Units.MassFlow
static Gu.Units.MassFlow.operator -(Gu.Units.MassFlow left, Gu.Units.MassFlow right) -> Gu.Units.MassFlow
static Gu.Units.MassFlow.operator -(Gu.Units.MassFlow massFlow) -> Gu.Units.MassFlow
static Gu.Units.MassFlow.operator /(Gu.Units.MassFlow left, double right) -> Gu.Units.MassFlow
static Gu.Units.MassFlow.operator /(Gu.Units.MassFlow left, Gu.Units.AreaDensity right) -> Gu.Units.KinematicViscosity
static Gu.Units.MassFlow.operator /(Gu.Units.MassFlow left, Gu.Units.CatalyticActivity right) -> Gu.Units.MolarMass
static Gu.Units.MassFlow.operator /(Gu.Units.MassFlow left, Gu.Units.Density right) -> Gu.Units.VolumetricFlow
static Gu.Units.MassFlow.operator /(Gu.Units.MassFlow left, Gu.Units.ElectricCharge right) -> Gu.Units.MagneticFieldStrength
static Gu.Units.MassFlow.operator /(Gu.Units.MassFlow left, Gu.Units.Frequency right) -> Gu.Units.Mass
static Gu.Units.MassFlow.operator /(Gu.Units.MassFlow left, Gu.Units.KinematicViscosity right) -> Gu.Units.AreaDensity
static Gu.Units.MassFlow.operator /(Gu.Units.MassFlow left, Gu.Units.MagneticFieldStrength right) -> Gu.Units.ElectricCharge
static Gu.Units.MassFlow.operator /(Gu.Units.MassFlow left, Gu.Units.Mass right) -> Gu.Units.Frequency
static Gu.Units.MassFlow.operator /(Gu.Units.MassFlow left, Gu.Units.MassFlow right) -> double
static Gu.Units.MassFlow.operator /(Gu.Units.MassFlow left, Gu.Units.MolarMass right) -> Gu.Units.CatalyticActivity
static Gu.Units.MassFlow.operator /(Gu.Units.MassFlow left, Gu.Units.Momentum right) -> Gu.Units.Wavenumber
static Gu.Units.MassFlow.operator /(Gu.Units.MassFlow left, Gu.Units.Stiffness right) -> Gu.Units.Time
static Gu.Units.MassFlow.operator /(Gu.Units.MassFlow left, Gu.Units.Time right) -> Gu.Units.Stiffness
static Gu.Units.MassFlow.operator /(Gu.Units.MassFlow left, Gu.Units.VolumetricFlow right) -> Gu.Units.Density
static Gu.Units.MassFlow.operator /(Gu.Units.MassFlow left, Gu.Units.Wavenumber right) -> Gu.Units.Momentum
static Gu.Units.MassFlow.operator <(Gu.Units.MassFlow left, Gu.Units.MassFlow right) -> bool
static Gu.Units.MassFlow.operator <=(Gu.Units.MassFlow left, Gu.Units.MassFlow right) -> bool
static Gu.Units.MassFlow.operator ==(Gu.Units.MassFlow left, Gu.Units.MassFlow right) -> bool
static Gu.Units.MassFlow.operator >(Gu.Units.MassFlow left, Gu.Units.MassFlow right) -> bool
static Gu.Units.MassFlow.operator >=(Gu.Units.MassFlow left, Gu.Units.MassFlow right) -> bool
static Gu.Units.MassFlow.Parse(string! text) -> Gu.Units.MassFlow
static Gu.Units.MassFlow.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.MassFlow
static Gu.Units.MassFlow.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.MassFlow
static Gu.Units.MassFlow.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.MassFlow
static Gu.Units.MassFlow.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.MassFlow
static Gu.Units.MassFlow.TryParse(string! text, out Gu.Units.MassFlow result) -> bool
static Gu.Units.MassFlow.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.MassFlow result) -> bool
static Gu.Units.MassFlow.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.MassFlow result) -> bool
static Gu.Units.MassFlow.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.MassFlow result) -> bool
static Gu.Units.MassFlowUnit.operator !=(Gu.Units.MassFlowUnit left, Gu.Units.MassFlowUnit right) -> bool
static Gu.Units.MassFlowUnit.operator *(double left, Gu.Units.MassFlowUnit right) -> Gu.Units.MassFlow
static Gu.Units.MassFlowUnit.operator ==(Gu.Units.MassFlowUnit left, Gu.Units.MassFlowUnit right) -> bool
static Gu.Units.MassFlowUnit.Parse(string! text) -> Gu.Units.MassFlowUnit
static Gu.Units.MassFlowUnit.TryParse(string! text, out Gu.Units.MassFlowUnit result) -> bool
static Gu.Units.MassUnit.operator !=(Gu.Units.MassUnit left, Gu.Units.MassUnit right) -> bool
static Gu.Units.MassUnit.operator *(double left, Gu.Units.MassUnit right) -> Gu.Units.Mass
static Gu.Units.MassUnit.operator ==(Gu.Units.MassUnit left, Gu.Units.MassUnit right) -> bool
static Gu.Units.MassUnit.Parse(string! text) -> Gu.Units.MassUnit
static Gu.Units.MassUnit.TryParse(string! text, out Gu.Units.MassUnit result) -> bool
static Gu.Units.MolarHeatCapacity.From(double value, Gu.Units.MolarHeatCapacityUnit unit) -> Gu.Units.MolarHeatCapacity
static Gu.Units.MolarHeatCapacity.FromJoulesPerKelvinMole(double joulesPerKelvinMole) -> Gu.Units.MolarHeatCapacity
static Gu.Units.MolarHeatCapacity.operator !=(Gu.Units.MolarHeatCapacity left, Gu.Units.MolarHeatCapacity right) -> bool
static Gu.Units.MolarHeatCapacity.operator *(double left, Gu.Units.MolarHeatCapacity right) -> Gu.Units.MolarHeatCapacity
static Gu.Units.MolarHeatCapacity.operator *(Gu.Units.MolarHeatCapacity left, double right) -> Gu.Units.MolarHeatCapacity
static Gu.Units.MolarHeatCapacity.operator +(Gu.Units.MolarHeatCapacity left, Gu.Units.MolarHeatCapacity right) -> Gu.Units.MolarHeatCapacity
static Gu.Units.MolarHeatCapacity.operator +(Gu.Units.MolarHeatCapacity molarHeatCapacity) -> Gu.Units.MolarHeatCapacity
static Gu.Units.MolarHeatCapacity.operator -(Gu.Units.MolarHeatCapacity left, Gu.Units.MolarHeatCapacity right) -> Gu.Units.MolarHeatCapacity
static Gu.Units.MolarHeatCapacity.operator -(Gu.Units.MolarHeatCapacity molarHeatCapacity) -> Gu.Units.MolarHeatCapacity
static Gu.Units.MolarHeatCapacity.operator /(Gu.Units.MolarHeatCapacity left, double right) -> Gu.Units.MolarHeatCapacity
static Gu.Units.MolarHeatCapacity.operator /(Gu.Units.MolarHeatCapacity left, Gu.Units.MolarHeatCapacity right) -> double
static Gu.Units.MolarHeatCapacity.operator <(Gu.Units.MolarHeatCapacity left, Gu.Units.MolarHeatCapacity right) -> bool
static Gu.Units.MolarHeatCapacity.operator <=(Gu.Units.MolarHeatCapacity left, Gu.Units.MolarHeatCapacity right) -> bool
static Gu.Units.MolarHeatCapacity.operator ==(Gu.Units.MolarHeatCapacity left, Gu.Units.MolarHeatCapacity right) -> bool
static Gu.Units.MolarHeatCapacity.operator >(Gu.Units.MolarHeatCapacity left, Gu.Units.MolarHeatCapacity right) -> bool
static Gu.Units.MolarHeatCapacity.operator >=(Gu.Units.MolarHeatCapacity left, Gu.Units.MolarHeatCapacity right) -> bool
static Gu.Units.MolarHeatCapacity.Parse(string! text) -> Gu.Units.MolarHeatCapacity
static Gu.Units.MolarHeatCapacity.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.MolarHeatCapacity
static Gu.Units.MolarHeatCapacity.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.MolarHeatCapacity
static Gu.Units.MolarHeatCapacity.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.MolarHeatCapacity
static Gu.Units.MolarHeatCapacity.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.MolarHeatCapacity
static Gu.Units.MolarHeatCapacity.TryParse(string! text, out Gu.Units.MolarHeatCapacity result) -> bool
static Gu.Units.MolarHeatCapacity.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.MolarHeatCapacity result) -> bool
static Gu.Units.MolarHeatCapacity.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.MolarHeatCapacity result) -> bool
static Gu.Units.MolarHeatCapacity.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.MolarHeatCapacity result) -> bool
static Gu.Units.MolarHeatCapacityUnit.operator !=(Gu.Units.MolarHeatCapacityUnit left, Gu.Units.MolarHeatCapacityUnit right) -> bool
static Gu.Units.MolarHeatCapacityUnit.operator *(double left, Gu.Units.MolarHeatCapacityUnit right) -> Gu.Units.MolarHeatCapacity
static Gu.Units.MolarHeatCapacityUnit.operator ==(Gu.Units.MolarHeatCapacityUnit left, Gu.Units.MolarHeatCapacityUnit right) -> bool
static Gu.Units.MolarHeatCapacityUnit.Parse(string! text) -> Gu.Units.MolarHeatCapacityUnit
static Gu.Units.MolarHeatCapacityUnit.TryParse(string! text, out Gu.Units.MolarHeatCapacityUnit result) -> bool
static Gu.Units.MolarMass.From(double value, Gu.Units.MolarMassUnit unit) -> Gu.Units.MolarMass
static Gu.Units.MolarMass.FromGramsPerMole(double gramsPerMole) -> Gu.Units.MolarMass
static Gu.Units.MolarMass.FromKilogramsPerMole(double kilogramsPerMole) -> Gu.Units.MolarMass
static Gu.Units.MolarMass.operator !=(Gu.Units.MolarMass left, Gu.Units.MolarMass right) -> bool
static Gu.Units.MolarMass.operator *(double left, Gu.Units.MolarMass right) -> Gu.Units.MolarMass
static Gu.Units.MolarMass.operator *(Gu.Units.MolarMass left, double right) -> Gu.Units.MolarMass
static Gu.Units.MolarMass.operator *(Gu.Units.MolarMass left, Gu.Units.AmountOfSubstance right) -> Gu.Units.Mass
static Gu.Units.MolarMass.operator *(Gu.Units.MolarMass left, Gu.Units.CatalyticActivity right) -> Gu.Units.MassFlow
static Gu.Units.MolarMass.operator +(Gu.Units.MolarMass left, Gu.Units.MolarMass right) -> Gu.Units.MolarMass
static Gu.Units.MolarMass.operator +(Gu.Units.MolarMass molarMass) -> Gu.Units.MolarMass
static Gu.Units.MolarMass.operator -(Gu.Units.MolarMass left, Gu.Units.MolarMass right) -> Gu.Units.MolarMass
static Gu.Units.MolarMass.operator -(Gu.Units.MolarMass molarMass) -> Gu.Units.MolarMass
static Gu.Units.MolarMass.operator /(Gu.Units.MolarMass left, double right) -> Gu.Units.MolarMass
static Gu.Units.MolarMass.operator /(Gu.Units.MolarMass left, Gu.Units.MolarMass right) -> double
static Gu.Units.MolarMass.operator <(Gu.Units.MolarMass left, Gu.Units.MolarMass right) -> bool
static Gu.Units.MolarMass.operator <=(Gu.Units.MolarMass left, Gu.Units.MolarMass right) -> bool
static Gu.Units.MolarMass.operator ==(Gu.Units.MolarMass left, Gu.Units.MolarMass right) -> bool
static Gu.Units.MolarMass.operator >(Gu.Units.MolarMass left, Gu.Units.MolarMass right) -> bool
static Gu.Units.MolarMass.operator >=(Gu.Units.MolarMass left, Gu.Units.MolarMass right) -> bool
static Gu.Units.MolarMass.Parse(string! text) -> Gu.Units.MolarMass
static Gu.Units.MolarMass.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.MolarMass
static Gu.Units.MolarMass.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.MolarMass
static Gu.Units.MolarMass.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.MolarMass
static Gu.Units.MolarMass.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.MolarMass
static Gu.Units.MolarMass.TryParse(string! text, out Gu.Units.MolarMass result) -> bool
static Gu.Units.MolarMass.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.MolarMass result) -> bool
static Gu.Units.MolarMass.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.MolarMass result) -> bool
static Gu.Units.MolarMass.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.MolarMass result) -> bool
static Gu.Units.MolarMassUnit.operator !=(Gu.Units.MolarMassUnit left, Gu.Units.MolarMassUnit right) -> bool
static Gu.Units.MolarMassUnit.operator *(double left, Gu.Units.MolarMassUnit right) -> Gu.Units.MolarMass
static Gu.Units.MolarMassUnit.operator ==(Gu.Units.MolarMassUnit left, Gu.Units.MolarMassUnit right) -> bool
static Gu.Units.MolarMassUnit.Parse(string! text) -> Gu.Units.MolarMassUnit
static Gu.Units.MolarMassUnit.TryParse(string! text, out Gu.Units.MolarMassUnit result) -> bool
static Gu.Units.Momentum.From(double value, Gu.Units.MomentumUnit unit) -> Gu.Units.Momentum
static Gu.Units.Momentum.FromNewtonSecond(double newtonSecond) -> Gu.Units.Momentum
static Gu.Units.Momentum.operator !=(Gu.Units.Momentum left, Gu.Units.Momentum right) -> bool
static Gu.Units.Momentum.operator *(double left, Gu.Units.Momentum right) -> Gu.Units.Momentum
static Gu.Units.Momentum.operator *(Gu.Units.Momentum left, double right) -> Gu.Units.Momentum
static Gu.Units.Momentum.operator *(Gu.Units.Momentum left, Gu.Units.Acceleration right) -> Gu.Units.Power
static Gu.Units.Momentum.operator *(Gu.Units.Momentum left, Gu.Units.Frequency right) -> Gu.Units.Force
static Gu.Units.Momentum.operator *(Gu.Units.Momentum left, Gu.Units.Speed right) -> Gu.Units.Energy
static Gu.Units.Momentum.operator *(Gu.Units.Momentum left, Gu.Units.Wavenumber right) -> Gu.Units.MassFlow
static Gu.Units.Momentum.operator +(Gu.Units.Momentum left, Gu.Units.Momentum right) -> Gu.Units.Momentum
static Gu.Units.Momentum.operator +(Gu.Units.Momentum momentum) -> Gu.Units.Momentum
static Gu.Units.Momentum.operator -(Gu.Units.Momentum left, Gu.Units.Momentum right) -> Gu.Units.Momentum
static Gu.Units.Momentum.operator -(Gu.Units.Momentum momentum) -> Gu.Units.Momentum
static Gu.Units.Momentum.operator /(Gu.Units.Momentum left, double right) -> Gu.Units.Momentum
static Gu.Units.Momentum.operator /(Gu.Units.Momentum left, Gu.Units.AreaDensity right) -> Gu.Units.VolumetricFlow
static Gu.Units.Momentum.operator /(Gu.Units.Momentum left, Gu.Units.Force right) -> Gu.Units.Time
static Gu.Units.Momentum.operator /(Gu.Units.Momentum left, Gu.Units.Length right) -> Gu.Units.MassFlow
static Gu.Units.Momentum.operator /(Gu.Units.Momentum left, Gu.Units.Mass right) -> Gu.Units.Speed
static Gu.Units.Momentum.operator /(Gu.Units.Momentum left, Gu.Units.MassFlow right) -> Gu.Units.Length
static Gu.Units.Momentum.operator /(Gu.Units.Momentum left, Gu.Units.Momentum right) -> double
static Gu.Units.Momentum.operator /(Gu.Units.Momentum left, Gu.Units.Speed right) -> Gu.Units.Mass
static Gu.Units.Momentum.operator /(Gu.Units.Momentum left, Gu.Units.Time right) -> Gu.Units.Force
static Gu.Units.Momentum.operator /(Gu.Units.Momentum left, Gu.Units.VolumetricFlow right) -> Gu.Units.AreaDensity
static Gu.Units.Momentum.operator <(Gu.Units.Momentum left, Gu.Units.Momentum right) -> bool
static Gu.Units.Momentum.operator <=(Gu.Units.Momentum left, Gu.Units.Momentum right) -> bool
static Gu.Units.Momentum.operator ==(Gu.Units.Momentum left, Gu.Units.Momentum right) -> bool
static Gu.Units.Momentum.operator >(Gu.Units.Momentum left, Gu.Units.Momentum right) -> bool
static Gu.Units.Momentum.operator >=(Gu.Units.Momentum left, Gu.Units.Momentum right) -> bool
static Gu.Units.Momentum.Parse(string! text) -> Gu.Units.Momentum
static Gu.Units.Momentum.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Momentum
static Gu.Units.Momentum.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Momentum
static Gu.Units.Momentum.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Momentum
static Gu.Units.Momentum.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Momentum
static Gu.Units.Momentum.TryParse(string! text, out Gu.Units.Momentum result) -> bool
static Gu.Units.Momentum.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Momentum result) -> bool
static Gu.Units.Momentum.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Momentum result) -> bool
static Gu.Units.Momentum.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Momentum result) -> bool
static Gu.Units.MomentumUnit.operator !=(Gu.Units.MomentumUnit left, Gu.Units.MomentumUnit right) -> bool
static Gu.Units.MomentumUnit.operator *(double left, Gu.Units.MomentumUnit right) -> Gu.Units.Momentum
static Gu.Units.MomentumUnit.operator ==(Gu.Units.MomentumUnit left, Gu.Units.MomentumUnit right) -> bool
static Gu.Units.MomentumUnit.Parse(string! text) -> Gu.Units.MomentumUnit
static Gu.Units.MomentumUnit.TryParse(string! text, out Gu.Units.MomentumUnit result) -> bool
static Gu.Units.Power.From(double value, Gu.Units.PowerUnit unit) -> Gu.Units.Power
static Gu.Units.Power.FromGigawatts(double gigawatts) -> Gu.Units.Power
static Gu.Units.Power.FromKilowatts(double kilowatts) -> Gu.Units.Power
static Gu.Units.Power.FromMegawatts(double megawatts) -> Gu.Units.Power
static Gu.Units.Power.FromMicrowatts(double microwatts) -> Gu.Units.Power
static Gu.Units.Power.FromMilliwatts(double milliwatts) -> Gu.Units.Power
static Gu.Units.Power.FromNanowatts(double nanowatts) -> Gu.Units.Power
static Gu.Units.Power.FromWatts(double watts) -> Gu.Units.Power
static Gu.Units.Power.operator !=(Gu.Units.Power left, Gu.Units.Power right) -> bool
static Gu.Units.Power.operator *(double left, Gu.Units.Power right) -> Gu.Units.Power
static Gu.Units.Power.operator *(Gu.Units.Power left, double right) -> Gu.Units.Power
static Gu.Units.Power.operator *(Gu.Units.Power left, Gu.Units.Flexibility right) -> Gu.Units.KinematicViscosity
static Gu.Units.Power.operator *(Gu.Units.Power left, Gu.Units.Time right) -> Gu.Units.Energy
static Gu.Units.Power.operator +(Gu.Units.Power left, Gu.Units.Power right) -> Gu.Units.Power
static Gu.Units.Power.operator +(Gu.Units.Power power) -> Gu.Units.Power
static Gu.Units.Power.operator -(Gu.Units.Power left, Gu.Units.Power right) -> Gu.Units.Power
static Gu.Units.Power.operator -(Gu.Units.Power power) -> Gu.Units.Power
static Gu.Units.Power.operator /(Gu.Units.Power left, double right) -> Gu.Units.Power
static Gu.Units.Power.operator /(Gu.Units.Power left, Gu.Units.Acceleration right) -> Gu.Units.Momentum
static Gu.Units.Power.operator /(Gu.Units.Power left, Gu.Units.AngularSpeed right) -> Gu.Units.Torque
static Gu.Units.Power.operator /(Gu.Units.Power left, Gu.Units.Current right) -> Gu.Units.Voltage
static Gu.Units.Power.operator /(Gu.Units.Power left, Gu.Units.Energy right) -> Gu.Units.Frequency
static Gu.Units.Power.operator /(Gu.Units.Power left, Gu.Units.Force right) -> Gu.Units.Speed
static Gu.Units.Power.operator /(Gu.Units.Power left, Gu.Units.Frequency right) -> Gu.Units.Energy
static Gu.Units.Power.operator /(Gu.Units.Power left, Gu.Units.KinematicViscosity right) -> Gu.Units.Stiffness
static Gu.Units.Power.operator /(Gu.Units.Power left, Gu.Units.MassFlow right) -> Gu.Units.SpecificEnergy
static Gu.Units.Power.operator /(Gu.Units.Power left, Gu.Units.Momentum right) -> Gu.Units.Acceleration
static Gu.Units.Power.operator /(Gu.Units.Power left, Gu.Units.Power right) -> double
static Gu.Units.Power.operator /(Gu.Units.Power left, Gu.Units.Pressure right) -> Gu.Units.VolumetricFlow
static Gu.Units.Power.operator /(Gu.Units.Power left, Gu.Units.SpecificEnergy right) -> Gu.Units.MassFlow
static Gu.Units.Power.operator /(Gu.Units.Power left, Gu.Units.Speed right) -> Gu.Units.Force
static Gu.Units.Power.operator /(Gu.Units.Power left, Gu.Units.Stiffness right) -> Gu.Units.KinematicViscosity
static Gu.Units.Power.operator /(Gu.Units.Power left, Gu.Units.Torque right) -> Gu.Units.AngularSpeed
static Gu.Units.Power.operator /(Gu.Units.Power left, Gu.Units.Voltage right) -> Gu.Units.Current
static Gu.Units.Power.operator /(Gu.Units.Power left, Gu.Units.VolumetricFlow right) -> Gu.Units.Pressure
static Gu.Units.Power.operator <(Gu.Units.Power left, Gu.Units.Power right) -> bool
static Gu.Units.Power.operator <=(Gu.Units.Power left, Gu.Units.Power right) -> bool
static Gu.Units.Power.operator ==(Gu.Units.Power left, Gu.Units.Power right) -> bool
static Gu.Units.Power.operator >(Gu.Units.Power left, Gu.Units.Power right) -> bool
static Gu.Units.Power.operator >=(Gu.Units.Power left, Gu.Units.Power right) -> bool
static Gu.Units.Power.Parse(string! text) -> Gu.Units.Power
static Gu.Units.Power.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Power
static Gu.Units.Power.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Power
static Gu.Units.Power.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Power
static Gu.Units.Power.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Power
static Gu.Units.Power.TryParse(string! text, out Gu.Units.Power result) -> bool
static Gu.Units.Power.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Power result) -> bool
static Gu.Units.Power.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Power result) -> bool
static Gu.Units.Power.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Power result) -> bool
static Gu.Units.PowerUnit.operator !=(Gu.Units.PowerUnit left, Gu.Units.PowerUnit right) -> bool
static Gu.Units.PowerUnit.operator *(double left, Gu.Units.PowerUnit right) -> Gu.Units.Power
static Gu.Units.PowerUnit.operator ==(Gu.Units.PowerUnit left, Gu.Units.PowerUnit right) -> bool
static Gu.Units.PowerUnit.Parse(string! text) -> Gu.Units.PowerUnit
static Gu.Units.PowerUnit.TryParse(string! text, out Gu.Units.PowerUnit result) -> bool
static Gu.Units.Pressure.From(double value, Gu.Units.PressureUnit unit) -> Gu.Units.Pressure
static Gu.Units.Pressure.FromBars(double bars) -> Gu.Units.Pressure
static Gu.Units.Pressure.FromGigapascals(double gigapascals) -> Gu.Units.Pressure
static Gu.Units.Pressure.FromKilonewtonsPerSquareMillimetre(double kilonewtonsPerSquareMillimetre) -> Gu.Units.Pressure
static Gu.Units.Pressure.FromKilopascals(double kilopascals) -> Gu.Units.Pressure
static Gu.Units.Pressure.FromMegapascals(double megapascals) -> Gu.Units.Pressure
static Gu.Units.Pressure.FromMicropascals(double micropascals) -> Gu.Units.Pressure
static Gu.Units.Pressure.FromMillibars(double millibars) -> Gu.Units.Pressure
static Gu.Units.Pressure.FromMillipascals(double millipascals) -> Gu.Units.Pressure
static Gu.Units.Pressure.FromNanopascals(double nanopascals) -> Gu.Units.Pressure
static Gu.Units.Pressure.FromNewtonsPerSquareMetre(double newtonsPerSquareMetre) -> Gu.Units.Pressure
static Gu.Units.Pressure.FromNewtonsPerSquareMillimetre(double newtonsPerSquareMillimetre) -> Gu.Units.Pressure
static Gu.Units.Pressure.FromPascals(double pascals) -> Gu.Units.Pressure
static Gu.Units.Pressure.operator !=(Gu.Units.Pressure left, Gu.Units.Pressure right) -> bool
static Gu.Units.Pressure.operator *(double left, Gu.Units.Pressure right) -> Gu.Units.Pressure
static Gu.Units.Pressure.operator *(Gu.Units.Pressure left, double right) -> Gu.Units.Pressure
static Gu.Units.Pressure.operator *(Gu.Units.Pressure left, Gu.Units.Area right) -> Gu.Units.Force
static Gu.Units.Pressure.operator *(Gu.Units.Pressure left, Gu.Units.Flexibility right) -> Gu.Units.Wavenumber
static Gu.Units.Pressure.operator *(Gu.Units.Pressure left, Gu.Units.Length right) -> Gu.Units.Stiffness
static Gu.Units.Pressure.operator *(Gu.Units.Pressure left, Gu.Units.SpecificVolume right) -> Gu.Units.SpecificEnergy
static Gu.Units.Pressure.operator *(Gu.Units.Pressure left, Gu.Units.Volume right) -> Gu.Units.Energy
static Gu.Units.Pressure.operator *(Gu.Units.Pressure left, Gu.Units.VolumetricFlow right) -> Gu.Units.Power
static Gu.Units.Pressure.operator +(Gu.Units.Pressure left, Gu.Units.Pressure right) -> Gu.Units.Pressure
static Gu.Units.Pressure.operator +(Gu.Units.Pressure pressure) -> Gu.Units.Pressure
static Gu.Units.Pressure.operator -(Gu.Units.Pressure left, Gu.Units.Pressure right) -> Gu.Units.Pressure
static Gu.Units.Pressure.operator -(Gu.Units.Pressure pressure) -> Gu.Units.Pressure
static Gu.Units.Pressure.operator /(Gu.Units.Pressure left, double right) -> Gu.Units.Pressure
static Gu.Units.Pressure.operator /(Gu.Units.Pressure left, Gu.Units.Acceleration right) -> Gu.Units.AreaDensity
static Gu.Units.Pressure.operator /(Gu.Units.Pressure left, Gu.Units.AreaDensity right) -> Gu.Units.Acceleration
static Gu.Units.Pressure.operator /(Gu.Units.Pressure left, Gu.Units.Density right) -> Gu.Units.SpecificEnergy
static Gu.Units.Pressure.operator /(Gu.Units.Pressure left, Gu.Units.Pressure right) -> double
static Gu.Units.Pressure.operator /(Gu.Units.Pressure left, Gu.Units.SpecificEnergy right) -> Gu.Units.Density
static Gu.Units.Pressure.operator /(Gu.Units.Pressure left, Gu.Units.Stiffness right) -> Gu.Units.Wavenumber
static Gu.Units.Pressure.operator /(Gu.Units.Pressure left, Gu.Units.Wavenumber right) -> Gu.Units.Stiffness
static Gu.Units.Pressure.operator <(Gu.Units.Pressure left, Gu.Units.Pressure right) -> bool
static Gu.Units.Pressure.operator <=(Gu.Units.Pressure left, Gu.Units.Pressure right) -> bool
static Gu.Units.Pressure.operator ==(Gu.Units.Pressure left, Gu.Units.Pressure right) -> bool
static Gu.Units.Pressure.operator >(Gu.Units.Pressure left, Gu.Units.Pressure right) -> bool
static Gu.Units.Pressure.operator >=(Gu.Units.Pressure left, Gu.Units.Pressure right) -> bool
static Gu.Units.Pressure.Parse(string! text) -> Gu.Units.Pressure
static Gu.Units.Pressure.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Pressure
static Gu.Units.Pressure.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Pressure
static Gu.Units.Pressure.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Pressure
static Gu.Units.Pressure.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Pressure
static Gu.Units.Pressure.TryParse(string! text, out Gu.Units.Pressure result) -> bool
static Gu.Units.Pressure.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Pressure result) -> bool
static Gu.Units.Pressure.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Pressure result) -> bool
static Gu.Units.Pressure.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Pressure result) -> bool
static Gu.Units.PressureUnit.operator !=(Gu.Units.PressureUnit left, Gu.Units.PressureUnit right) -> bool
static Gu.Units.PressureUnit.operator *(double left, Gu.Units.PressureUnit right) -> Gu.Units.Pressure
static Gu.Units.PressureUnit.operator ==(Gu.Units.PressureUnit left, Gu.Units.PressureUnit right) -> bool
static Gu.Units.PressureUnit.Parse(string! text) -> Gu.Units.PressureUnit
static Gu.Units.PressureUnit.TryParse(string! text, out Gu.Units.PressureUnit result) -> bool
static Gu.Units.Resistance.From(double value, Gu.Units.ResistanceUnit unit) -> Gu.Units.Resistance
static Gu.Units.Resistance.FromKiloohms(double kiloohms) -> Gu.Units.Resistance
static Gu.Units.Resistance.FromMegaohms(double megaohms) -> Gu.Units.Resistance
static Gu.Units.Resistance.FromMicroohms(double microohms) -> Gu.Units.Resistance
static Gu.Units.Resistance.FromMilliohms(double milliohms) -> Gu.Units.Resistance
static Gu.Units.Resistance.FromOhms(double ohms) -> Gu.Units.Resistance
static Gu.Units.Resistance.operator !=(Gu.Units.Resistance left, Gu.Units.Resistance right) -> bool
static Gu.Units.Resistance.operator *(double left, Gu.Units.Resistance right) -> Gu.Units.Resistance
static Gu.Units.Resistance.operator *(Gu.Units.Resistance left, double right) -> Gu.Units.Resistance
static Gu.Units.Resistance.operator *(Gu.Units.Resistance left, Gu.Units.Capacitance right) -> Gu.Units.Time
static Gu.Units.Resistance.operator *(Gu.Units.Resistance left, Gu.Units.Conductivity right) -> Gu.Units.Wavenumber
static Gu.Units.Resistance.operator *(Gu.Units.Resistance left, Gu.Units.Current right) -> Gu.Units.Voltage
static Gu.Units.Resistance.operator *(Gu.Units.Resistance left, Gu.Units.ElectricCharge right) -> Gu.Units.MagneticFlux
static Gu.Units.Resistance.operator *(Gu.Units.Resistance left, Gu.Units.Time right) -> Gu.Units.Inductance
static Gu.Units.Resistance.operator +(Gu.Units.Resistance left, Gu.Units.Resistance right) -> Gu.Units.Resistance
static Gu.Units.Resistance.operator +(Gu.Units.Resistance resistance) -> Gu.Units.Resistance
static Gu.Units.Resistance.operator -(Gu.Units.Resistance left, Gu.Units.Resistance right) -> Gu.Units.Resistance
static Gu.Units.Resistance.operator -(Gu.Units.Resistance resistance) -> Gu.Units.Resistance
static Gu.Units.Resistance.operator /(double left, Gu.Units.Resistance right) -> Gu.Units.ElectricalConductance
static Gu.Units.Resistance.operator /(Gu.Units.Resistance left, double right) -> Gu.Units.Resistance
static Gu.Units.Resistance.operator /(Gu.Units.Resistance left, Gu.Units.Frequency right) -> Gu.Units.Inductance
static Gu.Units.Resistance.operator /(Gu.Units.Resistance left, Gu.Units.Inductance right) -> Gu.Units.Frequency
static Gu.Units.Resistance.operator /(Gu.Units.Resistance left, Gu.Units.Resistance right) -> double
static Gu.Units.Resistance.operator <(Gu.Units.Resistance left, Gu.Units.Resistance right) -> bool
static Gu.Units.Resistance.operator <=(Gu.Units.Resistance left, Gu.Units.Resistance right) -> bool
static Gu.Units.Resistance.operator ==(Gu.Units.Resistance left, Gu.Units.Resistance right) -> bool
static Gu.Units.Resistance.operator >(Gu.Units.Resistance left, Gu.Units.Resistance right) -> bool
static Gu.Units.Resistance.operator >=(Gu.Units.Resistance left, Gu.Units.Resistance right) -> bool
static Gu.Units.Resistance.Parse(string! text) -> Gu.Units.Resistance
static Gu.Units.Resistance.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Resistance
static Gu.Units.Resistance.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Resistance
static Gu.Units.Resistance.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Resistance
static Gu.Units.Resistance.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Resistance
static Gu.Units.Resistance.TryParse(string! text, out Gu.Units.Resistance result) -> bool
static Gu.Units.Resistance.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Resistance result) -> bool
static Gu.Units.Resistance.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Resistance result) -> bool
static Gu.Units.Resistance.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Resistance result) -> bool
static Gu.Units.ResistanceUnit.operator !=(Gu.Units.ResistanceUnit left, Gu.Units.ResistanceUnit right) -> bool
static Gu.Units.ResistanceUnit.operator *(double left, Gu.Units.ResistanceUnit right) -> Gu.Units.Resistance
static Gu.Units.ResistanceUnit.operator ==(Gu.Units.ResistanceUnit left, Gu.Units.ResistanceUnit right) -> bool
static Gu.Units.ResistanceUnit.Parse(string! text) -> Gu.Units.ResistanceUnit
static Gu.Units.ResistanceUnit.TryParse(string! text, out Gu.Units.ResistanceUnit result) -> bool
static Gu.Units.SolidAngle.From(double value, Gu.Units.SolidAngleUnit unit) -> Gu.Units.SolidAngle
static Gu.Units.SolidAngle.FromSteradians(double steradians) -> Gu.Units.SolidAngle
static Gu.Units.SolidAngle.operator !=(Gu.Units.SolidAngle left, Gu.Units.SolidAngle right) -> bool
static Gu.Units.SolidAngle.operator *(double left, Gu.Units.SolidAngle right) -> Gu.Units.SolidAngle
static Gu.Units.SolidAngle.operator *(Gu.Units.SolidAngle left, double right) -> Gu.Units.SolidAngle
static Gu.Units.SolidAngle.operator *(Gu.Units.SolidAngle left, Gu.Units.LuminousIntensity right) -> Gu.Units.LuminousFlux
static Gu.Units.SolidAngle.operator +(Gu.Units.SolidAngle left, Gu.Units.SolidAngle right) -> Gu.Units.SolidAngle
static Gu.Units.SolidAngle.operator +(Gu.Units.SolidAngle solidAngle) -> Gu.Units.SolidAngle
static Gu.Units.SolidAngle.operator -(Gu.Units.SolidAngle left, Gu.Units.SolidAngle right) -> Gu.Units.SolidAngle
static Gu.Units.SolidAngle.operator -(Gu.Units.SolidAngle solidAngle) -> Gu.Units.SolidAngle
static Gu.Units.SolidAngle.operator /(Gu.Units.SolidAngle left, double right) -> Gu.Units.SolidAngle
static Gu.Units.SolidAngle.operator /(Gu.Units.SolidAngle left, Gu.Units.SolidAngle right) -> double
static Gu.Units.SolidAngle.operator <(Gu.Units.SolidAngle left, Gu.Units.SolidAngle right) -> bool
static Gu.Units.SolidAngle.operator <=(Gu.Units.SolidAngle left, Gu.Units.SolidAngle right) -> bool
static Gu.Units.SolidAngle.operator ==(Gu.Units.SolidAngle left, Gu.Units.SolidAngle right) -> bool
static Gu.Units.SolidAngle.operator >(Gu.Units.SolidAngle left, Gu.Units.SolidAngle right) -> bool
static Gu.Units.SolidAngle.operator >=(Gu.Units.SolidAngle left, Gu.Units.SolidAngle right) -> bool
static Gu.Units.SolidAngle.Parse(string! text) -> Gu.Units.SolidAngle
static Gu.Units.SolidAngle.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.SolidAngle
static Gu.Units.SolidAngle.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.SolidAngle
static Gu.Units.SolidAngle.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.SolidAngle
static Gu.Units.SolidAngle.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.SolidAngle
static Gu.Units.SolidAngle.TryParse(string! text, out Gu.Units.SolidAngle result) -> bool
static Gu.Units.SolidAngle.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.SolidAngle result) -> bool
static Gu.Units.SolidAngle.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.SolidAngle result) -> bool
static Gu.Units.SolidAngle.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.SolidAngle result) -> bool
static Gu.Units.SolidAngleUnit.operator !=(Gu.Units.SolidAngleUnit left, Gu.Units.SolidAngleUnit right) -> bool
static Gu.Units.SolidAngleUnit.operator *(double left, Gu.Units.SolidAngleUnit right) -> Gu.Units.SolidAngle
static Gu.Units.SolidAngleUnit.operator ==(Gu.Units.SolidAngleUnit left, Gu.Units.SolidAngleUnit right) -> bool
static Gu.Units.SolidAngleUnit.Parse(string! text) -> Gu.Units.SolidAngleUnit
static Gu.Units.SolidAngleUnit.TryParse(string! text, out Gu.Units.SolidAngleUnit result) -> bool
static Gu.Units.SpecificEnergy.From(double value, Gu.Units.SpecificEnergyUnit unit) -> Gu.Units.SpecificEnergy
static Gu.Units.SpecificEnergy.FromJoulesPerKilogram(double joulesPerKilogram) -> Gu.Units.SpecificEnergy
static Gu.Units.SpecificEnergy.FromKilojoulesPerKilogram(double kilojoulesPerKilogram) -> Gu.Units.SpecificEnergy
static Gu.Units.SpecificEnergy.operator !=(Gu.Units.SpecificEnergy left, Gu.Units.SpecificEnergy right) -> bool
static Gu.Units.SpecificEnergy.operator *(double left, Gu.Units.SpecificEnergy right) -> Gu.Units.SpecificEnergy
static Gu.Units.SpecificEnergy.operator *(Gu.Units.SpecificEnergy left, double right) -> Gu.Units.SpecificEnergy
static Gu.Units.SpecificEnergy.operator *(Gu.Units.SpecificEnergy left, Gu.Units.AreaDensity right) -> Gu.Units.Stiffness
static Gu.Units.SpecificEnergy.operator *(Gu.Units.SpecificEnergy left, Gu.Units.Density right) -> Gu.Units.Pressure
static Gu.Units.SpecificEnergy.operator *(Gu.Units.SpecificEnergy left, Gu.Units.Mass right) -> Gu.Units.Energy
static Gu.Units.SpecificEnergy.operator *(Gu.Units.SpecificEnergy left, Gu.Units.MassFlow right) -> Gu.Units.Power
static Gu.Units.SpecificEnergy.operator *(Gu.Units.SpecificEnergy left, Gu.Units.Time right) -> Gu.Units.KinematicViscosity
static Gu.Units.SpecificEnergy.operator *(Gu.Units.SpecificEnergy left, Gu.Units.Wavenumber right) -> Gu.Units.Acceleration
static Gu.Units.SpecificEnergy.operator +(Gu.Units.SpecificEnergy left, Gu.Units.SpecificEnergy right) -> Gu.Units.SpecificEnergy
static Gu.Units.SpecificEnergy.operator +(Gu.Units.SpecificEnergy specificEnergy) -> Gu.Units.SpecificEnergy
static Gu.Units.SpecificEnergy.operator -(Gu.Units.SpecificEnergy left, Gu.Units.SpecificEnergy right) -> Gu.Units.SpecificEnergy
static Gu.Units.SpecificEnergy.operator -(Gu.Units.SpecificEnergy specificEnergy) -> Gu.Units.SpecificEnergy
static Gu.Units.SpecificEnergy.operator /(Gu.Units.SpecificEnergy left, double right) -> Gu.Units.SpecificEnergy
static Gu.Units.SpecificEnergy.operator /(Gu.Units.SpecificEnergy left, Gu.Units.Acceleration right) -> Gu.Units.Length
static Gu.Units.SpecificEnergy.operator /(Gu.Units.SpecificEnergy left, Gu.Units.Frequency right) -> Gu.Units.KinematicViscosity
static Gu.Units.SpecificEnergy.operator /(Gu.Units.SpecificEnergy left, Gu.Units.KinematicViscosity right) -> Gu.Units.Frequency
static Gu.Units.SpecificEnergy.operator /(Gu.Units.SpecificEnergy left, Gu.Units.Length right) -> Gu.Units.Acceleration
static Gu.Units.SpecificEnergy.operator /(Gu.Units.SpecificEnergy left, Gu.Units.Pressure right) -> Gu.Units.SpecificVolume
static Gu.Units.SpecificEnergy.operator /(Gu.Units.SpecificEnergy left, Gu.Units.SpecificEnergy right) -> double
static Gu.Units.SpecificEnergy.operator /(Gu.Units.SpecificEnergy left, Gu.Units.SpecificVolume right) -> Gu.Units.Pressure
static Gu.Units.SpecificEnergy.operator /(Gu.Units.SpecificEnergy left, Gu.Units.Speed right) -> Gu.Units.Speed
static Gu.Units.SpecificEnergy.operator <(Gu.Units.SpecificEnergy left, Gu.Units.SpecificEnergy right) -> bool
static Gu.Units.SpecificEnergy.operator <=(Gu.Units.SpecificEnergy left, Gu.Units.SpecificEnergy right) -> bool
static Gu.Units.SpecificEnergy.operator ==(Gu.Units.SpecificEnergy left, Gu.Units.SpecificEnergy right) -> bool
static Gu.Units.SpecificEnergy.operator >(Gu.Units.SpecificEnergy left, Gu.Units.SpecificEnergy right) -> bool
static Gu.Units.SpecificEnergy.operator >=(Gu.Units.SpecificEnergy left, Gu.Units.SpecificEnergy right) -> bool
static Gu.Units.SpecificEnergy.Parse(string! text) -> Gu.Units.SpecificEnergy
static Gu.Units.SpecificEnergy.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.SpecificEnergy
static Gu.Units.SpecificEnergy.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.SpecificEnergy
static Gu.Units.SpecificEnergy.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.SpecificEnergy
static Gu.Units.SpecificEnergy.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.SpecificEnergy
static Gu.Units.SpecificEnergy.TryParse(string! text, out Gu.Units.SpecificEnergy result) -> bool
static Gu.Units.SpecificEnergy.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.SpecificEnergy result) -> bool
static Gu.Units.SpecificEnergy.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.SpecificEnergy result) -> bool
static Gu.Units.SpecificEnergy.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.SpecificEnergy result) -> bool
static Gu.Units.SpecificEnergyUnit.operator !=(Gu.Units.SpecificEnergyUnit left, Gu.Units.SpecificEnergyUnit right) -> bool
static Gu.Units.SpecificEnergyUnit.operator *(double left, Gu.Units.SpecificEnergyUnit right) -> Gu.Units.SpecificEnergy
static Gu.Units.SpecificEnergyUnit.operator ==(Gu.Units.SpecificEnergyUnit left, Gu.Units.SpecificEnergyUnit right) -> bool
static Gu.Units.SpecificEnergyUnit.Parse(string! text) -> Gu.Units.SpecificEnergyUnit
static Gu.Units.SpecificEnergyUnit.TryParse(string! text, out Gu.Units.SpecificEnergyUnit result) -> bool
static Gu.Units.SpecificVolume.From(double value, Gu.Units.SpecificVolumeUnit unit) -> Gu.Units.SpecificVolume
static Gu.Units.SpecificVolume.FromCubicCentimetresPerGram(double cubicCentimetresPerGram) -> Gu.Units.SpecificVolume
static Gu.Units.SpecificVolume.FromCubicMetresPerGram(double cubicMetresPerGram) -> Gu.Units.SpecificVolume
static Gu.Units.SpecificVolume.FromCubicMetresPerKilogram(double cubicMetresPerKilogram) -> Gu.Units.SpecificVolume
static Gu.Units.SpecificVolume.operator !=(Gu.Units.SpecificVolume left, Gu.Units.SpecificVolume right) -> bool
static Gu.Units.SpecificVolume.operator *(double left, Gu.Units.SpecificVolume right) -> Gu.Units.SpecificVolume
static Gu.Units.SpecificVolume.operator *(Gu.Units.SpecificVolume left, double right) -> Gu.Units.SpecificVolume
static Gu.Units.SpecificVolume.operator *(Gu.Units.SpecificVolume left, Gu.Units.AreaDensity right) -> Gu.Units.Length
static Gu.Units.SpecificVolume.operator *(Gu.Units.SpecificVolume left, Gu.Units.Mass right) -> Gu.Units.Volume
static Gu.Units.SpecificVolume.operator *(Gu.Units.SpecificVolume left, Gu.Units.MassFlow right) -> Gu.Units.VolumetricFlow
static Gu.Units.SpecificVolume.operator *(Gu.Units.SpecificVolume left, Gu.Units.Pressure right) -> Gu.Units.SpecificEnergy
static Gu.Units.SpecificVolume.operator +(Gu.Units.SpecificVolume left, Gu.Units.SpecificVolume right) -> Gu.Units.SpecificVolume
static Gu.Units.SpecificVolume.operator +(Gu.Units.SpecificVolume specificVolume) -> Gu.Units.SpecificVolume
static Gu.Units.SpecificVolume.operator -(Gu.Units.SpecificVolume left, Gu.Units.SpecificVolume right) -> Gu.Units.SpecificVolume
static Gu.Units.SpecificVolume.operator -(Gu.Units.SpecificVolume specificVolume) -> Gu.Units.SpecificVolume
static Gu.Units.SpecificVolume.operator /(double left, Gu.Units.SpecificVolume right) -> Gu.Units.Density
static Gu.Units.SpecificVolume.operator /(Gu.Units.SpecificVolume left, double right) -> Gu.Units.SpecificVolume
static Gu.Units.SpecificVolume.operator /(Gu.Units.SpecificVolume left, Gu.Units.SpecificVolume right) -> double
static Gu.Units.SpecificVolume.operator <(Gu.Units.SpecificVolume left, Gu.Units.SpecificVolume right) -> bool
static Gu.Units.SpecificVolume.operator <=(Gu.Units.SpecificVolume left, Gu.Units.SpecificVolume right) -> bool
static Gu.Units.SpecificVolume.operator ==(Gu.Units.SpecificVolume left, Gu.Units.SpecificVolume right) -> bool
static Gu.Units.SpecificVolume.operator >(Gu.Units.SpecificVolume left, Gu.Units.SpecificVolume right) -> bool
static Gu.Units.SpecificVolume.operator >=(Gu.Units.SpecificVolume left, Gu.Units.SpecificVolume right) -> bool
static Gu.Units.SpecificVolume.Parse(string! text) -> Gu.Units.SpecificVolume
static Gu.Units.SpecificVolume.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.SpecificVolume
static Gu.Units.SpecificVolume.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.SpecificVolume
static Gu.Units.SpecificVolume.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.SpecificVolume
static Gu.Units.SpecificVolume.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.SpecificVolume
static Gu.Units.SpecificVolume.TryParse(string! text, out Gu.Units.SpecificVolume result) -> bool
static Gu.Units.SpecificVolume.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.SpecificVolume result) -> bool
static Gu.Units.SpecificVolume.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.SpecificVolume result) -> bool
static Gu.Units.SpecificVolume.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.SpecificVolume result) -> bool
static Gu.Units.SpecificVolumeUnit.operator !=(Gu.Units.SpecificVolumeUnit left, Gu.Units.SpecificVolumeUnit right) -> bool
static Gu.Units.SpecificVolumeUnit.operator *(double left, Gu.Units.SpecificVolumeUnit right) -> Gu.Units.SpecificVolume
static Gu.Units.SpecificVolumeUnit.operator ==(Gu.Units.SpecificVolumeUnit left, Gu.Units.SpecificVolumeUnit right) -> bool
static Gu.Units.SpecificVolumeUnit.Parse(string! text) -> Gu.Units.SpecificVolumeUnit
static Gu.Units.SpecificVolumeUnit.TryParse(string! text, out Gu.Units.SpecificVolumeUnit result) -> bool
static Gu.Units.Speed.From(double value, Gu.Units.SpeedUnit unit) -> Gu.Units.Speed
static Gu.Units.Speed.FromCentimetresPerHour(double centimetresPerHour) -> Gu.Units.Speed
static Gu.Units.Speed.FromCentimetresPerMinute(double centimetresPerMinute) -> Gu.Units.Speed
static Gu.Units.Speed.FromCentimetresPerSecond(double centimetresPerSecond) -> Gu.Units.Speed
static Gu.Units.Speed.FromKilometresPerHour(double kilometresPerHour) -> Gu.Units.Speed
static Gu.Units.Speed.FromMetresPerHour(double metresPerHour) -> Gu.Units.Speed
static Gu.Units.Speed.FromMetresPerMinute(double metresPerMinute) -> Gu.Units.Speed
static Gu.Units.Speed.FromMetresPerSecond(double metresPerSecond) -> Gu.Units.Speed
static Gu.Units.Speed.FromMillimetresPerHour(double millimetresPerHour) -> Gu.Units.Speed
static Gu.Units.Speed.FromMillimetresPerMinute(double millimetresPerMinute) -> Gu.Units.Speed
static Gu.Units.Speed.FromMillimetresPerSecond(double millimetresPerSecond) -> Gu.Units.Speed
static Gu.Units.Speed.operator !=(Gu.Units.Speed left, Gu.Units.Speed right) -> bool
static Gu.Units.Speed.operator *(double left, Gu.Units.Speed right) -> Gu.Units.Speed
static Gu.Units.Speed.operator *(Gu.Units.Speed left, double right) -> Gu.Units.Speed
static Gu.Units.Speed.operator *(Gu.Units.Speed left, Gu.Units.Area right) -> Gu.Units.VolumetricFlow
static Gu.Units.Speed.operator *(Gu.Units.Speed left, Gu.Units.Force right) -> Gu.Units.Power
static Gu.Units.Speed.operator *(Gu.Units.Speed left, Gu.Units.Frequency right) -> Gu.Units.Acceleration
static Gu.Units.Speed.operator *(Gu.Units.Speed left, Gu.Units.Length right) -> Gu.Units.KinematicViscosity
static Gu.Units.Speed.operator *(Gu.Units.Speed left, Gu.Units.Mass right) -> Gu.Units.Momentum
static Gu.Units.Speed.operator *(Gu.Units.Speed left, Gu.Units.MassFlow right) -> Gu.Units.Force
static Gu.Units.Speed.operator *(Gu.Units.Speed left, Gu.Units.Momentum right) -> Gu.Units.Energy
static Gu.Units.Speed.operator *(Gu.Units.Speed left, Gu.Units.Speed right) -> Gu.Units.SpecificEnergy
static Gu.Units.Speed.operator *(Gu.Units.Speed left, Gu.Units.Time right) -> Gu.Units.Length
static Gu.Units.Speed.operator *(Gu.Units.Speed left, Gu.Units.Wavenumber right) -> Gu.Units.Frequency
static Gu.Units.Speed.operator +(Gu.Units.Speed left, Gu.Units.Speed right) -> Gu.Units.Speed
static Gu.Units.Speed.operator +(Gu.Units.Speed speed) -> Gu.Units.Speed
static Gu.Units.Speed.operator -(Gu.Units.Speed left, Gu.Units.Speed right) -> Gu.Units.Speed
static Gu.Units.Speed.operator -(Gu.Units.Speed speed) -> Gu.Units.Speed
static Gu.Units.Speed.operator /(Gu.Units.Speed left, double right) -> Gu.Units.Speed
static Gu.Units.Speed.operator /(Gu.Units.Speed left, Gu.Units.Acceleration right) -> Gu.Units.Time
static Gu.Units.Speed.operator /(Gu.Units.Speed left, Gu.Units.Frequency right) -> Gu.Units.Length
static Gu.Units.Speed.operator /(Gu.Units.Speed left, Gu.Units.KinematicViscosity right) -> Gu.Units.Wavenumber
static Gu.Units.Speed.operator /(Gu.Units.Speed left, Gu.Units.Length right) -> Gu.Units.Frequency
static Gu.Units.Speed.operator /(Gu.Units.Speed left, Gu.Units.Speed right) -> double
static Gu.Units.Speed.operator /(Gu.Units.Speed left, Gu.Units.Time right) -> Gu.Units.Acceleration
static Gu.Units.Speed.operator /(Gu.Units.Speed left, Gu.Units.Wavenumber right) -> Gu.Units.KinematicViscosity
static Gu.Units.Speed.operator <(Gu.Units.Speed left, Gu.Units.Speed right) -> bool
static Gu.Units.Speed.operator <=(Gu.Units.Speed left, Gu.Units.Speed right) -> bool
static Gu.Units.Speed.operator ==(Gu.Units.Speed left, Gu.Units.Speed right) -> bool
static Gu.Units.Speed.operator >(Gu.Units.Speed left, Gu.Units.Speed right) -> bool
static Gu.Units.Speed.operator >=(Gu.Units.Speed left, Gu.Units.Speed right) -> bool
static Gu.Units.Speed.Parse(string! text) -> Gu.Units.Speed
static Gu.Units.Speed.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Speed
static Gu.Units.Speed.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Speed
static Gu.Units.Speed.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Speed
static Gu.Units.Speed.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Speed
static Gu.Units.Speed.TryParse(string! text, out Gu.Units.Speed result) -> bool
static Gu.Units.Speed.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Speed result) -> bool
static Gu.Units.Speed.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Speed result) -> bool
static Gu.Units.Speed.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Speed result) -> bool
static Gu.Units.SpeedUnit.operator !=(Gu.Units.SpeedUnit left, Gu.Units.SpeedUnit right) -> bool
static Gu.Units.SpeedUnit.operator *(double left, Gu.Units.SpeedUnit right) -> Gu.Units.Speed
static Gu.Units.SpeedUnit.operator ==(Gu.Units.SpeedUnit left, Gu.Units.SpeedUnit right) -> bool
static Gu.Units.SpeedUnit.Parse(string! text) -> Gu.Units.SpeedUnit
static Gu.Units.SpeedUnit.TryParse(string! text, out Gu.Units.SpeedUnit result) -> bool
static Gu.Units.Stiffness.From(double value, Gu.Units.StiffnessUnit unit) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.FromGiganewtonsPerMicrometre(double giganewtonsPerMicrometre) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.FromGiganewtonsPerMillimetre(double giganewtonsPerMillimetre) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.FromKilonewtonsPerMicrometre(double kilonewtonsPerMicrometre) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.FromKilonewtonsPerMillimetre(double kilonewtonsPerMillimetre) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.FromKilonewtonsPerNanometre(double kilonewtonsPerNanometre) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.FromMeganewtonsPerMicrometre(double meganewtonsPerMicrometre) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.FromMeganewtonsPerMillimetre(double meganewtonsPerMillimetre) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.FromMeganewtonsPerNanometre(double meganewtonsPerNanometre) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.FromNewtonsPerMetre(double newtonsPerMetre) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.FromNewtonsPerMicrometre(double newtonsPerMicrometre) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.FromNewtonsPerMillimetre(double newtonsPerMillimetre) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.FromNewtonsPerNanometre(double newtonsPerNanometre) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.operator !=(Gu.Units.Stiffness left, Gu.Units.Stiffness right) -> bool
static Gu.Units.Stiffness.operator *(double left, Gu.Units.Stiffness right) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.operator *(Gu.Units.Stiffness left, double right) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.operator *(Gu.Units.Stiffness left, Gu.Units.Area right) -> Gu.Units.Energy
static Gu.Units.Stiffness.operator *(Gu.Units.Stiffness left, Gu.Units.KinematicViscosity right) -> Gu.Units.Power
static Gu.Units.Stiffness.operator *(Gu.Units.Stiffness left, Gu.Units.Length right) -> Gu.Units.Force
static Gu.Units.Stiffness.operator *(Gu.Units.Stiffness left, Gu.Units.LengthPerUnitless right) -> Gu.Units.ForcePerUnitless
static Gu.Units.Stiffness.operator *(Gu.Units.Stiffness left, Gu.Units.Time right) -> Gu.Units.MassFlow
static Gu.Units.Stiffness.operator *(Gu.Units.Stiffness left, Gu.Units.Wavenumber right) -> Gu.Units.Pressure
static Gu.Units.Stiffness.operator +(Gu.Units.Stiffness left, Gu.Units.Stiffness right) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.operator +(Gu.Units.Stiffness stiffness) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.operator -(Gu.Units.Stiffness left, Gu.Units.Stiffness right) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.operator -(Gu.Units.Stiffness stiffness) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.operator /(double left, Gu.Units.Stiffness right) -> Gu.Units.Flexibility
static Gu.Units.Stiffness.operator /(Gu.Units.Stiffness left, double right) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.operator /(Gu.Units.Stiffness left, Gu.Units.AreaDensity right) -> Gu.Units.SpecificEnergy
static Gu.Units.Stiffness.operator /(Gu.Units.Stiffness left, Gu.Units.Current right) -> Gu.Units.MagneticFieldStrength
static Gu.Units.Stiffness.operator /(Gu.Units.Stiffness left, Gu.Units.Force right) -> Gu.Units.Wavenumber
static Gu.Units.Stiffness.operator /(Gu.Units.Stiffness left, Gu.Units.Frequency right) -> Gu.Units.MassFlow
static Gu.Units.Stiffness.operator /(Gu.Units.Stiffness left, Gu.Units.Length right) -> Gu.Units.Pressure
static Gu.Units.Stiffness.operator /(Gu.Units.Stiffness left, Gu.Units.MagneticFieldStrength right) -> Gu.Units.Current
static Gu.Units.Stiffness.operator /(Gu.Units.Stiffness left, Gu.Units.MassFlow right) -> Gu.Units.Frequency
static Gu.Units.Stiffness.operator /(Gu.Units.Stiffness left, Gu.Units.Pressure right) -> Gu.Units.Length
static Gu.Units.Stiffness.operator /(Gu.Units.Stiffness left, Gu.Units.SpecificEnergy right) -> Gu.Units.AreaDensity
static Gu.Units.Stiffness.operator /(Gu.Units.Stiffness left, Gu.Units.Stiffness right) -> double
static Gu.Units.Stiffness.operator /(Gu.Units.Stiffness left, Gu.Units.Wavenumber right) -> Gu.Units.Force
static Gu.Units.Stiffness.operator <(Gu.Units.Stiffness left, Gu.Units.Stiffness right) -> bool
static Gu.Units.Stiffness.operator <=(Gu.Units.Stiffness left, Gu.Units.Stiffness right) -> bool
static Gu.Units.Stiffness.operator ==(Gu.Units.Stiffness left, Gu.Units.Stiffness right) -> bool
static Gu.Units.Stiffness.operator >(Gu.Units.Stiffness left, Gu.Units.Stiffness right) -> bool
static Gu.Units.Stiffness.operator >=(Gu.Units.Stiffness left, Gu.Units.Stiffness right) -> bool
static Gu.Units.Stiffness.Parse(string! text) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Stiffness
static Gu.Units.Stiffness.TryParse(string! text, out Gu.Units.Stiffness result) -> bool
static Gu.Units.Stiffness.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Stiffness result) -> bool
static Gu.Units.Stiffness.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Stiffness result) -> bool
static Gu.Units.Stiffness.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Stiffness result) -> bool
static Gu.Units.StiffnessUnit.operator !=(Gu.Units.StiffnessUnit left, Gu.Units.StiffnessUnit right) -> bool
static Gu.Units.StiffnessUnit.operator *(double left, Gu.Units.StiffnessUnit right) -> Gu.Units.Stiffness
static Gu.Units.StiffnessUnit.operator ==(Gu.Units.StiffnessUnit left, Gu.Units.StiffnessUnit right) -> bool
static Gu.Units.StiffnessUnit.Parse(string! text) -> Gu.Units.StiffnessUnit
static Gu.Units.StiffnessUnit.TryParse(string! text, out Gu.Units.StiffnessUnit result) -> bool
static Gu.Units.SuperScript.GetChar(int i) -> char
static Gu.Units.SuperScript.GetDigit(char c) -> int
static Gu.Units.SuperScript.GetString(int i) -> string!
static Gu.Units.Temperature.From(double value, Gu.Units.TemperatureUnit unit) -> Gu.Units.Temperature
static Gu.Units.Temperature.FromCelsius(double celsius) -> Gu.Units.Temperature
static Gu.Units.Temperature.FromFahrenheit(double fahrenheit) -> Gu.Units.Temperature
static Gu.Units.Temperature.FromKelvin(double kelvin) -> Gu.Units.Temperature
static Gu.Units.Temperature.operator !=(Gu.Units.Temperature left, Gu.Units.Temperature right) -> bool
static Gu.Units.Temperature.operator *(double left, Gu.Units.Temperature right) -> Gu.Units.Temperature
static Gu.Units.Temperature.operator *(Gu.Units.Temperature left, double right) -> Gu.Units.Temperature
static Gu.Units.Temperature.operator +(Gu.Units.Temperature left, Gu.Units.Temperature right) -> Gu.Units.Temperature
static Gu.Units.Temperature.operator +(Gu.Units.Temperature temperature) -> Gu.Units.Temperature
static Gu.Units.Temperature.operator -(Gu.Units.Temperature left, Gu.Units.Temperature right) -> Gu.Units.Temperature
static Gu.Units.Temperature.operator -(Gu.Units.Temperature temperature) -> Gu.Units.Temperature
static Gu.Units.Temperature.operator /(Gu.Units.Temperature left, double right) -> Gu.Units.Temperature
static Gu.Units.Temperature.operator /(Gu.Units.Temperature left, Gu.Units.Temperature right) -> double
static Gu.Units.Temperature.operator <(Gu.Units.Temperature left, Gu.Units.Temperature right) -> bool
static Gu.Units.Temperature.operator <=(Gu.Units.Temperature left, Gu.Units.Temperature right) -> bool
static Gu.Units.Temperature.operator ==(Gu.Units.Temperature left, Gu.Units.Temperature right) -> bool
static Gu.Units.Temperature.operator >(Gu.Units.Temperature left, Gu.Units.Temperature right) -> bool
static Gu.Units.Temperature.operator >=(Gu.Units.Temperature left, Gu.Units.Temperature right) -> bool
static Gu.Units.Temperature.Parse(string! text) -> Gu.Units.Temperature
static Gu.Units.Temperature.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Temperature
static Gu.Units.Temperature.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Temperature
static Gu.Units.Temperature.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Temperature
static Gu.Units.Temperature.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Temperature
static Gu.Units.Temperature.TryParse(string! text, out Gu.Units.Temperature result) -> bool
static Gu.Units.Temperature.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Temperature result) -> bool
static Gu.Units.Temperature.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Temperature result) -> bool
static Gu.Units.Temperature.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Temperature result) -> bool
static Gu.Units.TemperatureUnit.operator !=(Gu.Units.TemperatureUnit left, Gu.Units.TemperatureUnit right) -> bool
static Gu.Units.TemperatureUnit.operator *(double left, Gu.Units.TemperatureUnit right) -> Gu.Units.Temperature
static Gu.Units.TemperatureUnit.operator ==(Gu.Units.TemperatureUnit left, Gu.Units.TemperatureUnit right) -> bool
static Gu.Units.TemperatureUnit.Parse(string! text) -> Gu.Units.TemperatureUnit
static Gu.Units.TemperatureUnit.TryParse(string! text, out Gu.Units.TemperatureUnit result) -> bool
static Gu.Units.Time.explicit operator Gu.Units.Time(System.TimeSpan timeSpan) -> Gu.Units.Time
static Gu.Units.Time.explicit operator System.TimeSpan(Gu.Units.Time time) -> System.TimeSpan
static Gu.Units.Time.From(double value, Gu.Units.TimeUnit unit) -> Gu.Units.Time
static Gu.Units.Time.FromDays(double days) -> Gu.Units.Time
static Gu.Units.Time.FromHours(double hours) -> Gu.Units.Time
static Gu.Units.Time.FromMicroseconds(double microseconds) -> Gu.Units.Time
static Gu.Units.Time.FromMilliseconds(double milliseconds) -> Gu.Units.Time
static Gu.Units.Time.FromMinutes(double minutes) -> Gu.Units.Time
static Gu.Units.Time.FromNanoseconds(double nanoseconds) -> Gu.Units.Time
static Gu.Units.Time.FromSeconds(double seconds) -> Gu.Units.Time
static Gu.Units.Time.FromTimeSpan(System.TimeSpan timeSpan) -> Gu.Units.Time
static Gu.Units.Time.operator !=(Gu.Units.Time left, Gu.Units.Time right) -> bool
static Gu.Units.Time.operator *(double left, Gu.Units.Time right) -> Gu.Units.Time
static Gu.Units.Time.operator *(Gu.Units.Time left, double right) -> Gu.Units.Time
static Gu.Units.Time.operator *(Gu.Units.Time left, Gu.Units.Acceleration right) -> Gu.Units.Speed
static Gu.Units.Time.operator *(Gu.Units.Time left, Gu.Units.AngularAcceleration right) -> Gu.Units.AngularSpeed
static Gu.Units.Time.operator *(Gu.Units.Time left, Gu.Units.AngularJerk right) -> Gu.Units.AngularAcceleration
static Gu.Units.Time.operator *(Gu.Units.Time left, Gu.Units.AngularSpeed right) -> Gu.Units.Angle
static Gu.Units.Time.operator *(Gu.Units.Time left, Gu.Units.CatalyticActivity right) -> Gu.Units.AmountOfSubstance
static Gu.Units.Time.operator *(Gu.Units.Time left, Gu.Units.Current right) -> Gu.Units.ElectricCharge
static Gu.Units.Time.operator *(Gu.Units.Time left, Gu.Units.ElectricalConductance right) -> Gu.Units.Capacitance
static Gu.Units.Time.operator *(Gu.Units.Time left, Gu.Units.Force right) -> Gu.Units.Momentum
static Gu.Units.Time.operator *(Gu.Units.Time left, Gu.Units.Jerk right) -> Gu.Units.Acceleration
static Gu.Units.Time.operator *(Gu.Units.Time left, Gu.Units.KinematicViscosity right) -> Gu.Units.Area
static Gu.Units.Time.operator *(Gu.Units.Time left, Gu.Units.MassFlow right) -> Gu.Units.Mass
static Gu.Units.Time.operator *(Gu.Units.Time left, Gu.Units.Power right) -> Gu.Units.Energy
static Gu.Units.Time.operator *(Gu.Units.Time left, Gu.Units.Resistance right) -> Gu.Units.Inductance
static Gu.Units.Time.operator *(Gu.Units.Time left, Gu.Units.SpecificEnergy right) -> Gu.Units.KinematicViscosity
static Gu.Units.Time.operator *(Gu.Units.Time left, Gu.Units.Speed right) -> Gu.Units.Length
static Gu.Units.Time.operator *(Gu.Units.Time left, Gu.Units.Stiffness right) -> Gu.Units.MassFlow
static Gu.Units.Time.operator *(Gu.Units.Time left, Gu.Units.Voltage right) -> Gu.Units.MagneticFlux
static Gu.Units.Time.operator *(Gu.Units.Time left, Gu.Units.VolumetricFlow right) -> Gu.Units.Volume
static Gu.Units.Time.operator +(Gu.Units.Time left, Gu.Units.Time right) -> Gu.Units.Time
static Gu.Units.Time.operator +(Gu.Units.Time time) -> Gu.Units.Time
static Gu.Units.Time.operator -(Gu.Units.Time left, Gu.Units.Time right) -> Gu.Units.Time
static Gu.Units.Time.operator -(Gu.Units.Time time) -> Gu.Units.Time
static Gu.Units.Time.operator /(double left, Gu.Units.Time right) -> Gu.Units.Frequency
static Gu.Units.Time.operator /(Gu.Units.Time left, double right) -> Gu.Units.Time
static Gu.Units.Time.operator /(Gu.Units.Time left, Gu.Units.Capacitance right) -> Gu.Units.Resistance
static Gu.Units.Time.operator /(Gu.Units.Time left, Gu.Units.ElectricalConductance right) -> Gu.Units.Inductance
static Gu.Units.Time.operator /(Gu.Units.Time left, Gu.Units.Flexibility right) -> Gu.Units.MassFlow
static Gu.Units.Time.operator /(Gu.Units.Time left, Gu.Units.Inductance right) -> Gu.Units.ElectricalConductance
static Gu.Units.Time.operator /(Gu.Units.Time left, Gu.Units.MassFlow right) -> Gu.Units.Flexibility
static Gu.Units.Time.operator /(Gu.Units.Time left, Gu.Units.Resistance right) -> Gu.Units.Capacitance
static Gu.Units.Time.operator /(Gu.Units.Time left, Gu.Units.Time right) -> double
static Gu.Units.Time.operator <(Gu.Units.Time left, Gu.Units.Time right) -> bool
static Gu.Units.Time.operator <=(Gu.Units.Time left, Gu.Units.Time right) -> bool
static Gu.Units.Time.operator ==(Gu.Units.Time left, Gu.Units.Time right) -> bool
static Gu.Units.Time.operator >(Gu.Units.Time left, Gu.Units.Time right) -> bool
static Gu.Units.Time.operator >=(Gu.Units.Time left, Gu.Units.Time right) -> bool
static Gu.Units.Time.Parse(string! text) -> Gu.Units.Time
static Gu.Units.Time.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Time
static Gu.Units.Time.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Time
static Gu.Units.Time.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Time
static Gu.Units.Time.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Time
static Gu.Units.Time.TryParse(string! text, out Gu.Units.Time result) -> bool
static Gu.Units.Time.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Time result) -> bool
static Gu.Units.Time.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Time result) -> bool
static Gu.Units.Time.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Time result) -> bool
static Gu.Units.TimeUnit.operator !=(Gu.Units.TimeUnit left, Gu.Units.TimeUnit right) -> bool
static Gu.Units.TimeUnit.operator *(double left, Gu.Units.TimeUnit right) -> Gu.Units.Time
static Gu.Units.TimeUnit.operator ==(Gu.Units.TimeUnit left, Gu.Units.TimeUnit right) -> bool
static Gu.Units.TimeUnit.Parse(string! text) -> Gu.Units.TimeUnit
static Gu.Units.TimeUnit.TryParse(string! text, out Gu.Units.TimeUnit result) -> bool
static Gu.Units.Torque.From(double value, Gu.Units.TorqueUnit unit) -> Gu.Units.Torque
static Gu.Units.Torque.FromNewtonMetres(double newtonMetres) -> Gu.Units.Torque
static Gu.Units.Torque.operator !=(Gu.Units.Torque left, Gu.Units.Torque right) -> bool
static Gu.Units.Torque.operator *(double left, Gu.Units.Torque right) -> Gu.Units.Torque
static Gu.Units.Torque.operator *(Gu.Units.Torque left, double right) -> Gu.Units.Torque
static Gu.Units.Torque.operator *(Gu.Units.Torque left, Gu.Units.Angle right) -> Gu.Units.Energy
static Gu.Units.Torque.operator *(Gu.Units.Torque left, Gu.Units.AngularSpeed right) -> Gu.Units.Power
static Gu.Units.Torque.operator +(Gu.Units.Torque left, Gu.Units.Torque right) -> Gu.Units.Torque
static Gu.Units.Torque.operator +(Gu.Units.Torque torque) -> Gu.Units.Torque
static Gu.Units.Torque.operator -(Gu.Units.Torque left, Gu.Units.Torque right) -> Gu.Units.Torque
static Gu.Units.Torque.operator -(Gu.Units.Torque torque) -> Gu.Units.Torque
static Gu.Units.Torque.operator /(Gu.Units.Torque left, double right) -> Gu.Units.Torque
static Gu.Units.Torque.operator /(Gu.Units.Torque left, Gu.Units.Torque right) -> double
static Gu.Units.Torque.operator <(Gu.Units.Torque left, Gu.Units.Torque right) -> bool
static Gu.Units.Torque.operator <=(Gu.Units.Torque left, Gu.Units.Torque right) -> bool
static Gu.Units.Torque.operator ==(Gu.Units.Torque left, Gu.Units.Torque right) -> bool
static Gu.Units.Torque.operator >(Gu.Units.Torque left, Gu.Units.Torque right) -> bool
static Gu.Units.Torque.operator >=(Gu.Units.Torque left, Gu.Units.Torque right) -> bool
static Gu.Units.Torque.Parse(string! text) -> Gu.Units.Torque
static Gu.Units.Torque.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Torque
static Gu.Units.Torque.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Torque
static Gu.Units.Torque.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Torque
static Gu.Units.Torque.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Torque
static Gu.Units.Torque.TryParse(string! text, out Gu.Units.Torque result) -> bool
static Gu.Units.Torque.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Torque result) -> bool
static Gu.Units.Torque.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Torque result) -> bool
static Gu.Units.Torque.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Torque result) -> bool
static Gu.Units.TorqueUnit.operator !=(Gu.Units.TorqueUnit left, Gu.Units.TorqueUnit right) -> bool
static Gu.Units.TorqueUnit.operator *(double left, Gu.Units.TorqueUnit right) -> Gu.Units.Torque
static Gu.Units.TorqueUnit.operator ==(Gu.Units.TorqueUnit left, Gu.Units.TorqueUnit right) -> bool
static Gu.Units.TorqueUnit.Parse(string! text) -> Gu.Units.TorqueUnit
static Gu.Units.TorqueUnit.TryParse(string! text, out Gu.Units.TorqueUnit result) -> bool
static Gu.Units.Unitless.explicit operator Gu.Units.Unitless(double d) -> Gu.Units.Unitless
static Gu.Units.Unitless.From(double value, Gu.Units.UnitlessUnit unit) -> Gu.Units.Unitless
static Gu.Units.Unitless.FromPartsPerMillion(double partsPerMillion) -> Gu.Units.Unitless
static Gu.Units.Unitless.FromPercents(double percents) -> Gu.Units.Unitless
static Gu.Units.Unitless.FromPromilles(double promilles) -> Gu.Units.Unitless
static Gu.Units.Unitless.FromScalar(double scalar) -> Gu.Units.Unitless
static Gu.Units.Unitless.implicit operator double(Gu.Units.Unitless ul) -> double
static Gu.Units.Unitless.operator !=(Gu.Units.Unitless left, Gu.Units.Unitless right) -> bool
static Gu.Units.Unitless.operator *(double left, Gu.Units.Unitless right) -> Gu.Units.Unitless
static Gu.Units.Unitless.operator *(Gu.Units.Unitless left, double right) -> Gu.Units.Unitless
static Gu.Units.Unitless.operator *(Gu.Units.Unitless left, Gu.Units.AnglePerUnitless right) -> Gu.Units.Angle
static Gu.Units.Unitless.operator *(Gu.Units.Unitless left, Gu.Units.ForcePerUnitless right) -> Gu.Units.Force
static Gu.Units.Unitless.operator *(Gu.Units.Unitless left, Gu.Units.LengthPerUnitless right) -> Gu.Units.Length
static Gu.Units.Unitless.operator +(Gu.Units.Unitless left, Gu.Units.Unitless right) -> Gu.Units.Unitless
static Gu.Units.Unitless.operator +(Gu.Units.Unitless unitless) -> Gu.Units.Unitless
static Gu.Units.Unitless.operator -(Gu.Units.Unitless left, Gu.Units.Unitless right) -> Gu.Units.Unitless
static Gu.Units.Unitless.operator -(Gu.Units.Unitless unitless) -> Gu.Units.Unitless
static Gu.Units.Unitless.operator /(Gu.Units.Unitless left, double right) -> Gu.Units.Unitless
static Gu.Units.Unitless.operator /(Gu.Units.Unitless left, Gu.Units.Unitless right) -> double
static Gu.Units.Unitless.operator <(Gu.Units.Unitless left, Gu.Units.Unitless right) -> bool
static Gu.Units.Unitless.operator <=(Gu.Units.Unitless left, Gu.Units.Unitless right) -> bool
static Gu.Units.Unitless.operator ==(Gu.Units.Unitless left, Gu.Units.Unitless right) -> bool
static Gu.Units.Unitless.operator >(Gu.Units.Unitless left, Gu.Units.Unitless right) -> bool
static Gu.Units.Unitless.operator >=(Gu.Units.Unitless left, Gu.Units.Unitless right) -> bool
static Gu.Units.Unitless.Parse(string! text) -> Gu.Units.Unitless
static Gu.Units.Unitless.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Unitless
static Gu.Units.Unitless.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Unitless
static Gu.Units.Unitless.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Unitless
static Gu.Units.Unitless.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Unitless
static Gu.Units.Unitless.TryParse(string! text, out Gu.Units.Unitless result) -> bool
static Gu.Units.Unitless.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Unitless result) -> bool
static Gu.Units.Unitless.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Unitless result) -> bool
static Gu.Units.Unitless.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Unitless result) -> bool
static Gu.Units.UnitlessUnit.operator !=(Gu.Units.UnitlessUnit left, Gu.Units.UnitlessUnit right) -> bool
static Gu.Units.UnitlessUnit.operator *(double left, Gu.Units.UnitlessUnit right) -> Gu.Units.Unitless
static Gu.Units.UnitlessUnit.operator ==(Gu.Units.UnitlessUnit left, Gu.Units.UnitlessUnit right) -> bool
static Gu.Units.UnitlessUnit.Parse(string! text) -> Gu.Units.UnitlessUnit
static Gu.Units.UnitlessUnit.TryParse(string! text, out Gu.Units.UnitlessUnit result) -> bool
static Gu.Units.Voltage.From(double value, Gu.Units.VoltageUnit unit) -> Gu.Units.Voltage
static Gu.Units.Voltage.FromGigavolts(double gigavolts) -> Gu.Units.Voltage
static Gu.Units.Voltage.FromKilovolts(double kilovolts) -> Gu.Units.Voltage
static Gu.Units.Voltage.FromMegavolts(double megavolts) -> Gu.Units.Voltage
static Gu.Units.Voltage.FromMicrovolts(double microvolts) -> Gu.Units.Voltage
static Gu.Units.Voltage.FromMillivolts(double millivolts) -> Gu.Units.Voltage
static Gu.Units.Voltage.FromNanovolts(double nanovolts) -> Gu.Units.Voltage
static Gu.Units.Voltage.FromVolts(double volts) -> Gu.Units.Voltage
static Gu.Units.Voltage.operator !=(Gu.Units.Voltage left, Gu.Units.Voltage right) -> bool
static Gu.Units.Voltage.operator *(double left, Gu.Units.Voltage right) -> Gu.Units.Voltage
static Gu.Units.Voltage.operator *(Gu.Units.Voltage left, double right) -> Gu.Units.Voltage
static Gu.Units.Voltage.operator *(Gu.Units.Voltage left, Gu.Units.Capacitance right) -> Gu.Units.ElectricCharge
static Gu.Units.Voltage.operator *(Gu.Units.Voltage left, Gu.Units.Current right) -> Gu.Units.Power
static Gu.Units.Voltage.operator *(Gu.Units.Voltage left, Gu.Units.ElectricalConductance right) -> Gu.Units.Current
static Gu.Units.Voltage.operator *(Gu.Units.Voltage left, Gu.Units.ElectricCharge right) -> Gu.Units.Energy
static Gu.Units.Voltage.operator *(Gu.Units.Voltage left, Gu.Units.Time right) -> Gu.Units.MagneticFlux
static Gu.Units.Voltage.operator +(Gu.Units.Voltage left, Gu.Units.Voltage right) -> Gu.Units.Voltage
static Gu.Units.Voltage.operator +(Gu.Units.Voltage voltage) -> Gu.Units.Voltage
static Gu.Units.Voltage.operator -(Gu.Units.Voltage left, Gu.Units.Voltage right) -> Gu.Units.Voltage
static Gu.Units.Voltage.operator -(Gu.Units.Voltage voltage) -> Gu.Units.Voltage
static Gu.Units.Voltage.operator /(Gu.Units.Voltage left, double right) -> Gu.Units.Voltage
static Gu.Units.Voltage.operator /(Gu.Units.Voltage left, Gu.Units.Current right) -> Gu.Units.Resistance
static Gu.Units.Voltage.operator /(Gu.Units.Voltage left, Gu.Units.Frequency right) -> Gu.Units.MagneticFlux
static Gu.Units.Voltage.operator /(Gu.Units.Voltage left, Gu.Units.KinematicViscosity right) -> Gu.Units.MagneticFieldStrength
static Gu.Units.Voltage.operator /(Gu.Units.Voltage left, Gu.Units.MagneticFieldStrength right) -> Gu.Units.KinematicViscosity
static Gu.Units.Voltage.operator /(Gu.Units.Voltage left, Gu.Units.MagneticFlux right) -> Gu.Units.Frequency
static Gu.Units.Voltage.operator /(Gu.Units.Voltage left, Gu.Units.Resistance right) -> Gu.Units.Current
static Gu.Units.Voltage.operator /(Gu.Units.Voltage left, Gu.Units.Voltage right) -> double
static Gu.Units.Voltage.operator <(Gu.Units.Voltage left, Gu.Units.Voltage right) -> bool
static Gu.Units.Voltage.operator <=(Gu.Units.Voltage left, Gu.Units.Voltage right) -> bool
static Gu.Units.Voltage.operator ==(Gu.Units.Voltage left, Gu.Units.Voltage right) -> bool
static Gu.Units.Voltage.operator >(Gu.Units.Voltage left, Gu.Units.Voltage right) -> bool
static Gu.Units.Voltage.operator >=(Gu.Units.Voltage left, Gu.Units.Voltage right) -> bool
static Gu.Units.Voltage.Parse(string! text) -> Gu.Units.Voltage
static Gu.Units.Voltage.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Voltage
static Gu.Units.Voltage.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Voltage
static Gu.Units.Voltage.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Voltage
static Gu.Units.Voltage.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Voltage
static Gu.Units.Voltage.TryParse(string! text, out Gu.Units.Voltage result) -> bool
static Gu.Units.Voltage.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Voltage result) -> bool
static Gu.Units.Voltage.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Voltage result) -> bool
static Gu.Units.Voltage.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Voltage result) -> bool
static Gu.Units.VoltageUnit.operator !=(Gu.Units.VoltageUnit left, Gu.Units.VoltageUnit right) -> bool
static Gu.Units.VoltageUnit.operator *(double left, Gu.Units.VoltageUnit right) -> Gu.Units.Voltage
static Gu.Units.VoltageUnit.operator ==(Gu.Units.VoltageUnit left, Gu.Units.VoltageUnit right) -> bool
static Gu.Units.VoltageUnit.Parse(string! text) -> Gu.Units.VoltageUnit
static Gu.Units.VoltageUnit.TryParse(string! text, out Gu.Units.VoltageUnit result) -> bool
static Gu.Units.Volume.From(double value, Gu.Units.VolumeUnit unit) -> Gu.Units.Volume
static Gu.Units.Volume.FromCentilitres(double centilitres) -> Gu.Units.Volume
static Gu.Units.Volume.FromCubicCentimetres(double cubicCentimetres) -> Gu.Units.Volume
static Gu.Units.Volume.FromCubicDecimetres(double cubicDecimetres) -> Gu.Units.Volume
static Gu.Units.Volume.FromCubicFeet(double cubicFeet) -> Gu.Units.Volume
static Gu.Units.Volume.FromCubicInches(double cubicInches) -> Gu.Units.Volume
static Gu.Units.Volume.FromCubicMetres(double cubicMetres) -> Gu.Units.Volume
static Gu.Units.Volume.FromCubicMillimetres(double cubicMillimetres) -> Gu.Units.Volume
static Gu.Units.Volume.FromDecilitres(double decilitres) -> Gu.Units.Volume
static Gu.Units.Volume.FromLitres(double litres) -> Gu.Units.Volume
static Gu.Units.Volume.FromMillilitres(double millilitres) -> Gu.Units.Volume
static Gu.Units.Volume.operator !=(Gu.Units.Volume left, Gu.Units.Volume right) -> bool
static Gu.Units.Volume.operator *(double left, Gu.Units.Volume right) -> Gu.Units.Volume
static Gu.Units.Volume.operator *(Gu.Units.Volume left, double right) -> Gu.Units.Volume
static Gu.Units.Volume.operator *(Gu.Units.Volume left, Gu.Units.Density right) -> Gu.Units.Mass
static Gu.Units.Volume.operator *(Gu.Units.Volume left, Gu.Units.Frequency right) -> Gu.Units.VolumetricFlow
static Gu.Units.Volume.operator *(Gu.Units.Volume left, Gu.Units.Pressure right) -> Gu.Units.Energy
static Gu.Units.Volume.operator *(Gu.Units.Volume left, Gu.Units.Wavenumber right) -> Gu.Units.Area
static Gu.Units.Volume.operator +(Gu.Units.Volume left, Gu.Units.Volume right) -> Gu.Units.Volume
static Gu.Units.Volume.operator +(Gu.Units.Volume volume) -> Gu.Units.Volume
static Gu.Units.Volume.operator -(Gu.Units.Volume left, Gu.Units.Volume right) -> Gu.Units.Volume
static Gu.Units.Volume.operator -(Gu.Units.Volume volume) -> Gu.Units.Volume
static Gu.Units.Volume.operator /(Gu.Units.Volume left, double right) -> Gu.Units.Volume
static Gu.Units.Volume.operator /(Gu.Units.Volume left, Gu.Units.Area right) -> Gu.Units.Length
static Gu.Units.Volume.operator /(Gu.Units.Volume left, Gu.Units.Length right) -> Gu.Units.Area
static Gu.Units.Volume.operator /(Gu.Units.Volume left, Gu.Units.Mass right) -> Gu.Units.SpecificVolume
static Gu.Units.Volume.operator /(Gu.Units.Volume left, Gu.Units.SpecificVolume right) -> Gu.Units.Mass
static Gu.Units.Volume.operator /(Gu.Units.Volume left, Gu.Units.Time right) -> Gu.Units.VolumetricFlow
static Gu.Units.Volume.operator /(Gu.Units.Volume left, Gu.Units.Volume right) -> double
static Gu.Units.Volume.operator /(Gu.Units.Volume left, Gu.Units.VolumetricFlow right) -> Gu.Units.Time
static Gu.Units.Volume.operator <(Gu.Units.Volume left, Gu.Units.Volume right) -> bool
static Gu.Units.Volume.operator <=(Gu.Units.Volume left, Gu.Units.Volume right) -> bool
static Gu.Units.Volume.operator ==(Gu.Units.Volume left, Gu.Units.Volume right) -> bool
static Gu.Units.Volume.operator >(Gu.Units.Volume left, Gu.Units.Volume right) -> bool
static Gu.Units.Volume.operator >=(Gu.Units.Volume left, Gu.Units.Volume right) -> bool
static Gu.Units.Volume.Parse(string! text) -> Gu.Units.Volume
static Gu.Units.Volume.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Volume
static Gu.Units.Volume.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Volume
static Gu.Units.Volume.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Volume
static Gu.Units.Volume.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Volume
static Gu.Units.Volume.TryParse(string! text, out Gu.Units.Volume result) -> bool
static Gu.Units.Volume.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Volume result) -> bool
static Gu.Units.Volume.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Volume result) -> bool
static Gu.Units.Volume.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Volume result) -> bool
static Gu.Units.VolumetricFlow.From(double value, Gu.Units.VolumetricFlowUnit unit) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.FromCentilitresPerHour(double centilitresPerHour) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.FromCentilitresPerMinute(double centilitresPerMinute) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.FromCentilitresPerSecond(double centilitresPerSecond) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.FromCubicFeetPerDay(double cubicFeetPerDay) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.FromCubicFeetPerHour(double cubicFeetPerHour) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.FromCubicFeetPerMinute(double cubicFeetPerMinute) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.FromCubicFeetPerSecond(double cubicFeetPerSecond) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.FromCubicMetresPerHour(double cubicMetresPerHour) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.FromCubicMetresPerMinute(double cubicMetresPerMinute) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.FromCubicMetresPerSecond(double cubicMetresPerSecond) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.FromLitresPerHour(double litresPerHour) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.FromLitresPerMinute(double litresPerMinute) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.FromLitresPerSecond(double litresPerSecond) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.FromMillilitresPerHour(double millilitresPerHour) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.FromMillilitresPerMinute(double millilitresPerMinute) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.FromMillilitresPerSecond(double millilitresPerSecond) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.operator !=(Gu.Units.VolumetricFlow left, Gu.Units.VolumetricFlow right) -> bool
static Gu.Units.VolumetricFlow.operator *(double left, Gu.Units.VolumetricFlow right) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.operator *(Gu.Units.VolumetricFlow left, double right) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.operator *(Gu.Units.VolumetricFlow left, Gu.Units.AreaDensity right) -> Gu.Units.Momentum
static Gu.Units.VolumetricFlow.operator *(Gu.Units.VolumetricFlow left, Gu.Units.Density right) -> Gu.Units.MassFlow
static Gu.Units.VolumetricFlow.operator *(Gu.Units.VolumetricFlow left, Gu.Units.Pressure right) -> Gu.Units.Power
static Gu.Units.VolumetricFlow.operator *(Gu.Units.VolumetricFlow left, Gu.Units.Time right) -> Gu.Units.Volume
static Gu.Units.VolumetricFlow.operator *(Gu.Units.VolumetricFlow left, Gu.Units.Wavenumber right) -> Gu.Units.KinematicViscosity
static Gu.Units.VolumetricFlow.operator +(Gu.Units.VolumetricFlow left, Gu.Units.VolumetricFlow right) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.operator +(Gu.Units.VolumetricFlow volumetricFlow) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.operator -(Gu.Units.VolumetricFlow left, Gu.Units.VolumetricFlow right) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.operator -(Gu.Units.VolumetricFlow volumetricFlow) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.operator /(Gu.Units.VolumetricFlow left, double right) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.operator /(Gu.Units.VolumetricFlow left, Gu.Units.Area right) -> Gu.Units.Speed
static Gu.Units.VolumetricFlow.operator /(Gu.Units.VolumetricFlow left, Gu.Units.Frequency right) -> Gu.Units.Volume
static Gu.Units.VolumetricFlow.operator /(Gu.Units.VolumetricFlow left, Gu.Units.KinematicViscosity right) -> Gu.Units.Length
static Gu.Units.VolumetricFlow.operator /(Gu.Units.VolumetricFlow left, Gu.Units.Length right) -> Gu.Units.KinematicViscosity
static Gu.Units.VolumetricFlow.operator /(Gu.Units.VolumetricFlow left, Gu.Units.MassFlow right) -> Gu.Units.SpecificVolume
static Gu.Units.VolumetricFlow.operator /(Gu.Units.VolumetricFlow left, Gu.Units.SpecificVolume right) -> Gu.Units.MassFlow
static Gu.Units.VolumetricFlow.operator /(Gu.Units.VolumetricFlow left, Gu.Units.Speed right) -> Gu.Units.Area
static Gu.Units.VolumetricFlow.operator /(Gu.Units.VolumetricFlow left, Gu.Units.Volume right) -> Gu.Units.Frequency
static Gu.Units.VolumetricFlow.operator /(Gu.Units.VolumetricFlow left, Gu.Units.VolumetricFlow right) -> double
static Gu.Units.VolumetricFlow.operator <(Gu.Units.VolumetricFlow left, Gu.Units.VolumetricFlow right) -> bool
static Gu.Units.VolumetricFlow.operator <=(Gu.Units.VolumetricFlow left, Gu.Units.VolumetricFlow right) -> bool
static Gu.Units.VolumetricFlow.operator ==(Gu.Units.VolumetricFlow left, Gu.Units.VolumetricFlow right) -> bool
static Gu.Units.VolumetricFlow.operator >(Gu.Units.VolumetricFlow left, Gu.Units.VolumetricFlow right) -> bool
static Gu.Units.VolumetricFlow.operator >=(Gu.Units.VolumetricFlow left, Gu.Units.VolumetricFlow right) -> bool
static Gu.Units.VolumetricFlow.Parse(string! text) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlow.TryParse(string! text, out Gu.Units.VolumetricFlow result) -> bool
static Gu.Units.VolumetricFlow.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.VolumetricFlow result) -> bool
static Gu.Units.VolumetricFlow.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.VolumetricFlow result) -> bool
static Gu.Units.VolumetricFlow.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.VolumetricFlow result) -> bool
static Gu.Units.VolumetricFlowUnit.operator !=(Gu.Units.VolumetricFlowUnit left, Gu.Units.VolumetricFlowUnit right) -> bool
static Gu.Units.VolumetricFlowUnit.operator *(double left, Gu.Units.VolumetricFlowUnit right) -> Gu.Units.VolumetricFlow
static Gu.Units.VolumetricFlowUnit.operator ==(Gu.Units.VolumetricFlowUnit left, Gu.Units.VolumetricFlowUnit right) -> bool
static Gu.Units.VolumetricFlowUnit.Parse(string! text) -> Gu.Units.VolumetricFlowUnit
static Gu.Units.VolumetricFlowUnit.TryParse(string! text, out Gu.Units.VolumetricFlowUnit result) -> bool
static Gu.Units.VolumeUnit.operator !=(Gu.Units.VolumeUnit left, Gu.Units.VolumeUnit right) -> bool
static Gu.Units.VolumeUnit.operator *(double left, Gu.Units.VolumeUnit right) -> Gu.Units.Volume
static Gu.Units.VolumeUnit.operator ==(Gu.Units.VolumeUnit left, Gu.Units.VolumeUnit right) -> bool
static Gu.Units.VolumeUnit.Parse(string! text) -> Gu.Units.VolumeUnit
static Gu.Units.VolumeUnit.TryParse(string! text, out Gu.Units.VolumeUnit result) -> bool
static Gu.Units.Wavenumber.From(double value, Gu.Units.WavenumberUnit unit) -> Gu.Units.Wavenumber
static Gu.Units.Wavenumber.FromReciprocalMetres(double reciprocalMetres) -> Gu.Units.Wavenumber
static Gu.Units.Wavenumber.operator !=(Gu.Units.Wavenumber left, Gu.Units.Wavenumber right) -> bool
static Gu.Units.Wavenumber.operator *(double left, Gu.Units.Wavenumber right) -> Gu.Units.Wavenumber
static Gu.Units.Wavenumber.operator *(Gu.Units.Wavenumber left, double right) -> Gu.Units.Wavenumber
static Gu.Units.Wavenumber.operator *(Gu.Units.Wavenumber left, Gu.Units.Area right) -> Gu.Units.Length
static Gu.Units.Wavenumber.operator *(Gu.Units.Wavenumber left, Gu.Units.AreaDensity right) -> Gu.Units.Density
static Gu.Units.Wavenumber.operator *(Gu.Units.Wavenumber left, Gu.Units.ElectricalConductance right) -> Gu.Units.Conductivity
static Gu.Units.Wavenumber.operator *(Gu.Units.Wavenumber left, Gu.Units.Energy right) -> Gu.Units.Force
static Gu.Units.Wavenumber.operator *(Gu.Units.Wavenumber left, Gu.Units.Force right) -> Gu.Units.Stiffness
static Gu.Units.Wavenumber.operator *(Gu.Units.Wavenumber left, Gu.Units.KinematicViscosity right) -> Gu.Units.Speed
static Gu.Units.Wavenumber.operator *(Gu.Units.Wavenumber left, Gu.Units.Momentum right) -> Gu.Units.MassFlow
static Gu.Units.Wavenumber.operator *(Gu.Units.Wavenumber left, Gu.Units.SpecificEnergy right) -> Gu.Units.Acceleration
static Gu.Units.Wavenumber.operator *(Gu.Units.Wavenumber left, Gu.Units.Speed right) -> Gu.Units.Frequency
static Gu.Units.Wavenumber.operator *(Gu.Units.Wavenumber left, Gu.Units.Stiffness right) -> Gu.Units.Pressure
static Gu.Units.Wavenumber.operator *(Gu.Units.Wavenumber left, Gu.Units.Volume right) -> Gu.Units.Area
static Gu.Units.Wavenumber.operator *(Gu.Units.Wavenumber left, Gu.Units.VolumetricFlow right) -> Gu.Units.KinematicViscosity
static Gu.Units.Wavenumber.operator +(Gu.Units.Wavenumber left, Gu.Units.Wavenumber right) -> Gu.Units.Wavenumber
static Gu.Units.Wavenumber.operator +(Gu.Units.Wavenumber wavenumber) -> Gu.Units.Wavenumber
static Gu.Units.Wavenumber.operator -(Gu.Units.Wavenumber left, Gu.Units.Wavenumber right) -> Gu.Units.Wavenumber
static Gu.Units.Wavenumber.operator -(Gu.Units.Wavenumber wavenumber) -> Gu.Units.Wavenumber
static Gu.Units.Wavenumber.operator /(double left, Gu.Units.Wavenumber right) -> Gu.Units.Length
static Gu.Units.Wavenumber.operator /(Gu.Units.Wavenumber left, double right) -> Gu.Units.Wavenumber
static Gu.Units.Wavenumber.operator /(Gu.Units.Wavenumber left, Gu.Units.Conductivity right) -> Gu.Units.Resistance
static Gu.Units.Wavenumber.operator /(Gu.Units.Wavenumber left, Gu.Units.Flexibility right) -> Gu.Units.Pressure
static Gu.Units.Wavenumber.operator /(Gu.Units.Wavenumber left, Gu.Units.Pressure right) -> Gu.Units.Flexibility
static Gu.Units.Wavenumber.operator /(Gu.Units.Wavenumber left, Gu.Units.Resistance right) -> Gu.Units.Conductivity
static Gu.Units.Wavenumber.operator /(Gu.Units.Wavenumber left, Gu.Units.Wavenumber right) -> double
static Gu.Units.Wavenumber.operator <(Gu.Units.Wavenumber left, Gu.Units.Wavenumber right) -> bool
static Gu.Units.Wavenumber.operator <=(Gu.Units.Wavenumber left, Gu.Units.Wavenumber right) -> bool
static Gu.Units.Wavenumber.operator ==(Gu.Units.Wavenumber left, Gu.Units.Wavenumber right) -> bool
static Gu.Units.Wavenumber.operator >(Gu.Units.Wavenumber left, Gu.Units.Wavenumber right) -> bool
static Gu.Units.Wavenumber.operator >=(Gu.Units.Wavenumber left, Gu.Units.Wavenumber right) -> bool
static Gu.Units.Wavenumber.Parse(string! text) -> Gu.Units.Wavenumber
static Gu.Units.Wavenumber.Parse(string! text, System.Globalization.NumberStyles styles) -> Gu.Units.Wavenumber
static Gu.Units.Wavenumber.Parse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider) -> Gu.Units.Wavenumber
static Gu.Units.Wavenumber.Parse(string! text, System.IFormatProvider! provider) -> Gu.Units.Wavenumber
static Gu.Units.Wavenumber.ReadFrom(System.Xml.XmlReader! reader) -> Gu.Units.Wavenumber
static Gu.Units.Wavenumber.TryParse(string! text, out Gu.Units.Wavenumber result) -> bool
static Gu.Units.Wavenumber.TryParse(string! text, System.Globalization.NumberStyles styles, out Gu.Units.Wavenumber result) -> bool
static Gu.Units.Wavenumber.TryParse(string! text, System.Globalization.NumberStyles styles, System.IFormatProvider! provider, out Gu.Units.Wavenumber result) -> bool
static Gu.Units.Wavenumber.TryParse(string! text, System.IFormatProvider! provider, out Gu.Units.Wavenumber result) -> bool
static Gu.Units.WavenumberUnit.operator !=(Gu.Units.WavenumberUnit left, Gu.Units.WavenumberUnit right) -> bool
static Gu.Units.WavenumberUnit.operator *(double left, Gu.Units.WavenumberUnit right) -> Gu.Units.Wavenumber
static Gu.Units.WavenumberUnit.operator ==(Gu.Units.WavenumberUnit left, Gu.Units.WavenumberUnit right) -> bool
static Gu.Units.WavenumberUnit.Parse(string! text) -> Gu.Units.WavenumberUnit
static Gu.Units.WavenumberUnit.TryParse(string! text, out Gu.Units.WavenumberUnit result) -> bool
static readonly Gu.Units.Acceleration.Zero -> Gu.Units.Acceleration
static readonly Gu.Units.AccelerationUnit.CentimetresPerHourSquared -> Gu.Units.AccelerationUnit
static readonly Gu.Units.AccelerationUnit.CentimetresPerSecondSquared -> Gu.Units.AccelerationUnit
static readonly Gu.Units.AccelerationUnit.MetresPerHourSquared -> Gu.Units.AccelerationUnit
static readonly Gu.Units.AccelerationUnit.MetresPerMinuteSquared -> Gu.Units.AccelerationUnit
static readonly Gu.Units.AccelerationUnit.MetresPerSecondSquared -> Gu.Units.AccelerationUnit
static readonly Gu.Units.AccelerationUnit.MillimetresPerHourSquared -> Gu.Units.AccelerationUnit
static readonly Gu.Units.AccelerationUnit.MillimetresPerMinuteSquared -> Gu.Units.AccelerationUnit
static readonly Gu.Units.AccelerationUnit.MillimetresPerSecondSquared -> Gu.Units.AccelerationUnit
static readonly Gu.Units.AmountOfSubstance.Zero -> Gu.Units.AmountOfSubstance
static readonly Gu.Units.AmountOfSubstanceUnit.Moles -> Gu.Units.AmountOfSubstanceUnit
static readonly Gu.Units.Angle.Zero -> Gu.Units.Angle
static readonly Gu.Units.AnglePerUnitless.Zero -> Gu.Units.AnglePerUnitless
static readonly Gu.Units.AnglePerUnitlessUnit.DegreesPerPercent -> Gu.Units.AnglePerUnitlessUnit
static readonly Gu.Units.AnglePerUnitlessUnit.RadiansPerPercent -> Gu.Units.AnglePerUnitlessUnit
static readonly Gu.Units.AnglePerUnitlessUnit.RadiansPerUnitless -> Gu.Units.AnglePerUnitlessUnit
static readonly Gu.Units.AngleUnit.Degrees -> Gu.Units.AngleUnit
static readonly Gu.Units.AngleUnit.Radians -> Gu.Units.AngleUnit
static readonly Gu.Units.AngularAcceleration.Zero -> Gu.Units.AngularAcceleration
static readonly Gu.Units.AngularAccelerationUnit.DegreesPerHourSquared -> Gu.Units.AngularAccelerationUnit
static readonly Gu.Units.AngularAccelerationUnit.DegreesPerMinuteSquared -> Gu.Units.AngularAccelerationUnit
static readonly Gu.Units.AngularAccelerationUnit.DegreesPerSecondSquared -> Gu.Units.AngularAccelerationUnit
static readonly Gu.Units.AngularAccelerationUnit.RadiansPerHourSquared -> Gu.Units.AngularAccelerationUnit
static readonly Gu.Units.AngularAccelerationUnit.RadiansPerMinuteSquared -> Gu.Units.AngularAccelerationUnit
static readonly Gu.Units.AngularAccelerationUnit.RadiansPerSecondSquared -> Gu.Units.AngularAccelerationUnit
static readonly Gu.Units.AngularJerk.Zero -> Gu.Units.AngularJerk
static readonly Gu.Units.AngularJerkUnit.DegreesPerHourCubed -> Gu.Units.AngularJerkUnit
static readonly Gu.Units.AngularJerkUnit.DegreesPerMinuteCubed -> Gu.Units.AngularJerkUnit
static readonly Gu.Units.AngularJerkUnit.DegreesPerSecondCubed -> Gu.Units.AngularJerkUnit
static readonly Gu.Units.AngularJerkUnit.RadiansPerHourCubed -> Gu.Units.AngularJerkUnit
static readonly Gu.Units.AngularJerkUnit.RadiansPerMinuteCubed -> Gu.Units.AngularJerkUnit
static readonly Gu.Units.AngularJerkUnit.RadiansPerSecondCubed -> Gu.Units.AngularJerkUnit
static readonly Gu.Units.AngularSpeed.Zero -> Gu.Units.AngularSpeed
static readonly Gu.Units.AngularSpeedUnit.DegreesPerHour -> Gu.Units.AngularSpeedUnit
static readonly Gu.Units.AngularSpeedUnit.DegreesPerMinute -> Gu.Units.AngularSpeedUnit
static readonly Gu.Units.AngularSpeedUnit.DegreesPerSecond -> Gu.Units.AngularSpeedUnit
static readonly Gu.Units.AngularSpeedUnit.RadiansPerHour -> Gu.Units.AngularSpeedUnit
static readonly Gu.Units.AngularSpeedUnit.RadiansPerMinute -> Gu.Units.AngularSpeedUnit
static readonly Gu.Units.AngularSpeedUnit.RadiansPerSecond -> Gu.Units.AngularSpeedUnit
static readonly Gu.Units.AngularSpeedUnit.RevolutionsPerMinute -> Gu.Units.AngularSpeedUnit
static readonly Gu.Units.Area.Zero -> Gu.Units.Area
static readonly Gu.Units.AreaDensity.Zero -> Gu.Units.AreaDensity
static readonly Gu.Units.AreaDensityUnit.KilogramsPerSquareMetre -> Gu.Units.AreaDensityUnit
static readonly Gu.Units.AreaUnit.Hectares -> Gu.Units.AreaUnit
static readonly Gu.Units.AreaUnit.SquareCentimetres -> Gu.Units.AreaUnit
static readonly Gu.Units.AreaUnit.SquareDecimetres -> Gu.Units.AreaUnit
static readonly Gu.Units.AreaUnit.SquareFeet -> Gu.Units.AreaUnit
static readonly Gu.Units.AreaUnit.SquareInches -> Gu.Units.AreaUnit
static readonly Gu.Units.AreaUnit.SquareKilometres -> Gu.Units.AreaUnit
static readonly Gu.Units.AreaUnit.SquareMetres -> Gu.Units.AreaUnit
static readonly Gu.Units.AreaUnit.SquareMile -> Gu.Units.AreaUnit
static readonly Gu.Units.AreaUnit.SquareMillimetres -> Gu.Units.AreaUnit
static readonly Gu.Units.AreaUnit.SquareYards -> Gu.Units.AreaUnit
static readonly Gu.Units.Capacitance.Zero -> Gu.Units.Capacitance
static readonly Gu.Units.CapacitanceUnit.Farads -> Gu.Units.CapacitanceUnit
static readonly Gu.Units.CapacitanceUnit.Gigafarads -> Gu.Units.CapacitanceUnit
static readonly Gu.Units.CapacitanceUnit.Kilofarads -> Gu.Units.CapacitanceUnit
static readonly Gu.Units.CapacitanceUnit.Megafarads -> Gu.Units.CapacitanceUnit
static readonly Gu.Units.CapacitanceUnit.Microfarads -> Gu.Units.CapacitanceUnit
static readonly Gu.Units.CapacitanceUnit.Millifarads -> Gu.Units.CapacitanceUnit
static readonly Gu.Units.CapacitanceUnit.Nanofarads -> Gu.Units.CapacitanceUnit
static readonly Gu.Units.CatalyticActivity.Zero -> Gu.Units.CatalyticActivity
static readonly Gu.Units.CatalyticActivityUnit.Katals -> Gu.Units.CatalyticActivityUnit
static readonly Gu.Units.Conductivity.Zero -> Gu.Units.Conductivity
static readonly Gu.Units.ConductivityUnit.MicrosiemensPerCentimetre -> Gu.Units.ConductivityUnit
static readonly Gu.Units.ConductivityUnit.MicrosiemensPerMetre -> Gu.Units.ConductivityUnit
static readonly Gu.Units.ConductivityUnit.MicrosiemensPerMillimetre -> Gu.Units.ConductivityUnit
static readonly Gu.Units.ConductivityUnit.MillisiemensPerCentimetre -> Gu.Units.ConductivityUnit
static readonly Gu.Units.ConductivityUnit.MillisiemensPerMetre -> Gu.Units.ConductivityUnit
static readonly Gu.Units.ConductivityUnit.MillisiemensPerMillimetre -> Gu.Units.ConductivityUnit
static readonly Gu.Units.ConductivityUnit.NanosiemensPerCentimetre -> Gu.Units.ConductivityUnit
static readonly Gu.Units.ConductivityUnit.NanosiemensPerMetre -> Gu.Units.ConductivityUnit
static readonly Gu.Units.ConductivityUnit.NanosiemensPerMicrometre -> Gu.Units.ConductivityUnit
static readonly Gu.Units.ConductivityUnit.NanosiemensPerMillimetre -> Gu.Units.ConductivityUnit
static readonly Gu.Units.ConductivityUnit.SiemensPerCentimetre -> Gu.Units.ConductivityUnit
static readonly Gu.Units.ConductivityUnit.SiemensPerMetre -> Gu.Units.ConductivityUnit
static readonly Gu.Units.ConductivityUnit.SiemensPerMillimetre -> Gu.Units.ConductivityUnit
static readonly Gu.Units.Current.Zero -> Gu.Units.Current
static readonly Gu.Units.CurrentUnit.Amperes -> Gu.Units.CurrentUnit
static readonly Gu.Units.CurrentUnit.Gigaamperes -> Gu.Units.CurrentUnit
static readonly Gu.Units.CurrentUnit.Kiloamperes -> Gu.Units.CurrentUnit
static readonly Gu.Units.CurrentUnit.Megaamperes -> Gu.Units.CurrentUnit
static readonly Gu.Units.CurrentUnit.Microamperes -> Gu.Units.CurrentUnit
static readonly Gu.Units.CurrentUnit.Milliamperes -> Gu.Units.CurrentUnit
static readonly Gu.Units.CurrentUnit.Nanoamperes -> Gu.Units.CurrentUnit
static readonly Gu.Units.Data.Zero -> Gu.Units.Data
static readonly Gu.Units.DataUnit.Bits -> Gu.Units.DataUnit
static readonly Gu.Units.DataUnit.Byte -> Gu.Units.DataUnit
static readonly Gu.Units.DataUnit.Gigabits -> Gu.Units.DataUnit
static readonly Gu.Units.DataUnit.Gigabyte -> Gu.Units.DataUnit
static readonly Gu.Units.DataUnit.Kilobits -> Gu.Units.DataUnit
static readonly Gu.Units.DataUnit.Kilobyte -> Gu.Units.DataUnit
static readonly Gu.Units.DataUnit.Megabits -> Gu.Units.DataUnit
static readonly Gu.Units.DataUnit.Megabyte -> Gu.Units.DataUnit
static readonly Gu.Units.DataUnit.Terabyte -> Gu.Units.DataUnit
static readonly Gu.Units.Density.Zero -> Gu.Units.Density
static readonly Gu.Units.DensityUnit.GramsPerCubicCentimetre -> Gu.Units.DensityUnit
static readonly Gu.Units.DensityUnit.GramsPerCubicMetre -> Gu.Units.DensityUnit
static readonly Gu.Units.DensityUnit.GramsPerCubicMillimetre -> Gu.Units.DensityUnit
static readonly Gu.Units.DensityUnit.KilogramsPerCubicMetre -> Gu.Units.DensityUnit
static readonly Gu.Units.DensityUnit.MilligramsPerCubicMetre -> Gu.Units.DensityUnit
static readonly Gu.Units.DensityUnit.MilligramsPerCubicMillimetre -> Gu.Units.DensityUnit
static readonly Gu.Units.ElectricalConductance.Zero -> Gu.Units.ElectricalConductance
static readonly Gu.Units.ElectricalConductanceUnit.Microsiemens -> Gu.Units.ElectricalConductanceUnit
static readonly Gu.Units.ElectricalConductanceUnit.Millisiemens -> Gu.Units.ElectricalConductanceUnit
static readonly Gu.Units.ElectricalConductanceUnit.Nanosiemens -> Gu.Units.ElectricalConductanceUnit
static readonly Gu.Units.ElectricalConductanceUnit.Siemens -> Gu.Units.ElectricalConductanceUnit
static readonly Gu.Units.ElectricCharge.Zero -> Gu.Units.ElectricCharge
static readonly Gu.Units.ElectricChargeUnit.Coulombs -> Gu.Units.ElectricChargeUnit
static readonly Gu.Units.ElectricChargeUnit.Gigacoulombs -> Gu.Units.ElectricChargeUnit
static readonly Gu.Units.ElectricChargeUnit.Kilocoulombs -> Gu.Units.ElectricChargeUnit
static readonly Gu.Units.ElectricChargeUnit.Megacoulombs -> Gu.Units.ElectricChargeUnit
static readonly Gu.Units.ElectricChargeUnit.Microcoulombs -> Gu.Units.ElectricChargeUnit
static readonly Gu.Units.ElectricChargeUnit.Millicoulombs -> Gu.Units.ElectricChargeUnit
static readonly Gu.Units.ElectricChargeUnit.Nanocoulombs -> Gu.Units.ElectricChargeUnit
static readonly Gu.Units.Energy.Zero -> Gu.Units.Energy
static readonly Gu.Units.EnergyUnit.Gigajoules -> Gu.Units.EnergyUnit
static readonly Gu.Units.EnergyUnit.Joules -> Gu.Units.EnergyUnit
static readonly Gu.Units.EnergyUnit.Kilojoules -> Gu.Units.EnergyUnit
static readonly Gu.Units.EnergyUnit.KilowattHours -> Gu.Units.EnergyUnit
static readonly Gu.Units.EnergyUnit.Megajoules -> Gu.Units.EnergyUnit
static readonly Gu.Units.EnergyUnit.Microjoules -> Gu.Units.EnergyUnit
static readonly Gu.Units.EnergyUnit.Millijoules -> Gu.Units.EnergyUnit
static readonly Gu.Units.EnergyUnit.Nanojoules -> Gu.Units.EnergyUnit
static readonly Gu.Units.Flexibility.Zero -> Gu.Units.Flexibility
static readonly Gu.Units.FlexibilityUnit.MetresPerNewton -> Gu.Units.FlexibilityUnit
static readonly Gu.Units.FlexibilityUnit.MicrometresPerKilonewton -> Gu.Units.FlexibilityUnit
static readonly Gu.Units.FlexibilityUnit.MillimetresPerKilonewton -> Gu.Units.FlexibilityUnit
static readonly Gu.Units.FlexibilityUnit.MillimetresPerNewton -> Gu.Units.FlexibilityUnit
static readonly Gu.Units.Force.Zero -> Gu.Units.Force
static readonly Gu.Units.ForcePerUnitless.Zero -> Gu.Units.ForcePerUnitless
static readonly Gu.Units.ForcePerUnitlessUnit.GiganewtonsPerPercent -> Gu.Units.ForcePerUnitlessUnit
static readonly Gu.Units.ForcePerUnitlessUnit.KilonewtonsPerPercent -> Gu.Units.ForcePerUnitlessUnit
static readonly Gu.Units.ForcePerUnitlessUnit.MeganewtonsPerPercent -> Gu.Units.ForcePerUnitlessUnit
static readonly Gu.Units.ForcePerUnitlessUnit.NewtonsPerPercent -> Gu.Units.ForcePerUnitlessUnit
static readonly Gu.Units.ForcePerUnitlessUnit.NewtonsPerUnitless -> Gu.Units.ForcePerUnitlessUnit
static readonly Gu.Units.ForceUnit.Giganewtons -> Gu.Units.ForceUnit
static readonly Gu.Units.ForceUnit.Kilonewtons -> Gu.Units.ForceUnit
static readonly Gu.Units.ForceUnit.Meganewtons -> Gu.Units.ForceUnit
static readonly Gu.Units.ForceUnit.Micronewtons -> Gu.Units.ForceUnit
static readonly Gu.Units.ForceUnit.Millinewtons -> Gu.Units.ForceUnit
static readonly Gu.Units.ForceUnit.Nanonewtons -> Gu.Units.ForceUnit
static readonly Gu.Units.ForceUnit.Newtons -> Gu.Units.ForceUnit
static readonly Gu.Units.Frequency.Zero -> Gu.Units.Frequency
static readonly Gu.Units.FrequencyUnit.Gigahertz -> Gu.Units.FrequencyUnit
static readonly Gu.Units.FrequencyUnit.Hertz -> Gu.Units.FrequencyUnit
static readonly Gu.Units.FrequencyUnit.Kilohertz -> Gu.Units.FrequencyUnit
static readonly Gu.Units.FrequencyUnit.Megahertz -> Gu.Units.FrequencyUnit
static readonly Gu.Units.FrequencyUnit.Millihertz -> Gu.Units.FrequencyUnit
static readonly Gu.Units.Illuminance.Zero -> Gu.Units.Illuminance
static readonly Gu.Units.IlluminanceUnit.Lux -> Gu.Units.IlluminanceUnit
static readonly Gu.Units.Inductance.Zero -> Gu.Units.Inductance
static readonly Gu.Units.InductanceUnit.Gigahenrys -> Gu.Units.InductanceUnit
static readonly Gu.Units.InductanceUnit.Henrys -> Gu.Units.InductanceUnit
static readonly Gu.Units.InductanceUnit.Kilohenrys -> Gu.Units.InductanceUnit
static readonly Gu.Units.InductanceUnit.Megahenrys -> Gu.Units.InductanceUnit
static readonly Gu.Units.InductanceUnit.Microhenrys -> Gu.Units.InductanceUnit
static readonly Gu.Units.InductanceUnit.Millihenrys -> Gu.Units.InductanceUnit
static readonly Gu.Units.InductanceUnit.Nanohenrys -> Gu.Units.InductanceUnit
static readonly Gu.Units.Jerk.Zero -> Gu.Units.Jerk
static readonly Gu.Units.JerkUnit.CentimetresPerHourCubed -> Gu.Units.JerkUnit
static readonly Gu.Units.JerkUnit.CentimetresPerMinuteCubed -> Gu.Units.JerkUnit
static readonly Gu.Units.JerkUnit.CentimetresPerSecondCubed -> Gu.Units.JerkUnit
static readonly Gu.Units.JerkUnit.MetresPerHourCubed -> Gu.Units.JerkUnit
static readonly Gu.Units.JerkUnit.MetresPerMinuteCubed -> Gu.Units.JerkUnit
static readonly Gu.Units.JerkUnit.MetresPerSecondCubed -> Gu.Units.JerkUnit
static readonly Gu.Units.JerkUnit.MillimetresPerHourCubed -> Gu.Units.JerkUnit
static readonly Gu.Units.JerkUnit.MillimetresPerMinuteCubed -> Gu.Units.JerkUnit
static readonly Gu.Units.JerkUnit.MillimetresPerSecondCubed -> Gu.Units.JerkUnit
static readonly Gu.Units.KinematicViscosity.Zero -> Gu.Units.KinematicViscosity
static readonly Gu.Units.KinematicViscosityUnit.SquareMetresPerSecond -> Gu.Units.KinematicViscosityUnit
static readonly Gu.Units.Length.Zero -> Gu.Units.Length
static readonly Gu.Units.LengthPerUnitless.Zero -> Gu.Units.LengthPerUnitless
static readonly Gu.Units.LengthPerUnitlessUnit.MetresPerPercent -> Gu.Units.LengthPerUnitlessUnit
static readonly Gu.Units.LengthPerUnitlessUnit.MetresPerUnitless -> Gu.Units.LengthPerUnitlessUnit
static readonly Gu.Units.LengthPerUnitlessUnit.MicrometresPerPercent -> Gu.Units.LengthPerUnitlessUnit
static readonly Gu.Units.LengthPerUnitlessUnit.MillimetresPerPercent -> Gu.Units.LengthPerUnitlessUnit
static readonly Gu.Units.LengthUnit.Centimetres -> Gu.Units.LengthUnit
static readonly Gu.Units.LengthUnit.Decimetres -> Gu.Units.LengthUnit
static readonly Gu.Units.LengthUnit.Feet -> Gu.Units.LengthUnit
static readonly Gu.Units.LengthUnit.Inches -> Gu.Units.LengthUnit
static readonly Gu.Units.LengthUnit.Kilometres -> Gu.Units.LengthUnit
static readonly Gu.Units.LengthUnit.Metres -> Gu.Units.LengthUnit
static readonly Gu.Units.LengthUnit.Micrometres -> Gu.Units.LengthUnit
static readonly Gu.Units.LengthUnit.Miles -> Gu.Units.LengthUnit
static readonly Gu.Units.LengthUnit.Millimetres -> Gu.Units.LengthUnit
static readonly Gu.Units.LengthUnit.Nanometres -> Gu.Units.LengthUnit
static readonly Gu.Units.LengthUnit.NauticalMiles -> Gu.Units.LengthUnit
static readonly Gu.Units.LengthUnit.Yards -> Gu.Units.LengthUnit
static readonly Gu.Units.LuminousFlux.Zero -> Gu.Units.LuminousFlux
static readonly Gu.Units.LuminousFluxUnit.Lumens -> Gu.Units.LuminousFluxUnit
static readonly Gu.Units.LuminousIntensity.Zero -> Gu.Units.LuminousIntensity
static readonly Gu.Units.LuminousIntensityUnit.Candelas -> Gu.Units.LuminousIntensityUnit
static readonly Gu.Units.MagneticFieldStrength.Zero -> Gu.Units.MagneticFieldStrength
static readonly Gu.Units.MagneticFieldStrengthUnit.Teslas -> Gu.Units.MagneticFieldStrengthUnit
static readonly Gu.Units.MagneticFlux.Zero -> Gu.Units.MagneticFlux
static readonly Gu.Units.MagneticFluxUnit.Webers -> Gu.Units.MagneticFluxUnit
static readonly Gu.Units.Mass.Zero -> Gu.Units.Mass
static readonly Gu.Units.MassFlow.Zero -> Gu.Units.MassFlow
static readonly Gu.Units.MassFlowUnit.KilogramsPerSecond -> Gu.Units.MassFlowUnit
static readonly Gu.Units.MassUnit.AvoirdupoisOunces -> Gu.Units.MassUnit
static readonly Gu.Units.MassUnit.AvoirdupoisPounds -> Gu.Units.MassUnit
static readonly Gu.Units.MassUnit.Grams -> Gu.Units.MassUnit
static readonly Gu.Units.MassUnit.Kilograms -> Gu.Units.MassUnit
static readonly Gu.Units.MassUnit.Micrograms -> Gu.Units.MassUnit
static readonly Gu.Units.MassUnit.Milligrams -> Gu.Units.MassUnit
static readonly Gu.Units.MassUnit.TroyGrains -> Gu.Units.MassUnit
static readonly Gu.Units.MassUnit.TroyOunces -> Gu.Units.MassUnit
static readonly Gu.Units.MolarHeatCapacity.Zero -> Gu.Units.MolarHeatCapacity
static readonly Gu.Units.MolarHeatCapacityUnit.JoulesPerKelvinMole -> Gu.Units.MolarHeatCapacityUnit
static readonly Gu.Units.MolarMass.Zero -> Gu.Units.MolarMass
static readonly Gu.Units.MolarMassUnit.GramsPerMole -> Gu.Units.MolarMassUnit
static readonly Gu.Units.MolarMassUnit.KilogramsPerMole -> Gu.Units.MolarMassUnit
static readonly Gu.Units.Momentum.Zero -> Gu.Units.Momentum
static readonly Gu.Units.MomentumUnit.NewtonSecond -> Gu.Units.MomentumUnit
static readonly Gu.Units.Power.Zero -> Gu.Units.Power
static readonly Gu.Units.PowerUnit.Gigawatts -> Gu.Units.PowerUnit
static readonly Gu.Units.PowerUnit.Kilowatts -> Gu.Units.PowerUnit
static readonly Gu.Units.PowerUnit.Megawatts -> Gu.Units.PowerUnit
static readonly Gu.Units.PowerUnit.Microwatts -> Gu.Units.PowerUnit
static readonly Gu.Units.PowerUnit.Milliwatts -> Gu.Units.PowerUnit
static readonly Gu.Units.PowerUnit.Nanowatts -> Gu.Units.PowerUnit
static readonly Gu.Units.PowerUnit.Watts -> Gu.Units.PowerUnit
static readonly Gu.Units.Pressure.Zero -> Gu.Units.Pressure
static readonly Gu.Units.PressureUnit.Bars -> Gu.Units.PressureUnit
static readonly Gu.Units.PressureUnit.Gigapascals -> Gu.Units.PressureUnit
static readonly Gu.Units.PressureUnit.KilonewtonsPerSquareMillimetre -> Gu.Units.PressureUnit
static readonly Gu.Units.PressureUnit.Kilopascals -> Gu.Units.PressureUnit
static readonly Gu.Units.PressureUnit.Megapascals -> Gu.Units.PressureUnit
static readonly Gu.Units.PressureUnit.Micropascals -> Gu.Units.PressureUnit
static readonly Gu.Units.PressureUnit.Millibars -> Gu.Units.PressureUnit
static readonly Gu.Units.PressureUnit.Millipascals -> Gu.Units.PressureUnit
static readonly Gu.Units.PressureUnit.Nanopascals -> Gu.Units.PressureUnit
static readonly Gu.Units.PressureUnit.NewtonsPerSquareMetre -> Gu.Units.PressureUnit
static readonly Gu.Units.PressureUnit.NewtonsPerSquareMillimetre -> Gu.Units.PressureUnit
static readonly Gu.Units.PressureUnit.Pascals -> Gu.Units.PressureUnit
static readonly Gu.Units.Resistance.Zero -> Gu.Units.Resistance
static readonly Gu.Units.ResistanceUnit.Kiloohms -> Gu.Units.ResistanceUnit
static readonly Gu.Units.ResistanceUnit.Megaohms -> Gu.Units.ResistanceUnit
static readonly Gu.Units.ResistanceUnit.Microohms -> Gu.Units.ResistanceUnit
static readonly Gu.Units.ResistanceUnit.Milliohms -> Gu.Units.ResistanceUnit
static readonly Gu.Units.ResistanceUnit.Ohms -> Gu.Units.ResistanceUnit
static readonly Gu.Units.SolidAngle.Zero -> Gu.Units.SolidAngle
static readonly Gu.Units.SolidAngleUnit.Steradians -> Gu.Units.SolidAngleUnit
static readonly Gu.Units.SpecificEnergy.Zero -> Gu.Units.SpecificEnergy
static readonly Gu.Units.SpecificEnergyUnit.JoulesPerKilogram -> Gu.Units.SpecificEnergyUnit
static readonly Gu.Units.SpecificEnergyUnit.KilojoulesPerKilogram -> Gu.Units.SpecificEnergyUnit
static readonly Gu.Units.SpecificVolume.Zero -> Gu.Units.SpecificVolume
static readonly Gu.Units.SpecificVolumeUnit.CubicCentimetresPerGram -> Gu.Units.SpecificVolumeUnit
static readonly Gu.Units.SpecificVolumeUnit.CubicMetresPerGram -> Gu.Units.SpecificVolumeUnit
static readonly Gu.Units.SpecificVolumeUnit.CubicMetresPerKilogram -> Gu.Units.SpecificVolumeUnit
static readonly Gu.Units.Speed.Zero -> Gu.Units.Speed
static readonly Gu.Units.SpeedUnit.CentimetresPerHour -> Gu.Units.SpeedUnit
static readonly Gu.Units.SpeedUnit.CentimetresPerMinute -> Gu.Units.SpeedUnit
static readonly Gu.Units.SpeedUnit.CentimetresPerSecond -> Gu.Units.SpeedUnit
static readonly Gu.Units.SpeedUnit.KilometresPerHour -> Gu.Units.SpeedUnit
static readonly Gu.Units.SpeedUnit.MetresPerHour -> Gu.Units.SpeedUnit
static readonly Gu.Units.SpeedUnit.MetresPerMinute -> Gu.Units.SpeedUnit
static readonly Gu.Units.SpeedUnit.MetresPerSecond -> Gu.Units.SpeedUnit
static readonly Gu.Units.SpeedUnit.MillimetresPerHour -> Gu.Units.SpeedUnit
static readonly Gu.Units.SpeedUnit.MillimetresPerMinute -> Gu.Units.SpeedUnit
static readonly Gu.Units.SpeedUnit.MillimetresPerSecond -> Gu.Units.SpeedUnit
static readonly Gu.Units.Stiffness.Zero -> Gu.Units.Stiffness
static readonly Gu.Units.StiffnessUnit.GiganewtonsPerMicrometre -> Gu.Units.StiffnessUnit
static readonly Gu.Units.StiffnessUnit.GiganewtonsPerMillimetre -> Gu.Units.StiffnessUnit
static readonly Gu.Units.StiffnessUnit.KilonewtonsPerMicrometre -> Gu.Units.StiffnessUnit
static readonly Gu.Units.StiffnessUnit.KilonewtonsPerMillimetre -> Gu.Units.StiffnessUnit
static readonly Gu.Units.StiffnessUnit.KilonewtonsPerNanometre -> Gu.Units.StiffnessUnit
static readonly Gu.Units.StiffnessUnit.MeganewtonsPerMicrometre -> Gu.Units.StiffnessUnit
static readonly Gu.Units.StiffnessUnit.MeganewtonsPerMillimetre -> Gu.Units.StiffnessUnit
static readonly Gu.Units.StiffnessUnit.MeganewtonsPerNanometre -> Gu.Units.StiffnessUnit
static readonly Gu.Units.StiffnessUnit.NewtonsPerMetre -> Gu.Units.StiffnessUnit
static readonly Gu.Units.StiffnessUnit.NewtonsPerMicrometre -> Gu.Units.StiffnessUnit
static readonly Gu.Units.StiffnessUnit.NewtonsPerMillimetre -> Gu.Units.StiffnessUnit
static readonly Gu.Units.StiffnessUnit.NewtonsPerNanometre -> Gu.Units.StiffnessUnit
static readonly Gu.Units.SuperScript.Minus -> char
static readonly Gu.Units.SuperScript.Plus -> char
static readonly Gu.Units.Temperature.Zero -> Gu.Units.Temperature
static readonly Gu.Units.TemperatureUnit.Celsius -> Gu.Units.TemperatureUnit
static readonly Gu.Units.TemperatureUnit.Fahrenheit -> Gu.Units.TemperatureUnit
static readonly Gu.Units.TemperatureUnit.Kelvin -> Gu.Units.TemperatureUnit
static readonly Gu.Units.Time.Zero -> Gu.Units.Time
static readonly Gu.Units.TimeUnit.Days -> Gu.Units.TimeUnit
static readonly Gu.Units.TimeUnit.Hours -> Gu.Units.TimeUnit
static readonly Gu.Units.TimeUnit.Microseconds -> Gu.Units.TimeUnit
static readonly Gu.Units.TimeUnit.Milliseconds -> Gu.Units.TimeUnit
static readonly Gu.Units.TimeUnit.Minutes -> Gu.Units.TimeUnit
static readonly Gu.Units.TimeUnit.Nanoseconds -> Gu.Units.TimeUnit
static readonly Gu.Units.TimeUnit.Seconds -> Gu.Units.TimeUnit
static readonly Gu.Units.Torque.Zero -> Gu.Units.Torque
static readonly Gu.Units.TorqueUnit.NewtonMetres -> Gu.Units.TorqueUnit
static readonly Gu.Units.Unitless.Zero -> Gu.Units.Unitless
static readonly Gu.Units.UnitlessUnit.PartsPerMillion -> Gu.Units.UnitlessUnit
static readonly Gu.Units.UnitlessUnit.Percents -> Gu.Units.UnitlessUnit
static readonly Gu.Units.UnitlessUnit.Promilles -> Gu.Units.UnitlessUnit
static readonly Gu.Units.UnitlessUnit.Scalar -> Gu.Units.UnitlessUnit
static readonly Gu.Units.Voltage.Zero -> Gu.Units.Voltage
static readonly Gu.Units.VoltageUnit.Gigavolts -> Gu.Units.VoltageUnit
static readonly Gu.Units.VoltageUnit.Kilovolts -> Gu.Units.VoltageUnit
static readonly Gu.Units.VoltageUnit.Megavolts -> Gu.Units.VoltageUnit
static readonly Gu.Units.VoltageUnit.Microvolts -> Gu.Units.VoltageUnit
static readonly Gu.Units.VoltageUnit.Millivolts -> Gu.Units.VoltageUnit
static readonly Gu.Units.VoltageUnit.Nanovolts -> Gu.Units.VoltageUnit
static readonly Gu.Units.VoltageUnit.Volts -> Gu.Units.VoltageUnit
static readonly Gu.Units.Volume.Zero -> Gu.Units.Volume
static readonly Gu.Units.VolumetricFlow.Zero -> Gu.Units.VolumetricFlow
static readonly Gu.Units.VolumetricFlowUnit.CentilitresPerHour -> Gu.Units.VolumetricFlowUnit
static readonly Gu.Units.VolumetricFlowUnit.CentilitresPerMinute -> Gu.Units.VolumetricFlowUnit
static readonly Gu.Units.VolumetricFlowUnit.CentilitresPerSecond -> Gu.Units.VolumetricFlowUnit
static readonly Gu.Units.VolumetricFlowUnit.CubicFeetPerDay -> Gu.Units.VolumetricFlowUnit
static readonly Gu.Units.VolumetricFlowUnit.CubicFeetPerHour -> Gu.Units.VolumetricFlowUnit
static readonly Gu.Units.VolumetricFlowUnit.CubicFeetPerMinute -> Gu.Units.VolumetricFlowUnit
static readonly Gu.Units.VolumetricFlowUnit.CubicFeetPerSecond -> Gu.Units.VolumetricFlowUnit
static readonly Gu.Units.VolumetricFlowUnit.CubicMetresPerHour -> Gu.Units.VolumetricFlowUnit
static readonly Gu.Units.VolumetricFlowUnit.CubicMetresPerMinute -> Gu.Units.VolumetricFlowUnit
static readonly Gu.Units.VolumetricFlowUnit.CubicMetresPerSecond -> Gu.Units.VolumetricFlowUnit
static readonly Gu.Units.VolumetricFlowUnit.LitresPerHour -> Gu.Units.VolumetricFlowUnit
static readonly Gu.Units.VolumetricFlowUnit.LitresPerMinute -> Gu.Units.VolumetricFlowUnit
static readonly Gu.Units.VolumetricFlowUnit.LitresPerSecond -> Gu.Units.VolumetricFlowUnit
static readonly Gu.Units.VolumetricFlowUnit.MillilitresPerHour -> Gu.Units.VolumetricFlowUnit
static readonly Gu.Units.VolumetricFlowUnit.MillilitresPerMinute -> Gu.Units.VolumetricFlowUnit
static readonly Gu.Units.VolumetricFlowUnit.MillilitresPerSecond -> Gu.Units.VolumetricFlowUnit
static readonly Gu.Units.VolumeUnit.Centilitres -> Gu.Units.VolumeUnit
static readonly Gu.Units.VolumeUnit.CubicCentimetres -> Gu.Units.VolumeUnit
static readonly Gu.Units.VolumeUnit.CubicDecimetres -> Gu.Units.VolumeUnit
static readonly Gu.Units.VolumeUnit.CubicFeet -> Gu.Units.VolumeUnit
static readonly Gu.Units.VolumeUnit.CubicInches -> Gu.Units.VolumeUnit
static readonly Gu.Units.VolumeUnit.CubicMetres -> Gu.Units.VolumeUnit
static readonly Gu.Units.VolumeUnit.CubicMillimetres -> Gu.Units.VolumeUnit
static readonly Gu.Units.VolumeUnit.Decilitres -> Gu.Units.VolumeUnit
static readonly Gu.Units.VolumeUnit.Litres -> Gu.Units.VolumeUnit
static readonly Gu.Units.VolumeUnit.Millilitres -> Gu.Units.VolumeUnit
static readonly Gu.Units.Wavenumber.Zero -> Gu.Units.Wavenumber
static readonly Gu.Units.WavenumberUnit.ReciprocalMetres -> Gu.Units.WavenumberUnit